
LB2_1_Orkm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08008378  08008378  00018378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008708  08008708  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008710  08008710  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000080  08008798  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08008798  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106ba  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ad  00000000  00000000  0003076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00034018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002559d  00000000  00000000  00034dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c17  00000000  00000000  0005a35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dff2b  00000000  00000000  0006cf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ce9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  0014cef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800835c 	.word	0x0800835c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800835c 	.word	0x0800835c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC3_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC3_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC3_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC3_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC3_Init+0xa0>)
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_ADC3_Init+0x98>)
 8000fdc:	f001 fbaa 	bl	8002734 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f001 f86d 	bl	80020c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC3_Init+0x98>)
 8000ffc:	f001 fd0c 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001006:	f001 f85d 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000009c 	.word	0x2000009c
 8001018:	40012200 	.word	0x40012200
 800101c:	0f000001 	.word	0x0f000001

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_ADC_MspInit+0x8c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12f      	bne.n	80010a2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_ADC_MspInit+0x90>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_ADC_MspInit+0x94>)
 800108e:	f002 f80d 	bl	80030ac <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2012      	movs	r0, #18
 8001098:	f001 ffd1 	bl	800303e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800109c:	2012      	movs	r0, #18
 800109e:	f001 ffea 	bl	8003076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40012200 	.word	0x40012200
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000

080010b8 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <disp1color_UpdateFromBuff+0x10>)
 80010c0:	f000 f862 	bl	8001188 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000164 	.word	0x20000164

080010cc <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	460b      	mov	r3, r1
 80010d8:	80bb      	strh	r3, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	dc48      	bgt.n	8001178 <disp1color_DrawPixel+0xac>
 80010e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	dc44      	bgt.n	8001178 <disp1color_DrawPixel+0xac>
 80010ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db40      	blt.n	8001178 <disp1color_DrawPixel+0xac>
 80010f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db3c      	blt.n	8001178 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 80010fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001102:	10db      	asrs	r3, r3, #3
 8001104:	b21b      	sxth	r3, r3
 8001106:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	4413      	add	r3, r2
 8001124:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00f      	beq.n	800114c <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <disp1color_DrawPixel+0xb8>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	b25a      	sxtb	r2, r3
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b25a      	sxtb	r2, r3
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	b2d1      	uxtb	r1, r2
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <disp1color_DrawPixel+0xb8>)
 8001148:	54d1      	strb	r1, [r2, r3]
 800114a:	e010      	b.n	800116e <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <disp1color_DrawPixel+0xb8>)
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	b25a      	sxtb	r2, r3
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	b25b      	sxtb	r3, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4013      	ands	r3, r2
 8001164:	b25a      	sxtb	r2, r3
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	b2d1      	uxtb	r1, r2
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <disp1color_DrawPixel+0xb8>)
 800116c:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <disp1color_DrawPixel+0xb8>)
 8001172:	5cd3      	ldrb	r3, [r2, r3]
 8001174:	733b      	strb	r3, [r7, #12]
 8001176:	e000      	b.n	800117a <disp1color_DrawPixel+0xae>
    return;
 8001178:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000164 	.word	0x20000164

08001188 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	461a      	mov	r2, r3
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f816 	bl	80011cc <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	461a      	mov	r2, r3
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f810 	bl	80011cc <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	461a      	mov	r2, r3
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	2002      	movs	r0, #2
 80011b4:	f000 f80a 	bl	80011cc <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	461a      	mov	r2, r3
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 f804 	bl	80011cc <DMD_1COLOR_UpdateRow4>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 80011dc:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <DMD_1COLOR_UpdateRow4+0xcc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <DMD_1COLOR_UpdateRow4+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 80011f0:	2302      	movs	r3, #2
 80011f2:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	83fb      	strh	r3, [r7, #30]
 80011f8:	2300      	movs	r3, #0
 80011fa:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	76fb      	strb	r3, [r7, #27]
 8001200:	e040      	b.n	8001284 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8001202:	8bfb      	ldrh	r3, [r7, #30]
 8001204:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8001206:	2300      	movs	r3, #0
 8001208:	76bb      	strb	r3, [r7, #26]
 800120a:	e028      	b.n	800125e <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <DMD_1COLOR_UpdateRow4+0xd4>)
 800120e:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8001210:	8bbb      	ldrh	r3, [r7, #28]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e015      	b.n	800124a <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 800121e:	2220      	movs	r2, #32
 8001220:	6939      	ldr	r1, [r7, #16]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f003 fede 	bl	8004fe4 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	491d      	ldr	r1, [pc, #116]	; (80012a0 <DMD_1COLOR_UpdateRow4+0xd4>)
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f839 	bl	80012a4 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3320      	adds	r3, #32
 8001236:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <DMD_1COLOR_UpdateRow4+0xcc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	3301      	adds	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	7a7b      	ldrb	r3, [r7, #9]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3e5      	bcc.n	800121e <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 8001252:	8bbb      	ldrh	r3, [r7, #28]
 8001254:	3320      	adds	r3, #32
 8001256:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8001258:	7ebb      	ldrb	r3, [r7, #26]
 800125a:	3301      	adds	r3, #1
 800125c:	76bb      	strb	r3, [r7, #26]
 800125e:	7ebb      	ldrb	r3, [r7, #26]
 8001260:	b29b      	uxth	r3, r3
 8001262:	897a      	ldrh	r2, [r7, #10]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8d1      	bhi.n	800120c <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <DMD_1COLOR_UpdateRow4+0xcc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	fb12 f303 	smulbb	r3, r2, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	8bfb      	ldrh	r3, [r7, #30]
 800127a:	4413      	add	r3, r2
 800127c:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 800127e:	7efb      	ldrb	r3, [r7, #27]
 8001280:	3301      	adds	r3, #1
 8001282:	76fb      	strb	r3, [r7, #27]
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	b29b      	uxth	r3, r3
 8001288:	89ba      	ldrh	r2, [r7, #12]
 800128a:	429a      	cmp	r2, r3
 800128c:	d8b9      	bhi.n	8001202 <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000001 	.word	0x20000001
 800129c:	20000000 	.word	0x20000000
 80012a0:	200000e4 	.word	0x200000e4

080012a4 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 80012b0:	2302      	movs	r3, #2
 80012b2:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 80012b4:	2304      	movs	r3, #4
 80012b6:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 80012be:	4413      	add	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	74fb      	strb	r3, [r7, #19]
 80012c6:	e035      	b.n	8001334 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 80012c8:	7c7b      	ldrb	r3, [r7, #17]
 80012ca:	74bb      	strb	r3, [r7, #18]
 80012cc:	e02c      	b.n	8001328 <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 80012ce:	7cbb      	ldrb	r3, [r7, #18]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3304      	adds	r3, #4
 80012ec:	2201      	movs	r2, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	697c      	ldr	r4, [r7, #20]
 80012f6:	1c63      	adds	r3, r4, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	4610      	mov	r0, r2
 80012fe:	f000 f825 	bl	800134c <DMD_1COLOR_GetFrom8ScreenBytes>
 8001302:	4603      	mov	r3, r0
 8001304:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2201      	movs	r2, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	b2da      	uxtb	r2, r3
 8001310:	697c      	ldr	r4, [r7, #20]
 8001312:	1c63      	adds	r3, r4, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	4610      	mov	r0, r2
 800131a:	f000 f817 	bl	800134c <DMD_1COLOR_GetFrom8ScreenBytes>
 800131e:	4603      	mov	r3, r0
 8001320:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8001322:	7cbb      	ldrb	r3, [r7, #18]
 8001324:	3b01      	subs	r3, #1
 8001326:	74bb      	strb	r3, [r7, #18]
 8001328:	7cbb      	ldrb	r3, [r7, #18]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1cf      	bne.n	80012ce <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 800132e:	7cfb      	ldrb	r3, [r7, #19]
 8001330:	3301      	adds	r3, #1
 8001332:	74fb      	strb	r3, [r7, #19]
 8001334:	7cfa      	ldrb	r2, [r7, #19]
 8001336:	7c3b      	ldrb	r3, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3c5      	bcc.n	80012c8 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	20000124 	.word	0x20000124

0800134c <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	e010      	b.n	8001384 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4013      	ands	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	4313      	orrs	r3, r2
 8001376:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	73bb      	strb	r3, [r7, #14]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1eb      	bne.n	8001362 <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	43db      	mvns	r3, r3
 800138e:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
 80013aa:	e042      	b.n	8001432 <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	71bb      	strb	r3, [r7, #6]
 80013b0:	e039      	b.n	8001426 <prepare_data+0x86>
			if (i == 0) {
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 80013b8:	79f9      	ldrb	r1, [r7, #7]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	4822      	ldr	r0, [pc, #136]	; (8001448 <prepare_data+0xa8>)
 80013c0:	0109      	lsls	r1, r1, #4
 80013c2:	4401      	add	r1, r0
 80013c4:	440a      	add	r2, r1
 80013c6:	7811      	ldrb	r1, [r2, #0]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <prepare_data+0xac>)
 80013ca:	54d1      	strb	r1, [r2, r3]
 80013cc:	e028      	b.n	8001420 <prepare_data+0x80>
			}
			else if (i == 1) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10a      	bne.n	80013ea <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 80013d4:	79f9      	ldrb	r1, [r7, #7]
 80013d6:	79ba      	ldrb	r2, [r7, #6]
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	481b      	ldr	r0, [pc, #108]	; (8001448 <prepare_data+0xa8>)
 80013dc:	0109      	lsls	r1, r1, #4
 80013de:	4401      	add	r1, r0
 80013e0:	440a      	add	r2, r1
 80013e2:	7811      	ldrb	r1, [r2, #0]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <prepare_data+0xb0>)
 80013e6:	54d1      	strb	r1, [r2, r3]
 80013e8:	e01a      	b.n	8001420 <prepare_data+0x80>
			}
			else if (i == 2) {
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d10a      	bne.n	8001406 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 80013f0:	79f9      	ldrb	r1, [r7, #7]
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <prepare_data+0xa8>)
 80013f8:	0109      	lsls	r1, r1, #4
 80013fa:	4401      	add	r1, r0
 80013fc:	440a      	add	r2, r1
 80013fe:	7811      	ldrb	r1, [r2, #0]
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <prepare_data+0xb4>)
 8001402:	54d1      	strb	r1, [r2, r3]
 8001404:	e00c      	b.n	8001420 <prepare_data+0x80>
			}
			else if (i == 3) {
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d109      	bne.n	8001420 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 800140c:	79f9      	ldrb	r1, [r7, #7]
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <prepare_data+0xa8>)
 8001414:	0109      	lsls	r1, r1, #4
 8001416:	4401      	add	r1, r0
 8001418:	440a      	add	r2, r1
 800141a:	7811      	ldrb	r1, [r2, #0]
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <prepare_data+0xb8>)
 800141e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	3301      	adds	r3, #1
 8001424:	71bb      	strb	r3, [r7, #6]
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d9c2      	bls.n	80013b2 <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	3301      	adds	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d9b9      	bls.n	80013ac <prepare_data+0xc>
			}
		}
	}
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000124 	.word	0x20000124
 800144c:	200001a4 	.word	0x200001a4
 8001450:	200001b4 	.word	0x200001b4
 8001454:	200001c4 	.word	0x200001c4
 8001458:	200001d4 	.word	0x200001d4

0800145c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <MX_GPIO_Init+0xd8>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2150      	movs	r1, #80	; 0x50
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <MX_GPIO_Init+0xdc>)
 80014cc:	f001 ff9a 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A_Pin|B_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2130      	movs	r1, #48	; 0x30
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <MX_GPIO_Init+0xe0>)
 80014d6:	f001 ff95 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0xe0>)
 80014f0:	f001 fddc 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 80014f4:	2350      	movs	r3, #80	; 0x50
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0xdc>)
 800150c:	f001 fdce 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8001510:	2330      	movs	r3, #48	; 0x30
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_GPIO_Init+0xe0>)
 8001528:	f001 fdc0 	bl	80030ac <HAL_GPIO_Init>

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020800 	.word	0x40020800

08001540 <disp_row>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disp_row(uint16_t row) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]

	if (row == 0) {
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d122      	bne.n	8001596 <disp_row+0x56>

		for (uint8_t i = 0; i < 6; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e008      	b.n	8001568 <disp_row+0x28>
			HAL_SPI_Transmit(&hspi1, &data1, 16, 10);
 8001556:	230a      	movs	r3, #10
 8001558:	2210      	movs	r2, #16
 800155a:	4954      	ldr	r1, [pc, #336]	; (80016ac <disp_row+0x16c>)
 800155c:	4854      	ldr	r0, [pc, #336]	; (80016b0 <disp_row+0x170>)
 800155e:	f002 fd22 	bl	8003fa6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d9f3      	bls.n	8001556 <disp_row+0x16>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	4850      	ldr	r0, [pc, #320]	; (80016b4 <disp_row+0x174>)
 8001574:	f001 ff46 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	484d      	ldr	r0, [pc, #308]	; (80016b4 <disp_row+0x174>)
 800157e:	f001 ff41 	bl	8003404 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2110      	movs	r1, #16
 8001586:	484c      	ldr	r0, [pc, #304]	; (80016b8 <disp_row+0x178>)
 8001588:	f001 ff3c 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	4849      	ldr	r0, [pc, #292]	; (80016b8 <disp_row+0x178>)
 8001592:	f001 ff37 	bl	8003404 <HAL_GPIO_WritePin>
	}
	if (row == 1) {
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d122      	bne.n	80015e2 <disp_row+0xa2>

		for (uint8_t i = 0; i < 6; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	73bb      	strb	r3, [r7, #14]
 80015a0:	e008      	b.n	80015b4 <disp_row+0x74>
			HAL_SPI_Transmit(&hspi1, &data2, 16, 10);
 80015a2:	230a      	movs	r3, #10
 80015a4:	2210      	movs	r2, #16
 80015a6:	4945      	ldr	r1, [pc, #276]	; (80016bc <disp_row+0x17c>)
 80015a8:	4841      	ldr	r0, [pc, #260]	; (80016b0 <disp_row+0x170>)
 80015aa:	f002 fcfc 	bl	8003fa6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73bb      	strb	r3, [r7, #14]
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d9f3      	bls.n	80015a2 <disp_row+0x62>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2140      	movs	r1, #64	; 0x40
 80015be:	483d      	ldr	r0, [pc, #244]	; (80016b4 <disp_row+0x174>)
 80015c0:	f001 ff20 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	483a      	ldr	r0, [pc, #232]	; (80016b4 <disp_row+0x174>)
 80015ca:	f001 ff1b 	bl	8003404 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2110      	movs	r1, #16
 80015d2:	4839      	ldr	r0, [pc, #228]	; (80016b8 <disp_row+0x178>)
 80015d4:	f001 ff16 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2120      	movs	r1, #32
 80015dc:	4836      	ldr	r0, [pc, #216]	; (80016b8 <disp_row+0x178>)
 80015de:	f001 ff11 	bl	8003404 <HAL_GPIO_WritePin>
	}

	if (row == 2) {
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d122      	bne.n	800162e <disp_row+0xee>

		for (uint8_t i = 0; i < 6; i++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	e008      	b.n	8001600 <disp_row+0xc0>
			HAL_SPI_Transmit(&hspi1, &data3, 16, 10);
 80015ee:	230a      	movs	r3, #10
 80015f0:	2210      	movs	r2, #16
 80015f2:	4933      	ldr	r1, [pc, #204]	; (80016c0 <disp_row+0x180>)
 80015f4:	482e      	ldr	r0, [pc, #184]	; (80016b0 <disp_row+0x170>)
 80015f6:	f002 fcd6 	bl	8003fa6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 80015fa:	7b7b      	ldrb	r3, [r7, #13]
 80015fc:	3301      	adds	r3, #1
 80015fe:	737b      	strb	r3, [r7, #13]
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d9f3      	bls.n	80015ee <disp_row+0xae>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <disp_row+0x174>)
 800160c:	f001 fefa 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	4827      	ldr	r0, [pc, #156]	; (80016b4 <disp_row+0x174>)
 8001616:	f001 fef5 	bl	8003404 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2110      	movs	r1, #16
 800161e:	4826      	ldr	r0, [pc, #152]	; (80016b8 <disp_row+0x178>)
 8001620:	f001 fef0 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2120      	movs	r1, #32
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <disp_row+0x178>)
 800162a:	f001 feeb 	bl	8003404 <HAL_GPIO_WritePin>
	}

	if (row == 3) {
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d122      	bne.n	800167a <disp_row+0x13a>

		for (uint8_t i = 0; i < 6; i++) {
 8001634:	2300      	movs	r3, #0
 8001636:	733b      	strb	r3, [r7, #12]
 8001638:	e008      	b.n	800164c <disp_row+0x10c>
			HAL_SPI_Transmit(&hspi1, &data4, 16, 10);
 800163a:	230a      	movs	r3, #10
 800163c:	2210      	movs	r2, #16
 800163e:	4921      	ldr	r1, [pc, #132]	; (80016c4 <disp_row+0x184>)
 8001640:	481b      	ldr	r0, [pc, #108]	; (80016b0 <disp_row+0x170>)
 8001642:	f002 fcb0 	bl	8003fa6 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	733b      	strb	r3, [r7, #12]
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	2b05      	cmp	r3, #5
 8001650:	d9f3      	bls.n	800163a <disp_row+0xfa>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	4817      	ldr	r0, [pc, #92]	; (80016b4 <disp_row+0x174>)
 8001658:	f001 fed4 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <disp_row+0x174>)
 8001662:	f001 fecf 	bl	8003404 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2110      	movs	r1, #16
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <disp_row+0x178>)
 800166c:	f001 feca 	bl	8003404 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2120      	movs	r1, #32
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <disp_row+0x178>)
 8001676:	f001 fec5 	bl	8003404 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2110      	movs	r1, #16
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <disp_row+0x174>)
 8001680:	f001 fec0 	bl	8003404 <HAL_GPIO_WritePin>
	for (uint32_t x = 0; x <= 300; x++) {
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	e002      	b.n	8001690 <disp_row+0x150>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3301      	adds	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001696:	d9f8      	bls.n	800168a <disp_row+0x14a>
	};
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2110      	movs	r1, #16
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <disp_row+0x174>)
 800169e:	f001 feb1 	bl	8003404 <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200001a4 	.word	0x200001a4
 80016b0:	20000230 	.word	0x20000230
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020800 	.word	0x40020800
 80016bc:	200001b4 	.word	0x200001b4
 80016c0:	200001c4 	.word	0x200001c4
 80016c4:	200001d4 	.word	0x200001d4

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f000 ffbe 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 fc96 	bl	8002004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f7ff fec0 	bl	800145c <MX_GPIO_Init>
  MX_TIM1_Init();
 80016dc:	f000 fee6 	bl	80024ac <MX_TIM1_Init>
  MX_ADC3_Init();
 80016e0:	f7ff fc4c 	bl	8000f7c <MX_ADC3_Init>
  MX_SPI1_Init();
 80016e4:	f000 fcf4 	bl	80020d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80016e8:	48a3      	ldr	r0, [pc, #652]	; (8001978 <main+0x2b0>)
 80016ea:	f002 fe63 	bl	80043b4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  status = !HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80016ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f2:	48a2      	ldr	r0, [pc, #648]	; (800197c <main+0x2b4>)
 80016f4:	f001 fe6e 	bl	80033d4 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	b25a      	sxtb	r2, r3
 8001706:	4b9e      	ldr	r3, [pc, #632]	; (8001980 <main+0x2b8>)
 8001708:	701a      	strb	r2, [r3, #0]
	  if (status == 1 && poz != 1) {
 800170a:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <main+0x2b8>)
 800170c:	f993 3000 	ldrsb.w	r3, [r3]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d119      	bne.n	8001748 <main+0x80>
 8001714:	4b9b      	ldr	r3, [pc, #620]	; (8001984 <main+0x2bc>)
 8001716:	f993 3000 	ldrsb.w	r3, [r3]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d014      	beq.n	8001748 <main+0x80>
		  r = rand() % 4;
 800171e:	f003 fc77 	bl	8005010 <rand>
 8001722:	4603      	mov	r3, r0
 8001724:	425a      	negs	r2, r3
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	bf58      	it	pl
 8001730:	4253      	negpl	r3, r2
 8001732:	b25a      	sxtb	r2, r3
 8001734:	4b94      	ldr	r3, [pc, #592]	; (8001988 <main+0x2c0>)
 8001736:	701a      	strb	r2, [r3, #0]
		  tp = 0;
 8001738:	4b94      	ldr	r3, [pc, #592]	; (800198c <main+0x2c4>)
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
		  poz = 1;
 8001740:	4b90      	ldr	r3, [pc, #576]	; (8001984 <main+0x2bc>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
	  if (status == 1 && poz != 1) {
 8001746:	e00c      	b.n	8001762 <main+0x9a>
	  }
	  else if (status == 0 && poz == 1) {
 8001748:	4b8d      	ldr	r3, [pc, #564]	; (8001980 <main+0x2b8>)
 800174a:	f993 3000 	ldrsb.w	r3, [r3]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d107      	bne.n	8001762 <main+0x9a>
 8001752:	4b8c      	ldr	r3, [pc, #560]	; (8001984 <main+0x2bc>)
 8001754:	f993 3000 	ldrsb.w	r3, [r3]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d102      	bne.n	8001762 <main+0x9a>
		  poz = 10;
 800175c:	4b89      	ldr	r3, [pc, #548]	; (8001984 <main+0x2bc>)
 800175e:	220a      	movs	r2, #10
 8001760:	701a      	strb	r2, [r3, #0]
	  }

	  if (r == 0) {
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <main+0x2c0>)
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d14b      	bne.n	8001804 <main+0x13c>
	  	Fv = 0.1 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <main+0x2c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ff01 	bl	8000578 <__aeabi_f2d>
 8001776:	a374      	add	r3, pc, #464	; (adr r3, 8001948 <main+0x280>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff54 	bl	8000628 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b17 	vmov	d7, r2, r3
 8001788:	eeb0 0a47 	vmov.f32	s0, s14
 800178c:	eef0 0a67 	vmov.f32	s1, s15
 8001790:	f004 fd6a 	bl	8006268 <exp>
 8001794:	ec51 0b10 	vmov	r0, r1, d0
 8001798:	a36d      	add	r3, pc, #436	; (adr r3, 8001950 <main+0x288>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff43 	bl	8000628 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	4b78      	ldr	r3, [pc, #480]	; (800198c <main+0x2c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fee2 	bl	8000578 <__aeabi_f2d>
 80017b4:	a368      	add	r3, pc, #416	; (adr r3, 8001958 <main+0x290>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff35 	bl	8000628 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	ec43 2b17 	vmov	d7, r2, r3
 80017c6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ca:	eef0 0a67 	vmov.f32	s1, s15
 80017ce:	f004 fcf3 	bl	80061b8 <sin>
 80017d2:	ec53 2b10 	vmov	r2, r3, d0
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe ff25 	bl	8000628 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	a35e      	add	r3, pc, #376	; (adr r3, 8001960 <main+0x298>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe ff1c 	bl	8000628 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9ee 	bl	8000bd8 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a64      	ldr	r2, [pc, #400]	; (8001990 <main+0x2c8>)
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e117      	b.n	8001a34 <main+0x36c>
	  }
	  else if (r == 1) {
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <main+0x2c0>)
 8001806:	f993 3000 	ldrsb.w	r3, [r3]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d14b      	bne.n	80018a6 <main+0x1de>
	  	Fv = 0.3 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <main+0x2c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe feb0 	bl	8000578 <__aeabi_f2d>
 8001818:	a34b      	add	r3, pc, #300	; (adr r3, 8001948 <main+0x280>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe ff03 	bl	8000628 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ec43 2b17 	vmov	d7, r2, r3
 800182a:	eeb0 0a47 	vmov.f32	s0, s14
 800182e:	eef0 0a67 	vmov.f32	s1, s15
 8001832:	f004 fd19 	bl	8006268 <exp>
 8001836:	ec51 0b10 	vmov	r0, r1, d0
 800183a:	a345      	add	r3, pc, #276	; (adr r3, 8001950 <main+0x288>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fef2 	bl	8000628 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4614      	mov	r4, r2
 800184a:	461d      	mov	r5, r3
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <main+0x2c4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe91 	bl	8000578 <__aeabi_f2d>
 8001856:	a340      	add	r3, pc, #256	; (adr r3, 8001958 <main+0x290>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fee4 	bl	8000628 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b17 	vmov	d7, r2, r3
 8001868:	eeb0 0a47 	vmov.f32	s0, s14
 800186c:	eef0 0a67 	vmov.f32	s1, s15
 8001870:	f004 fca2 	bl	80061b8 <sin>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fed4 	bl	8000628 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	a337      	add	r3, pc, #220	; (adr r3, 8001968 <main+0x2a0>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe fecb 	bl	8000628 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f99d 	bl	8000bd8 <__aeabi_d2f>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <main+0x2c8>)
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e0c6      	b.n	8001a34 <main+0x36c>
	  }
	  else if (r == 2) {
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <main+0x2c0>)
 80018a8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d171      	bne.n	8001994 <main+0x2cc>
	  	Fv = 0.55 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <main+0x2c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe5f 	bl	8000578 <__aeabi_f2d>
 80018ba:	a323      	add	r3, pc, #140	; (adr r3, 8001948 <main+0x280>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe feb2 	bl	8000628 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b17 	vmov	d7, r2, r3
 80018cc:	eeb0 0a47 	vmov.f32	s0, s14
 80018d0:	eef0 0a67 	vmov.f32	s1, s15
 80018d4:	f004 fcc8 	bl	8006268 <exp>
 80018d8:	ec51 0b10 	vmov	r0, r1, d0
 80018dc:	a31c      	add	r3, pc, #112	; (adr r3, 8001950 <main+0x288>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fea1 	bl	8000628 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4614      	mov	r4, r2
 80018ec:	461d      	mov	r5, r3
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <main+0x2c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe40 	bl	8000578 <__aeabi_f2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <main+0x290>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe93 	bl	8000628 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b17 	vmov	d7, r2, r3
 800190a:	eeb0 0a47 	vmov.f32	s0, s14
 800190e:	eef0 0a67 	vmov.f32	s1, s15
 8001912:	f004 fc51 	bl	80061b8 <sin>
 8001916:	ec53 2b10 	vmov	r2, r3, d0
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe fe83 	bl	8000628 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	a311      	add	r3, pc, #68	; (adr r3, 8001970 <main+0x2a8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe7a 	bl	8000628 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f94c 	bl	8000bd8 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <main+0x2c8>)
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e075      	b.n	8001a34 <main+0x36c>
 8001948:	9999999a 	.word	0x9999999a
 800194c:	bfc99999 	.word	0xbfc99999
 8001950:	aa64c2f8 	.word	0xaa64c2f8
 8001954:	3ff05460 	.word	0x3ff05460
 8001958:	8793dd98 	.word	0x8793dd98
 800195c:	3fef5a85 	.word	0x3fef5a85
 8001960:	9999999a 	.word	0x9999999a
 8001964:	3fb99999 	.word	0x3fb99999
 8001968:	33333333 	.word	0x33333333
 800196c:	3fd33333 	.word	0x3fd33333
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fe19999 	.word	0x3fe19999
 8001978:	2000028c 	.word	0x2000028c
 800197c:	40020800 	.word	0x40020800
 8001980:	200001e4 	.word	0x200001e4
 8001984:	200001e5 	.word	0x200001e5
 8001988:	20000004 	.word	0x20000004
 800198c:	200001ec 	.word	0x200001ec
 8001990:	20000208 	.word	0x20000208
	  }
	  else if (r == 3) {
 8001994:	4bde      	ldr	r3, [pc, #888]	; (8001d10 <main+0x648>)
 8001996:	f993 3000 	ldrsb.w	r3, [r3]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d14a      	bne.n	8001a34 <main+0x36c>
	  	Fv = 0.7 * (1.0206 * exp(-0.2 * tp) * sin(0.9798 * tp));
 800199e:	4bdd      	ldr	r3, [pc, #884]	; (8001d14 <main+0x64c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fde8 	bl	8000578 <__aeabi_f2d>
 80019a8:	a3cd      	add	r3, pc, #820	; (adr r3, 8001ce0 <main+0x618>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe3b 	bl	8000628 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ec43 2b17 	vmov	d7, r2, r3
 80019ba:	eeb0 0a47 	vmov.f32	s0, s14
 80019be:	eef0 0a67 	vmov.f32	s1, s15
 80019c2:	f004 fc51 	bl	8006268 <exp>
 80019c6:	ec51 0b10 	vmov	r0, r1, d0
 80019ca:	a3c7      	add	r3, pc, #796	; (adr r3, 8001ce8 <main+0x620>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fe2a 	bl	8000628 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4614      	mov	r4, r2
 80019da:	461d      	mov	r5, r3
 80019dc:	4bcd      	ldr	r3, [pc, #820]	; (8001d14 <main+0x64c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdc9 	bl	8000578 <__aeabi_f2d>
 80019e6:	a3c2      	add	r3, pc, #776	; (adr r3, 8001cf0 <main+0x628>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe1c 	bl	8000628 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	ec43 2b17 	vmov	d7, r2, r3
 80019f8:	eeb0 0a47 	vmov.f32	s0, s14
 80019fc:	eef0 0a67 	vmov.f32	s1, s15
 8001a00:	f004 fbda 	bl	80061b8 <sin>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fe0c 	bl	8000628 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	a3b7      	add	r3, pc, #732	; (adr r3, 8001cf8 <main+0x630>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe03 	bl	8000628 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8d5 	bl	8000bd8 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4ab9      	ldr	r2, [pc, #740]	; (8001d18 <main+0x650>)
 8001a32:	6013      	str	r3, [r2, #0]
	  }

	  f1 = sqrt((4*pow(T2,2) - pow(T1,2))/(4*pow(T2,4)));
 8001a34:	4bb9      	ldr	r3, [pc, #740]	; (8001d1c <main+0x654>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd9d 	bl	8000578 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	ed9f 1baf 	vldr	d1, [pc, #700]	; 8001d00 <main+0x638>
 8001a46:	ec43 2b10 	vmov	d0, r2, r3
 8001a4a:	f004 fc55 	bl	80062f8 <pow>
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4bb2      	ldr	r3, [pc, #712]	; (8001d20 <main+0x658>)
 8001a58:	f7fe fde6 	bl	8000628 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	4baf      	ldr	r3, [pc, #700]	; (8001d24 <main+0x65c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd85 	bl	8000578 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8001d00 <main+0x638>
 8001a76:	ec43 2b10 	vmov	d0, r2, r3
 8001a7a:	f004 fc3d 	bl	80062f8 <pow>
 8001a7e:	ec53 2b10 	vmov	r2, r3, d0
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f7fe fc17 	bl	80002b8 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4614      	mov	r4, r2
 8001a90:	461d      	mov	r5, r3
 8001a92:	4ba2      	ldr	r3, [pc, #648]	; (8001d1c <main+0x654>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd6e 	bl	8000578 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ed9f 1b99 	vldr	d1, [pc, #612]	; 8001d08 <main+0x640>
 8001aa4:	ec43 2b10 	vmov	d0, r2, r3
 8001aa8:	f004 fc26 	bl	80062f8 <pow>
 8001aac:	ec51 0b10 	vmov	r0, r1, d0
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	; (8001d20 <main+0x658>)
 8001ab6:	f7fe fdb7 	bl	8000628 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	f7fe fedb 	bl	800087c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	ec43 2b17 	vmov	d7, r2, r3
 8001ace:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad2:	eef0 0a67 	vmov.f32	s1, s15
 8001ad6:	f004 fc7f 	bl	80063d8 <sqrt>
 8001ada:	ec53 2b10 	vmov	r2, r3, d0
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f879 	bl	8000bd8 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a8f      	ldr	r2, [pc, #572]	; (8001d28 <main+0x660>)
 8001aea:	6013      	str	r3, [r2, #0]
	  f2 = -T1 * k * exp(-T1*t/(2*pow(T2,2)))*sin(t * f1);
 8001aec:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <main+0x65c>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eeb1 7a67 	vneg.f32	s14, s15
 8001af6:	4b8d      	ldr	r3, [pc, #564]	; (8001d2c <main+0x664>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fd34 	bl	8000578 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <main+0x65c>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eeb1 7a67 	vneg.f32	s14, s15
 8001b1e:	4b84      	ldr	r3, [pc, #528]	; (8001d30 <main+0x668>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd24 	bl	8000578 <__aeabi_f2d>
 8001b30:	4680      	mov	r8, r0
 8001b32:	4689      	mov	r9, r1
 8001b34:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <main+0x654>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd1d 	bl	8000578 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8001d00 <main+0x638>
 8001b46:	ec43 2b10 	vmov	d0, r2, r3
 8001b4a:	f004 fbd5 	bl	80062f8 <pow>
 8001b4e:	ec51 0b10 	vmov	r0, r1, d0
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	f7fe fbb1 	bl	80002bc <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4640      	mov	r0, r8
 8001b60:	4649      	mov	r1, r9
 8001b62:	f7fe fe8b 	bl	800087c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ec43 2b17 	vmov	d7, r2, r3
 8001b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b72:	eef0 0a67 	vmov.f32	s1, s15
 8001b76:	f004 fb77 	bl	8006268 <exp>
 8001b7a:	ec53 2b10 	vmov	r2, r3, d0
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fd51 	bl	8000628 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <main+0x668>)
 8001b90:	ed93 7a00 	vldr	s14, [r3]
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <main+0x660>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	ee17 0a90 	vmov	r0, s15
 8001ba2:	f7fe fce9 	bl	8000578 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b10 	vmov	d0, r2, r3
 8001bae:	f004 fb03 	bl	80061b8 <sin>
 8001bb2:	ec53 2b10 	vmov	r2, r3, d0
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fd35 	bl	8000628 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff f807 	bl	8000bd8 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a59      	ldr	r2, [pc, #356]	; (8001d34 <main+0x66c>)
 8001bce:	6013      	str	r3, [r2, #0]
	  f3 = 2 * pow(T2,2) * k * f1;
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <main+0x654>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fccf 	bl	8000578 <__aeabi_f2d>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001d00 <main+0x638>
 8001be2:	ec43 2b10 	vmov	d0, r2, r3
 8001be6:	f004 fb87 	bl	80062f8 <pow>
 8001bea:	ec51 0b10 	vmov	r0, r1, d0
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	f7fe fb63 	bl	80002bc <__adddf3>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <main+0x664>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fca5 	bl	8000554 <__aeabi_i2d>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <main+0x660>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fca8 	bl	8000578 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fcfa 	bl	8000628 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ffcc 	bl	8000bd8 <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <main+0x670>)
 8001c44:	6013      	str	r3, [r2, #0]
	  f4 = - 2 * pow(T2,2) * k * f1 * exp(-T1*t/(2*pow(T2,2))) * cos(t * f1);
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <main+0x654>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc94 	bl	8000578 <__aeabi_f2d>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001d00 <main+0x638>
 8001c58:	ec43 2b10 	vmov	d0, r2, r3
 8001c5c:	f004 fb4c 	bl	80062f8 <pow>
 8001c60:	ec51 0b10 	vmov	r0, r1, d0
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001c6c:	f7fe fcdc 	bl	8000628 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <main+0x664>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc68 	bl	8000554 <__aeabi_i2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe fccc 	bl	8000628 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	461d      	mov	r5, r3
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <main+0x660>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc6b 	bl	8000578 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fcbd 	bl	8000628 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <main+0x65c>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eeb1 7a67 	vneg.f32	s14, s15
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <main+0x668>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	ee17 0a90 	vmov	r0, s15
 8001cce:	f7fe fc53 	bl	8000578 <__aeabi_f2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <main+0x654>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e02f      	b.n	8001d3c <main+0x674>
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	bfc99999 	.word	0xbfc99999
 8001ce8:	aa64c2f8 	.word	0xaa64c2f8
 8001cec:	3ff05460 	.word	0x3ff05460
 8001cf0:	8793dd98 	.word	0x8793dd98
 8001cf4:	3fef5a85 	.word	0x3fef5a85
 8001cf8:	66666666 	.word	0x66666666
 8001cfc:	3fe66666 	.word	0x3fe66666
 8001d00:	00000000 	.word	0x00000000
 8001d04:	40000000 	.word	0x40000000
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40100000 	.word	0x40100000
 8001d10:	20000004 	.word	0x20000004
 8001d14:	200001ec 	.word	0x200001ec
 8001d18:	20000208 	.word	0x20000208
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	40100000 	.word	0x40100000
 8001d24:	2000000c 	.word	0x2000000c
 8001d28:	200001f0 	.word	0x200001f0
 8001d2c:	20000002 	.word	0x20000002
 8001d30:	200001e8 	.word	0x200001e8
 8001d34:	200001f4 	.word	0x200001f4
 8001d38:	200001f8 	.word	0x200001f8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc1b 	bl	8000578 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8001fd0 <main+0x908>
 8001d4a:	ec43 2b10 	vmov	d0, r2, r3
 8001d4e:	f004 fad3 	bl	80062f8 <pow>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	f7fe faaf 	bl	80002bc <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fd89 	bl	800087c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	ec43 2b17 	vmov	d7, r2, r3
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	f004 fa75 	bl	8006268 <exp>
 8001d7e:	ec53 2b10 	vmov	r2, r3, d0
 8001d82:	4640      	mov	r0, r8
 8001d84:	4649      	mov	r1, r9
 8001d86:	f7fe fc4f 	bl	8000628 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	461d      	mov	r5, r3
 8001d92:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <main+0x910>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <main+0x914>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbe7 	bl	8000578 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b10 	vmov	d0, r2, r3
 8001db2:	f004 f965 	bl	8006080 <cos>
 8001db6:	ec53 2b10 	vmov	r2, r3, d0
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe fc33 	bl	8000628 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe ff05 	bl	8000bd8 <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a83      	ldr	r2, [pc, #524]	; (8001fe0 <main+0x918>)
 8001dd2:	6013      	str	r3, [r2, #0]
	  f5 = 2 * pow(T2,2) * f1;
 8001dd4:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <main+0x91c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbcd 	bl	8000578 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001fd0 <main+0x908>
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	f004 fa85 	bl	80062f8 <pow>
 8001dee:	ec51 0b10 	vmov	r0, r1, d0
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	f7fe fa61 	bl	80002bc <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	461d      	mov	r5, r3
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <main+0x914>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbb6 	bl	8000578 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fc08 	bl	8000628 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7fe feda 	bl	8000bd8 <__aeabi_d2f>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a70      	ldr	r2, [pc, #448]	; (8001fe8 <main+0x920>)
 8001e28:	6013      	str	r3, [r2, #0]
	  F = (f2 + f3 + f4) / f5 + Fv;
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <main+0x924>)
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <main+0x928>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e3a:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <main+0x918>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <main+0x920>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4e:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <main+0x92c>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <main+0x930>)
 8001e5a:	edc3 7a00 	vstr	s15, [r3]
	  ppp = round(F * 10);
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <main+0x930>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6c:	ee17 0a90 	vmov	r0, s15
 8001e70:	f7fe fb82 	bl	8000578 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	ec43 2b10 	vmov	d0, r2, r3
 8001e7c:	f004 f954 	bl	8006128 <round>
 8001e80:	ec53 2b10 	vmov	r2, r3, d0
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fea6 	bl	8000bd8 <__aeabi_d2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <main+0x934>)
 8001e90:	6013      	str	r3, [r2, #0]

	  // случай, когда массив не заполнен
	  if (hitbox1[0] == 0) {
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <main+0x938>)
 8001e94:	f993 3000 	ldrsb.w	r3, [r3]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d120      	bne.n	8001ede <main+0x816>
	  	for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e019      	b.n	8001ed6 <main+0x80e>
	  		if (hitbox1[i] == 0) {
 8001ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea6:	4a56      	ldr	r2, [pc, #344]	; (8002000 <main+0x938>)
 8001ea8:	56d3      	ldrsb	r3, [r2, r3]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10d      	bne.n	8001eca <main+0x802>
	  			hitbox1[i] = ppp;
 8001eae:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <main+0x934>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ec0:	793a      	ldrb	r2, [r7, #4]
 8001ec2:	b251      	sxtb	r1, r2
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	; (8002000 <main+0x938>)
 8001ec6:	54d1      	strb	r1, [r2, r3]
	  			break;
 8001ec8:	e009      	b.n	8001ede <main+0x816>
	  	for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dae1      	bge.n	8001ea2 <main+0x7da>
	  		}
	  	}
	  }
	  // случай, когда весь массив заполнен
	  if (hitbox1[0] != 0) {
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <main+0x938>)
 8001ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d023      	beq.n	8001f30 <main+0x868>
	  	hitbox1[31] = 0;
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <main+0x938>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	77da      	strb	r2, [r3, #31]
	  	for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001eee:	231f      	movs	r3, #31
 8001ef0:	73bb      	strb	r3, [r7, #14]
 8001ef2:	e00e      	b.n	8001f12 <main+0x84a>
	  		hitbox1[i] = hitbox1[i-1];
 8001ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001efe:	4940      	ldr	r1, [pc, #256]	; (8002000 <main+0x938>)
 8001f00:	5689      	ldrsb	r1, [r1, r2]
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <main+0x938>)
 8001f04:	54d1      	strb	r1, [r2, r3]
	  	for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	73bb      	strb	r3, [r7, #14]
 8001f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	daec      	bge.n	8001ef4 <main+0x82c>
	  	}
	  	hitbox1[0] = ppp;
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <main+0x934>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f24:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f28:	793b      	ldrb	r3, [r7, #4]
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	4b34      	ldr	r3, [pc, #208]	; (8002000 <main+0x938>)
 8001f2e:	701a      	strb	r2, [r3, #0]
	  }
	  // рисуем на доске
	  for (uint16_t i = 0; i < HEIGHT; i++) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	81bb      	strh	r3, [r7, #12]
 8001f34:	e016      	b.n	8001f64 <main+0x89c>
	  		for (int8_t j = WIDTH-1; j >= 0; j--) {
 8001f36:	231f      	movs	r3, #31
 8001f38:	72fb      	strb	r3, [r7, #11]
 8001f3a:	e00c      	b.n	8001f56 <main+0x88e>
	  			disp1color_DrawPixel(j, i, 0);
 8001f3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f40:	89b9      	ldrh	r1, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff f8c1 	bl	80010cc <disp1color_DrawPixel>
	  		for (int8_t j = WIDTH-1; j >= 0; j--) {
 8001f4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	daee      	bge.n	8001f3c <main+0x874>
	  for (uint16_t i = 0; i < HEIGHT; i++) {
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	81bb      	strh	r3, [r7, #12]
 8001f64:	89bb      	ldrh	r3, [r7, #12]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	d9e5      	bls.n	8001f36 <main+0x86e>
	  		}
	  }

	  for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	72bb      	strb	r3, [r7, #10]
 8001f6e:	e00f      	b.n	8001f90 <main+0x8c8>
	  	  disp1color_DrawPixel(i, hitbox1[i], 1);
 8001f70:	f997 000a 	ldrsb.w	r0, [r7, #10]
 8001f74:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <main+0x938>)
 8001f7a:	56d3      	ldrsb	r3, [r2, r3]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff f8a4 	bl	80010cc <disp1color_DrawPixel>
	  for (int8_t i = WIDTH-1; i >= 0; i--) {
 8001f84:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	72bb      	strb	r3, [r7, #10]
 8001f90:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	daeb      	bge.n	8001f70 <main+0x8a8>
	  }

	  disp1color_UpdateFromBuff();
 8001f98:	f7ff f88e 	bl	80010b8 <disp1color_UpdateFromBuff>
	  prepare_data();
 8001f9c:	f7ff fa00 	bl	80013a0 <prepare_data>
	  for (uint8_t i = 0; i < 20; i++) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	727b      	strb	r3, [r7, #9]
 8001fa4:	e00e      	b.n	8001fc4 <main+0x8fc>
		  disp_row(0);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff faca 	bl	8001540 <disp_row>
		  disp_row(1);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff fac7 	bl	8001540 <disp_row>
		  disp_row(2);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff fac4 	bl	8001540 <disp_row>
		  disp_row(3);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f7ff fac1 	bl	8001540 <disp_row>
	  for (uint8_t i = 0; i < 20; i++) {
 8001fbe:	7a7b      	ldrb	r3, [r7, #9]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	727b      	strb	r3, [r7, #9]
 8001fc4:	7a7b      	ldrb	r3, [r7, #9]
 8001fc6:	2b13      	cmp	r3, #19
 8001fc8:	d9ed      	bls.n	8001fa6 <main+0x8de>
	  status = !HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8001fca:	f7ff bb90 	b.w	80016ee <main+0x26>
 8001fce:	bf00      	nop
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40000000 	.word	0x40000000
 8001fd8:	200001e8 	.word	0x200001e8
 8001fdc:	200001f0 	.word	0x200001f0
 8001fe0:	200001fc 	.word	0x200001fc
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000200 	.word	0x20000200
 8001fec:	200001f4 	.word	0x200001f4
 8001ff0:	200001f8 	.word	0x200001f8
 8001ff4:	20000208 	.word	0x20000208
 8001ff8:	20000204 	.word	0x20000204
 8001ffc:	2000020c 	.word	0x2000020c
 8002000:	20000210 	.word	0x20000210

08002004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	; 0x50
 8002008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2234      	movs	r2, #52	; 0x34
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fff4 	bl	8005000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <SystemClock_Config+0xb8>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <SystemClock_Config+0xb8>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <SystemClock_Config+0xb8>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <SystemClock_Config+0xbc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <SystemClock_Config+0xbc>)
 8002052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <SystemClock_Config+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002064:	2302      	movs	r3, #2
 8002066:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002068:	2301      	movs	r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800206c:	2310      	movs	r3, #16
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fc6d 	bl	8003958 <HAL_RCC_OscConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002084:	f000 f81e 	bl	80020c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002088:	230f      	movs	r3, #15
 800208a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 f9c8 	bl	8003438 <HAL_RCC_ClockConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80020ae:	f000 f809 	bl	80020c4 <Error_Handler>
  }
}
 80020b2:	bf00      	nop
 80020b4:	3750      	adds	r7, #80	; 0x50
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>
	...

080020d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI1_Init+0x64>)
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <MX_SPI1_Init+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI1_Init+0x64>)
 80020dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI1_Init+0x64>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI1_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_SPI1_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI1_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI1_Init+0x64>)
 80020fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002100:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI1_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI1_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI1_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI1_Init+0x64>)
 800211c:	220a      	movs	r2, #10
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI1_Init+0x64>)
 8002122:	f001 feb7 	bl	8003e94 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800212c:	f7ff ffca 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000230 	.word	0x20000230
 8002138:	40013000 	.word	0x40013000

0800213c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_SPI_MspInit+0x84>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12b      	bne.n	80021b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 8002168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_SPI_MspInit+0x88>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002196:	23a0      	movs	r3, #160	; 0xa0
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021a6:	2305      	movs	r3, #5
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <HAL_SPI_MspInit+0x8c>)
 80021b2:	f000 ff7b 	bl	80030ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40013000 	.word	0x40013000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <HAL_MspInit+0x4c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_MspInit+0x4c>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002268:	f000 fa44 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <ADC_IRQHandler+0x10>)
 8002276:	f000 faa0 	bl	80027ba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000009c 	.word	0x2000009c
 8002284:	00000000 	.word	0x00000000

08002288 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	t = t + 0.01;
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <TIM1_UP_TIM10_IRQHandler+0x68>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f971 	bl	8000578 <__aeabi_f2d>
 8002296:	a314      	add	r3, pc, #80	; (adr r3, 80022e8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f80e 	bl	80002bc <__adddf3>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fc96 	bl	8000bd8 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4a10      	ldr	r2, [pc, #64]	; (80022f0 <TIM1_UP_TIM10_IRQHandler+0x68>)
 80022b0:	6013      	str	r3, [r2, #0]
	tp = tp + 0.01;
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f95e 	bl	8000578 <__aeabi_f2d>
 80022bc:	a30a      	add	r3, pc, #40	; (adr r3, 80022e8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fd fffb 	bl	80002bc <__adddf3>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f7fe fc83 	bl	8000bd8 <__aeabi_d2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <TIM1_UP_TIM10_IRQHandler+0x6c>)
 80022d6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d8:	4807      	ldr	r0, [pc, #28]	; (80022f8 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80022da:	f002 f92a 	bl	8004532 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	47ae147b 	.word	0x47ae147b
 80022ec:	3f847ae1 	.word	0x3f847ae1
 80022f0:	200001e8 	.word	0x200001e8
 80022f4:	200001ec 	.word	0x200001ec
 80022f8:	2000028c 	.word	0x2000028c

080022fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return 1;
 8002300:	2301      	movs	r3, #1
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_kill>:

int _kill(int pid, int sig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002316:	f002 fe3b 	bl	8004f90 <__errno>
 800231a:	4603      	mov	r3, r0
 800231c:	2216      	movs	r2, #22
 800231e:	601a      	str	r2, [r3, #0]
  return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_exit>:

void _exit (int status)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ffe7 	bl	800230c <_kill>
  while (1) {}    /* Make sure we hang here */
 800233e:	e7fe      	b.n	800233e <_exit+0x12>

08002340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00a      	b.n	8002368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002352:	f3af 8000 	nop.w
 8002356:	4601      	mov	r1, r0
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	b2ca      	uxtb	r2, r1
 8002360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	dbf0      	blt.n	8002352 <_read+0x12>
  }

  return len;
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e009      	b.n	80023a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf1      	blt.n	800238c <_write+0x12>
  }
  return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_close>:

int _close(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023da:	605a      	str	r2, [r3, #4]
  return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_isatty>:

int _isatty(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f002 fda0 	bl	8004f90 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20020000 	.word	0x20020000
 800247c:	00000400 	.word	0x00000400
 8002480:	20000288 	.word	0x20000288
 8002484:	200002e8 	.word	0x200002e8

08002488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b092      	sub	sp, #72	; 0x48
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
 80024cc:	615a      	str	r2, [r3, #20]
 80024ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2220      	movs	r2, #32
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fd92 	bl	8005000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <MX_TIM1_Init+0xfc>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024e4:	2220      	movs	r2, #32
 80024e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <MX_TIM1_Init+0xf8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <MX_TIM1_Init+0xf8>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002508:	4826      	ldr	r0, [pc, #152]	; (80025a4 <MX_TIM1_Init+0xf8>)
 800250a:	f001 ffc3 	bl	8004494 <HAL_TIM_PWM_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002514:	f7ff fdd6 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002520:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002524:	4619      	mov	r1, r3
 8002526:	481f      	ldr	r0, [pc, #124]	; (80025a4 <MX_TIM1_Init+0xf8>)
 8002528:	f002 fc50 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002532:	f7ff fdc7 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002536:	2360      	movs	r3, #96	; 0x60
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	2200      	movs	r2, #0
 8002558:	4619      	mov	r1, r3
 800255a:	4812      	ldr	r0, [pc, #72]	; (80025a4 <MX_TIM1_Init+0xf8>)
 800255c:	f002 f8f2 	bl	8004744 <HAL_TIM_PWM_ConfigChannel>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002566:	f7ff fdad 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800257e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002582:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM1_Init+0xf8>)
 800258e:	f002 fc99 	bl	8004ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002598:	f7ff fd94 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3748      	adds	r7, #72	; 0x48
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000028c 	.word	0x2000028c
 80025a8:	40010000 	.word	0x40010000

080025ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_TIM_PWM_MspInit+0x48>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d115      	bne.n	80025ea <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_TIM_PWM_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2019      	movs	r0, #25
 80025e0:	f000 fd2d 	bl	800303e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025e4:	2019      	movs	r0, #25
 80025e6:	f000 fd46 	bl	8003076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40023800 	.word	0x40023800

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7ff ff2f 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f002 fcb7 	bl	8004f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f84b 	bl	80016c8 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002640:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 8002644:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002648:	200002e8 	.word	0x200002e8

0800264c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <CAN1_RX0_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 fcd5 	bl	8003028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	200f      	movs	r0, #15
 8002680:	f000 f808 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7ff fda2 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_InitTick+0x54>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fced 	bl	8003092 <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f000 fcb5 	bl	800303e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <HAL_InitTick+0x5c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000010 	.word	0x20000010
 80026ec:	20000018 	.word	0x20000018
 80026f0:	20000014 	.word	0x20000014

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000018 	.word	0x20000018
 8002718:	200002d4 	.word	0x200002d4

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	200002d4 	.word	0x200002d4

08002734 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e033      	b.n	80027b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe fc64 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800277a:	f023 0302 	bic.w	r3, r3, #2
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 fa78 	bl	8002c7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
 80027a2:	e001      	b.n	80027a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d049      	beq.n	8002884 <HAL_ADC_IRQHandler+0xca>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d046      	beq.n	8002884 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12b      	bne.n	8002874 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002820:	2b00      	cmp	r3, #0
 8002822:	d127      	bne.n	8002874 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800283c:	2b00      	cmp	r3, #0
 800283e:	d119      	bne.n	8002874 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0220 	bic.w	r2, r2, #32
 800284e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8b0 	bl	80029da <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0212 	mvn.w	r2, #18
 8002882:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d057      	beq.n	800294a <HAL_ADC_IRQHandler+0x190>
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d054      	beq.n	800294a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d139      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d12b      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d124      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11d      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d119      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002914:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa9a 	bl	8002e74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 020c 	mvn.w	r2, #12
 8002948:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_ADC_IRQHandler+0x1d6>
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d014      	beq.n	8002990 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10d      	bne.n	8002990 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f834 	bl	80029ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0201 	mvn.w	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800299e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d015      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x218>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0220 	mvn.w	r2, #32
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f81d 	bl	8002a02 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0220 	mvn.w	r2, #32
 80029d0:	601a      	str	r2, [r3, #0]
  }
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1c>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e113      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x244>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d925      	bls.n	8002a90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	3b1e      	subs	r3, #30
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4403      	add	r3, r0
 8002a82:	3b1e      	subs	r3, #30
 8002a84:	409a      	lsls	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e022      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6919      	ldr	r1, [r3, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4403      	add	r3, r0
 8002acc:	409a      	lsls	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d824      	bhi.n	8002b28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b05      	subs	r3, #5
 8002af0:	221f      	movs	r2, #31
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	400a      	ands	r2, r1
 8002afe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b05      	subs	r3, #5
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
 8002b26:	e04c      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d824      	bhi.n	8002b7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b23      	subs	r3, #35	; 0x23
 8002b42:	221f      	movs	r2, #31
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b23      	subs	r3, #35	; 0x23
 8002b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
 8002b78:	e023      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b41      	subs	r3, #65	; 0x41
 8002b8c:	221f      	movs	r2, #31
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	400a      	ands	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b41      	subs	r3, #65	; 0x41
 8002bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc2:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_ADC_ConfigChannel+0x250>)
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <HAL_ADC_ConfigChannel+0x254>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10f      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d8>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_ADC_ConfigChannel+0x254>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d12b      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x23a>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <HAL_ADC_ConfigChannel+0x258>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x1f4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b11      	cmp	r3, #17
 8002c0a:	d122      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_ADC_ConfigChannel+0x258>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d111      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_ADC_ConfigChannel+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_ADC_ConfigChannel+0x260>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	0c9a      	lsrs	r2, r3, #18
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f9      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40012300 	.word	0x40012300
 8002c6c:	40012000 	.word	0x40012000
 8002c70:	10000012 	.word	0x10000012
 8002c74:	20000010 	.word	0x20000010
 8002c78:	431bde83 	.word	0x431bde83

08002c7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c84:	4b79      	ldr	r3, [pc, #484]	; (8002e6c <ADC_Init+0x1f0>)
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	021a      	lsls	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6899      	ldr	r1, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <ADC_Init+0x1f4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	e00f      	b.n	8002d7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0202 	bic.w	r2, r2, #2
 8002d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6899      	ldr	r1, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7e1b      	ldrb	r3, [r3, #24]
 8002d94:	005a      	lsls	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	035a      	lsls	r2, r3, #13
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e007      	b.n	8002df0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	051a      	lsls	r2, r3, #20
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e32:	025a      	lsls	r2, r3, #9
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	029a      	lsls	r2, r3, #10
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	0f000001 	.word	0x0f000001

08002e74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff4:	d301      	bcc.n	8002ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00f      	b.n	800301a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <SysTick_Config+0x40>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003002:	210f      	movs	r1, #15
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f7ff ff8e 	bl	8002f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <SysTick_Config+0x40>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003012:	4b04      	ldr	r3, [pc, #16]	; (8003024 <SysTick_Config+0x40>)
 8003014:	2207      	movs	r2, #7
 8003016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000e010 	.word	0xe000e010

08003028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff29 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003050:	f7ff ff3e 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff ff8e 	bl	8002f7c <NVIC_EncodePriority>
 8003060:	4602      	mov	r2, r0
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff5d 	bl	8002f28 <__NVIC_SetPriority>
}
 800306e:	bf00      	nop
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff31 	bl	8002eec <__NVIC_EnableIRQ>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ffa2 	bl	8002fe4 <SysTick_Config>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e165      	b.n	8003394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c8:	2201      	movs	r2, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	f040 8154 	bne.w	800338e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d005      	beq.n	80030fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d130      	bne.n	8003160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 0201 	and.w	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b03      	cmp	r3, #3
 800316a:	d017      	beq.n	800319c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d123      	bne.n	80031f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	220f      	movs	r2, #15
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	08da      	lsrs	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3208      	adds	r2, #8
 80031ea:	69b9      	ldr	r1, [r7, #24]
 80031ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0203 	and.w	r2, r3, #3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80ae 	beq.w	800338e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_GPIO_Init+0x300>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	4a5c      	ldr	r2, [pc, #368]	; (80033ac <HAL_GPIO_Init+0x300>)
 800323c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003240:	6453      	str	r3, [r2, #68]	; 0x44
 8003242:	4b5a      	ldr	r3, [pc, #360]	; (80033ac <HAL_GPIO_Init+0x300>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800324e:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_GPIO_Init+0x304>)
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3302      	adds	r3, #2
 8003256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4f      	ldr	r2, [pc, #316]	; (80033b4 <HAL_GPIO_Init+0x308>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d025      	beq.n	80032c6 <HAL_GPIO_Init+0x21a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_GPIO_Init+0x30c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <HAL_GPIO_Init+0x216>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4d      	ldr	r2, [pc, #308]	; (80033bc <HAL_GPIO_Init+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d019      	beq.n	80032be <HAL_GPIO_Init+0x212>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_GPIO_Init+0x314>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_GPIO_Init+0x318>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x20a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_GPIO_Init+0x31c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x206>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_GPIO_Init+0x320>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x202>
 80032aa:	2306      	movs	r3, #6
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032ae:	2307      	movs	r3, #7
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x21c>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	; (80033b0 <HAL_GPIO_Init+0x304>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <HAL_GPIO_Init+0x324>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_GPIO_Init+0x324>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_GPIO_Init+0x324>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f ae96 	bls.w	80030c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021400 	.word	0x40021400
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e001      	b.n	80033f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0cc      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d90c      	bls.n	8003474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0b8      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a4:	4b53      	ldr	r3, [pc, #332]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d044      	beq.n	8003558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d119      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e07f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e067      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4934      	ldr	r1, [pc, #208]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003528:	f7ff f8f8 	bl	800271c <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7ff f8f4 	bl	800271c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04f      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d20c      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e032      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4916      	ldr	r1, [pc, #88]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035be:	f000 f821 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	5ccb      	ldrb	r3, [r1, r3]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f858 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	08008378 	.word	0x08008378
 80035fc:	20000010 	.word	0x20000010
 8003600:	20000014 	.word	0x20000014

08003604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0a6      	sub	sp, #152	; 0x98
 800360a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362a:	4bc8      	ldr	r3, [pc, #800]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b0c      	cmp	r3, #12
 8003634:	f200 817e 	bhi.w	8003934 <HAL_RCC_GetSysClockFreq+0x330>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <HAL_RCC_GetSysClockFreq+0x3c>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003675 	.word	0x08003675
 8003644:	08003935 	.word	0x08003935
 8003648:	08003935 	.word	0x08003935
 800364c:	08003935 	.word	0x08003935
 8003650:	0800367d 	.word	0x0800367d
 8003654:	08003935 	.word	0x08003935
 8003658:	08003935 	.word	0x08003935
 800365c:	08003935 	.word	0x08003935
 8003660:	08003685 	.word	0x08003685
 8003664:	08003935 	.word	0x08003935
 8003668:	08003935 	.word	0x08003935
 800366c:	08003935 	.word	0x08003935
 8003670:	080037ef 	.word	0x080037ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4bb6      	ldr	r3, [pc, #728]	; (8003950 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800367a:	e15f      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367c:	4bb5      	ldr	r3, [pc, #724]	; (8003954 <HAL_RCC_GetSysClockFreq+0x350>)
 800367e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003682:	e15b      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003684:	4bb1      	ldr	r3, [pc, #708]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003690:	4bae      	ldr	r3, [pc, #696]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d031      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369c:	4bab      	ldr	r3, [pc, #684]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	2200      	movs	r2, #0
 80036a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ae:	663b      	str	r3, [r7, #96]	; 0x60
 80036b0:	2300      	movs	r3, #0
 80036b2:	667b      	str	r3, [r7, #100]	; 0x64
 80036b4:	4ba7      	ldr	r3, [pc, #668]	; (8003954 <HAL_RCC_GetSysClockFreq+0x350>)
 80036b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036ba:	462a      	mov	r2, r5
 80036bc:	fb03 f202 	mul.w	r2, r3, r2
 80036c0:	2300      	movs	r3, #0
 80036c2:	4621      	mov	r1, r4
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	4aa2      	ldr	r2, [pc, #648]	; (8003954 <HAL_RCC_GetSysClockFreq+0x350>)
 80036cc:	4621      	mov	r1, r4
 80036ce:	fba1 1202 	umull	r1, r2, r1, r2
 80036d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036d4:	460a      	mov	r2, r1
 80036d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80036d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036da:	4413      	add	r3, r2
 80036dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036e2:	2200      	movs	r2, #0
 80036e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036f0:	f7fd fac2 	bl	8000c78 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036fe:	e064      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003700:	4b92      	ldr	r3, [pc, #584]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	2200      	movs	r2, #0
 8003708:	653b      	str	r3, [r7, #80]	; 0x50
 800370a:	657a      	str	r2, [r7, #84]	; 0x54
 800370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	64bb      	str	r3, [r7, #72]	; 0x48
 8003714:	2300      	movs	r3, #0
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003718:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800371c:	4622      	mov	r2, r4
 800371e:	462b      	mov	r3, r5
 8003720:	f04f 0000 	mov.w	r0, #0
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	0159      	lsls	r1, r3, #5
 800372a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372e:	0150      	lsls	r0, r2, #5
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4621      	mov	r1, r4
 8003736:	1a51      	subs	r1, r2, r1
 8003738:	6139      	str	r1, [r7, #16]
 800373a:	4629      	mov	r1, r5
 800373c:	eb63 0301 	sbc.w	r3, r3, r1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800374e:	4659      	mov	r1, fp
 8003750:	018b      	lsls	r3, r1, #6
 8003752:	4651      	mov	r1, sl
 8003754:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003758:	4651      	mov	r1, sl
 800375a:	018a      	lsls	r2, r1, #6
 800375c:	4651      	mov	r1, sl
 800375e:	ebb2 0801 	subs.w	r8, r2, r1
 8003762:	4659      	mov	r1, fp
 8003764:	eb63 0901 	sbc.w	r9, r3, r1
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003774:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003778:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377c:	4690      	mov	r8, r2
 800377e:	4699      	mov	r9, r3
 8003780:	4623      	mov	r3, r4
 8003782:	eb18 0303 	adds.w	r3, r8, r3
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	462b      	mov	r3, r5
 800378a:	eb49 0303 	adc.w	r3, r9, r3
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800379c:	4629      	mov	r1, r5
 800379e:	028b      	lsls	r3, r1, #10
 80037a0:	4621      	mov	r1, r4
 80037a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a6:	4621      	mov	r1, r4
 80037a8:	028a      	lsls	r2, r1, #10
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b2:	2200      	movs	r2, #0
 80037b4:	643b      	str	r3, [r7, #64]	; 0x40
 80037b6:	647a      	str	r2, [r7, #68]	; 0x44
 80037b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037bc:	f7fd fa5c 	bl	8000c78 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ca:	4b60      	ldr	r3, [pc, #384]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	3301      	adds	r3, #1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80037dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80037ec:	e0a6      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fa:	4b54      	ldr	r3, [pc, #336]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	2200      	movs	r2, #0
 800380e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003810:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003818:	2100      	movs	r1, #0
 800381a:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <HAL_RCC_GetSysClockFreq+0x350>)
 800381c:	fb03 f201 	mul.w	r2, r3, r1
 8003820:	2300      	movs	r3, #0
 8003822:	fb00 f303 	mul.w	r3, r0, r3
 8003826:	4413      	add	r3, r2
 8003828:	4a4a      	ldr	r2, [pc, #296]	; (8003954 <HAL_RCC_GetSysClockFreq+0x350>)
 800382a:	fba0 1202 	umull	r1, r2, r0, r2
 800382e:	677a      	str	r2, [r7, #116]	; 0x74
 8003830:	460a      	mov	r2, r1
 8003832:	673a      	str	r2, [r7, #112]	; 0x70
 8003834:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003836:	4413      	add	r3, r2
 8003838:	677b      	str	r3, [r7, #116]	; 0x74
 800383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383e:	2200      	movs	r2, #0
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
 8003842:	637a      	str	r2, [r7, #52]	; 0x34
 8003844:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003848:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800384c:	f7fd fa14 	bl	8000c78 <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800385a:	e05b      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	2200      	movs	r2, #0
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
 8003866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	f04f 0000 	mov.w	r0, #0
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	0159      	lsls	r1, r3, #5
 8003886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388a:	0150      	lsls	r0, r2, #5
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4641      	mov	r1, r8
 8003892:	ebb2 0a01 	subs.w	sl, r2, r1
 8003896:	4649      	mov	r1, r9
 8003898:	eb63 0b01 	sbc.w	fp, r3, r1
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038b0:	ebb2 040a 	subs.w	r4, r2, sl
 80038b4:	eb63 050b 	sbc.w	r5, r3, fp
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	00eb      	lsls	r3, r5, #3
 80038c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c6:	00e2      	lsls	r2, r4, #3
 80038c8:	4614      	mov	r4, r2
 80038ca:	461d      	mov	r5, r3
 80038cc:	4643      	mov	r3, r8
 80038ce:	18e3      	adds	r3, r4, r3
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	464b      	mov	r3, r9
 80038d4:	eb45 0303 	adc.w	r3, r5, r3
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e6:	4629      	mov	r1, r5
 80038e8:	028b      	lsls	r3, r1, #10
 80038ea:	4621      	mov	r1, r4
 80038ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f0:	4621      	mov	r1, r4
 80038f2:	028a      	lsls	r2, r1, #10
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038fc:	2200      	movs	r2, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003906:	f7fd f9b7 	bl	8000c78 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4613      	mov	r3, r2
 8003910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <HAL_RCC_GetSysClockFreq+0x348>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0f1b      	lsrs	r3, r3, #28
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003932:	e003      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800393a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003940:	4618      	mov	r0, r3
 8003942:	3798      	adds	r7, #152	; 0x98
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	017d7840 	.word	0x017d7840

08003958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e28d      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8083 	beq.w	8003a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003978:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	d019      	beq.n	80039b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003984:	4b91      	ldr	r3, [pc, #580]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800398c:	2b08      	cmp	r3, #8
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003990:	4b8e      	ldr	r3, [pc, #568]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b84      	ldr	r3, [pc, #528]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x124>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e25a      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x90>
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7b      	ldr	r2, [pc, #492]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xcc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0xb4>
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b73      	ldr	r3, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xcc>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6b      	ldr	r2, [pc, #428]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fe76 	bl	800271c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fe72 	bl	800271c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e21f      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xdc>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fe62 	bl	800271c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fe5e 	bl	800271c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20b      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x104>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06f      	beq.n	8003b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a8a:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d017      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a96:	4b4d      	ldr	r3, [pc, #308]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d105      	bne.n	8003aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d11c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aba:	4b44      	ldr	r3, [pc, #272]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_RCC_OscConfig+0x186>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e1d3      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4937      	ldr	r1, [pc, #220]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af2:	e03a      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_RCC_OscConfig+0x278>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe fe0b 	bl	800271c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fe07 	bl	800271c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1b4      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4925      	ldr	r1, [pc, #148]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCC_OscConfig+0x278>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fe fdea 	bl	800271c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4c:	f7fe fde6 	bl	800271c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e193      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d036      	beq.n	8003be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fe fdca 	bl	800271c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fe fdc6 	bl	800271c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e173      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x234>
 8003baa:	e01b      	b.n	8003be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fdb3 	bl	800271c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	e00e      	b.n	8003bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bba:	f7fe fdaf 	bl	800271c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d907      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e15c      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	42470000 	.word	0x42470000
 8003bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd8:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ea      	bne.n	8003bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8097 	beq.w	8003d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf6:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	4b7f      	ldr	r3, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6413      	str	r3, [r2, #64]	; 0x40
 8003c12:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b79      	ldr	r3, [pc, #484]	; (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fd6f 	bl	800271c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fd6b 	bl	800271c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e118      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b6c      	ldr	r3, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x4b0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x31e>
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x358>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x340>
 8003c7e:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a60      	ldr	r2, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	4b5e      	ldr	r3, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x358>
 8003c98:	4b5a      	ldr	r3, [pc, #360]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a59      	ldr	r2, [pc, #356]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca8:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	f023 0304 	bic.w	r3, r3, #4
 8003cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe fd30 	bl	800271c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fd2c 	bl	800271c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0d7      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0ee      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x368>
 8003ce2:	e014      	b.n	8003d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fd1a 	bl	800271c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe fd16 	bl	800271c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e0c1      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ee      	bne.n	8003cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d14:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	4a3a      	ldr	r2, [pc, #232]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80ad 	beq.w	8003e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d060      	beq.n	8003df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d145      	bne.n	8003dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe fcea 	bl	800271c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fe fce6 	bl	800271c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e093      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe fcbb 	bl	800271c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe fcb7 	bl	800271c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e064      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x452>
 8003dc8:	e05c      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x4b4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fca4 	bl	800271c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe fca0 	bl	800271c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04d      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x480>
 8003df6:	e045      	b.n	8003e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e040      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <HAL_RCC_OscConfig+0x538>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d030      	beq.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d129      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d122      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d119      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d10f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07b      	b.n	8003f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb6:	d009      	beq.n	8003ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61da      	str	r2, [r3, #28]
 8003ebe:	e005      	b.n	8003ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fe f928 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	ea42 0103 	orr.w	r1, r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0104 	and.w	r1, r3, #4
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0210 	and.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b088      	sub	sp, #32
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_SPI_Transmit+0x22>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e126      	b.n	8004216 <HAL_SPI_Transmit+0x270>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd0:	f7fe fba4 	bl	800271c <HAL_GetTick>
 8003fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fea:	e10b      	b.n	8004204 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Transmit+0x52>
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ffc:	e102      	b.n	8004204 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2203      	movs	r2, #3
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004044:	d10f      	bne.n	8004066 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d007      	beq.n	8004084 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	d14b      	bne.n	8004126 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_Transmit+0xf6>
 8004096:	8afb      	ldrh	r3, [r7, #22]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d13e      	bne.n	800411a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040c0:	e02b      	b.n	800411a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d112      	bne.n	80040f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80040f4:	e011      	b.n	800411a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f6:	f7fe fb11 	bl	800271c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d803      	bhi.n	800410e <HAL_SPI_Transmit+0x168>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d102      	bne.n	8004114 <HAL_SPI_Transmit+0x16e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004118:	e074      	b.n	8004204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ce      	bne.n	80040c2 <HAL_SPI_Transmit+0x11c>
 8004124:	e04c      	b.n	80041c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_Transmit+0x18e>
 800412e:	8afb      	ldrh	r3, [r7, #22]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d140      	bne.n	80041b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800415a:	e02c      	b.n	80041b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d113      	bne.n	8004192 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004190:	e011      	b.n	80041b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004192:	f7fe fac3 	bl	800271c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d803      	bhi.n	80041aa <HAL_SPI_Transmit+0x204>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d102      	bne.n	80041b0 <HAL_SPI_Transmit+0x20a>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041b4:	e026      	b.n	8004204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1cd      	bne.n	800415c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f8b3 	bl	8004330 <SPI_EndRxTxTransaction>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e000      	b.n	8004204 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004214:	7ffb      	ldrb	r3, [r7, #31]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004230:	f7fe fa74 	bl	800271c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004240:	f7fe fa6c 	bl	800271c <HAL_GetTick>
 8004244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	015b      	lsls	r3, r3, #5
 800424c:	0d1b      	lsrs	r3, r3, #20
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004256:	e054      	b.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d050      	beq.n	8004302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004260:	f7fe fa5c 	bl	800271c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	d902      	bls.n	8004276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d13d      	bne.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428e:	d111      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d004      	beq.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a2:	d107      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d10f      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e017      	b.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	429a      	cmp	r2, r3
 800431e:	d19b      	bne.n	8004258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000010 	.word	0x20000010

08004330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800433c:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <SPI_EndRxTxTransaction+0x7c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <SPI_EndRxTxTransaction+0x80>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0d5b      	lsrs	r3, r3, #21
 8004348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d112      	bne.n	8004382 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff ff5a 	bl	8004220 <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d016      	beq.n	80043a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d0f2      	beq.n	8004382 <SPI_EndRxTxTransaction+0x52>
 800439c:	e000      	b.n	80043a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800439e:	bf00      	nop
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000010 	.word	0x20000010
 80043b0:	165e9f81 	.word	0x165e9f81

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04e      	b.n	800446a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <HAL_TIM_Base_Start_IT+0xc4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d01d      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <HAL_TIM_Base_Start_IT+0xc8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_TIM_Base_Start_IT+0xcc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_TIM_Base_Start_IT+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_TIM_Base_Start_IT+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_TIM_Base_Start_IT+0xd8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_TIM_Base_Start_IT+0xdc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d111      	bne.n	8004458 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d010      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e007      	b.n	8004468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800

08004494 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e041      	b.n	800452a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe f876 	bl	80025ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 fa2a 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d122      	bne.n	800458e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d11b      	bne.n	800458e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f06f 0202 	mvn.w	r2, #2
 800455e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9bb 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 800457a:	e005      	b.n	8004588 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f9ad 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9be 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d122      	bne.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d11b      	bne.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0204 	mvn.w	r2, #4
 80045b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f991 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 80045ce:	e005      	b.n	80045dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f983 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f994 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d122      	bne.n	8004636 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d11b      	bne.n	8004636 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f06f 0208 	mvn.w	r2, #8
 8004606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2204      	movs	r2, #4
 800460c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 0303 	and.w	r3, r3, #3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f967 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004622:	e005      	b.n	8004630 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f959 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f96a 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d122      	bne.n	800468a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b10      	cmp	r3, #16
 8004650:	d11b      	bne.n	800468a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0210 	mvn.w	r2, #16
 800465a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2208      	movs	r2, #8
 8004660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f93d 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004676:	e005      	b.n	8004684 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f92f 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f940 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f06f 0201 	mvn.w	r2, #1
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f909 	bl	80048c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fc4d 	bl	8004f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f905 	bl	8004918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b20      	cmp	r3, #32
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0220 	mvn.w	r2, #32
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fc17 	bl	8004f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800475e:	2302      	movs	r3, #2
 8004760:	e0ae      	b.n	80048c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b0c      	cmp	r3, #12
 800476e:	f200 809f 	bhi.w	80048b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080048b1 	.word	0x080048b1
 8004780:	080048b1 	.word	0x080048b1
 8004784:	080048b1 	.word	0x080048b1
 8004788:	080047ed 	.word	0x080047ed
 800478c:	080048b1 	.word	0x080048b1
 8004790:	080048b1 	.word	0x080048b1
 8004794:	080048b1 	.word	0x080048b1
 8004798:	0800482f 	.word	0x0800482f
 800479c:	080048b1 	.word	0x080048b1
 80047a0:	080048b1 	.word	0x080048b1
 80047a4:	080048b1 	.word	0x080048b1
 80047a8:	0800486f 	.word	0x0800486f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f95a 	bl	8004a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0204 	bic.w	r2, r2, #4
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	619a      	str	r2, [r3, #24]
      break;
 80047ea:	e064      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9aa 	bl	8004b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	021a      	lsls	r2, r3, #8
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	619a      	str	r2, [r3, #24]
      break;
 800482c:	e043      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f9ff 	bl	8004c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0208 	orr.w	r2, r2, #8
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0204 	bic.w	r2, r2, #4
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      break;
 800486c:	e023      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fa53 	bl	8004d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69d9      	ldr	r1, [r3, #28]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	61da      	str	r2, [r3, #28]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00f      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3d      	ldr	r2, [pc, #244]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3a      	ldr	r2, [pc, #232]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2f      	ldr	r2, [pc, #188]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d027      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <TIM_Base_SetConfig+0x118>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d023      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d017      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a26      	ldr	r2, [pc, #152]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <TIM_Base_SetConfig+0x134>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <TIM_Base_SetConfig+0x138>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <TIM_Base_SetConfig+0x13c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <TIM_Base_SetConfig+0x114>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0xf8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d103      	bne.n	8004a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	615a      	str	r2, [r3, #20]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40001800 	.word	0x40001800
 8004a64:	40001c00 	.word	0x40001c00
 8004a68:	40002000 	.word	0x40002000

08004a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 0302 	bic.w	r3, r3, #2
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_OC1_SetConfig+0xd8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC1_SetConfig+0x64>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <TIM_OC1_SetConfig+0xdc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10c      	bne.n	8004aea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0308 	bic.w	r3, r3, #8
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <TIM_OC1_SetConfig+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_OC1_SetConfig+0x8e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC1_SetConfig+0xdc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400

08004b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0210 	bic.w	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0320 	bic.w	r3, r3, #32
 8004b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a22      	ldr	r2, [pc, #136]	; (8004c30 <TIM_OC2_SetConfig+0xe4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC2_SetConfig+0x68>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <TIM_OC2_SetConfig+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10d      	bne.n	8004bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <TIM_OC2_SetConfig+0xe4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC2_SetConfig+0x94>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <TIM_OC2_SetConfig+0xe8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40010400 	.word	0x40010400

08004c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <TIM_OC3_SetConfig+0xe0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_OC3_SetConfig+0x66>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <TIM_OC3_SetConfig+0xe4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10d      	bne.n	8004cba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <TIM_OC3_SetConfig+0xe0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_OC3_SetConfig+0x92>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <TIM_OC3_SetConfig+0xe4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d113      	bne.n	8004cf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010400 	.word	0x40010400

08004d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <TIM_OC4_SetConfig+0xa4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC4_SetConfig+0x68>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <TIM_OC4_SetConfig+0xa8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d109      	bne.n	8004d9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	019b      	lsls	r3, r3, #6
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e05a      	b.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10c      	bne.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40001800 	.word	0x40001800

08004ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e03d      	b.n	8004f5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <__errno>:
 8004f90:	4b01      	ldr	r3, [pc, #4]	; (8004f98 <__errno+0x8>)
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000001c 	.word	0x2000001c

08004f9c <__libc_init_array>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	4d0d      	ldr	r5, [pc, #52]	; (8004fd4 <__libc_init_array+0x38>)
 8004fa0:	4c0d      	ldr	r4, [pc, #52]	; (8004fd8 <__libc_init_array+0x3c>)
 8004fa2:	1b64      	subs	r4, r4, r5
 8004fa4:	10a4      	asrs	r4, r4, #2
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	42a6      	cmp	r6, r4
 8004faa:	d109      	bne.n	8004fc0 <__libc_init_array+0x24>
 8004fac:	4d0b      	ldr	r5, [pc, #44]	; (8004fdc <__libc_init_array+0x40>)
 8004fae:	4c0c      	ldr	r4, [pc, #48]	; (8004fe0 <__libc_init_array+0x44>)
 8004fb0:	f003 f9d4 	bl	800835c <_init>
 8004fb4:	1b64      	subs	r4, r4, r5
 8004fb6:	10a4      	asrs	r4, r4, #2
 8004fb8:	2600      	movs	r6, #0
 8004fba:	42a6      	cmp	r6, r4
 8004fbc:	d105      	bne.n	8004fca <__libc_init_array+0x2e>
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc4:	4798      	blx	r3
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7ee      	b.n	8004fa8 <__libc_init_array+0xc>
 8004fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fce:	4798      	blx	r3
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	e7f2      	b.n	8004fba <__libc_init_array+0x1e>
 8004fd4:	08008710 	.word	0x08008710
 8004fd8:	08008710 	.word	0x08008710
 8004fdc:	08008710 	.word	0x08008710
 8004fe0:	08008714 	.word	0x08008714

08004fe4 <memcpy>:
 8004fe4:	440a      	add	r2, r1
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fec:	d100      	bne.n	8004ff0 <memcpy+0xc>
 8004fee:	4770      	bx	lr
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	d1f9      	bne.n	8004ff2 <memcpy+0xe>
 8004ffe:	bd10      	pop	{r4, pc}

08005000 <memset>:
 8005000:	4402      	add	r2, r0
 8005002:	4603      	mov	r3, r0
 8005004:	4293      	cmp	r3, r2
 8005006:	d100      	bne.n	800500a <memset+0xa>
 8005008:	4770      	bx	lr
 800500a:	f803 1b01 	strb.w	r1, [r3], #1
 800500e:	e7f9      	b.n	8005004 <memset+0x4>

08005010 <rand>:
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <rand+0x5c>)
 8005012:	b510      	push	{r4, lr}
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005018:	b9b3      	cbnz	r3, 8005048 <rand+0x38>
 800501a:	2018      	movs	r0, #24
 800501c:	f000 f95e 	bl	80052dc <malloc>
 8005020:	63a0      	str	r0, [r4, #56]	; 0x38
 8005022:	b928      	cbnz	r0, 8005030 <rand+0x20>
 8005024:	4602      	mov	r2, r0
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <rand+0x60>)
 8005028:	4812      	ldr	r0, [pc, #72]	; (8005074 <rand+0x64>)
 800502a:	214e      	movs	r1, #78	; 0x4e
 800502c:	f000 f82e 	bl	800508c <__assert_func>
 8005030:	4a11      	ldr	r2, [pc, #68]	; (8005078 <rand+0x68>)
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <rand+0x6c>)
 8005034:	e9c0 2300 	strd	r2, r3, [r0]
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <rand+0x70>)
 800503a:	6083      	str	r3, [r0, #8]
 800503c:	230b      	movs	r3, #11
 800503e:	8183      	strh	r3, [r0, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	2300      	movs	r3, #0
 8005044:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005048:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800504a:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <rand+0x74>)
 800504c:	6920      	ldr	r0, [r4, #16]
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	490d      	ldr	r1, [pc, #52]	; (8005088 <rand+0x78>)
 8005052:	4342      	muls	r2, r0
 8005054:	fb01 2203 	mla	r2, r1, r3, r2
 8005058:	fba0 0101 	umull	r0, r1, r0, r1
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	eb42 0001 	adc.w	r0, r2, r1
 8005062:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005066:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800506a:	bd10      	pop	{r4, pc}
 800506c:	2000001c 	.word	0x2000001c
 8005070:	0800838c 	.word	0x0800838c
 8005074:	080083a3 	.word	0x080083a3
 8005078:	abcd330e 	.word	0xabcd330e
 800507c:	e66d1234 	.word	0xe66d1234
 8005080:	0005deec 	.word	0x0005deec
 8005084:	5851f42d 	.word	0x5851f42d
 8005088:	4c957f2d 	.word	0x4c957f2d

0800508c <__assert_func>:
 800508c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800508e:	4614      	mov	r4, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <__assert_func+0x2c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4605      	mov	r5, r0
 8005098:	68d8      	ldr	r0, [r3, #12]
 800509a:	b14c      	cbz	r4, 80050b0 <__assert_func+0x24>
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <__assert_func+0x30>)
 800509e:	9100      	str	r1, [sp, #0]
 80050a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050a4:	4906      	ldr	r1, [pc, #24]	; (80050c0 <__assert_func+0x34>)
 80050a6:	462b      	mov	r3, r5
 80050a8:	f000 f8e4 	bl	8005274 <fiprintf>
 80050ac:	f000 fe12 	bl	8005cd4 <abort>
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <__assert_func+0x38>)
 80050b2:	461c      	mov	r4, r3
 80050b4:	e7f3      	b.n	800509e <__assert_func+0x12>
 80050b6:	bf00      	nop
 80050b8:	2000001c 	.word	0x2000001c
 80050bc:	080083fe 	.word	0x080083fe
 80050c0:	0800840b 	.word	0x0800840b
 80050c4:	08008439 	.word	0x08008439

080050c8 <std>:
 80050c8:	2300      	movs	r3, #0
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	e9c0 3300 	strd	r3, r3, [r0]
 80050d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050d6:	6083      	str	r3, [r0, #8]
 80050d8:	8181      	strh	r1, [r0, #12]
 80050da:	6643      	str	r3, [r0, #100]	; 0x64
 80050dc:	81c2      	strh	r2, [r0, #14]
 80050de:	6183      	str	r3, [r0, #24]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2208      	movs	r2, #8
 80050e4:	305c      	adds	r0, #92	; 0x5c
 80050e6:	f7ff ff8b 	bl	8005000 <memset>
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <std+0x38>)
 80050ec:	6263      	str	r3, [r4, #36]	; 0x24
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <std+0x3c>)
 80050f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x40>)
 80050f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <std+0x44>)
 80050f8:	6224      	str	r4, [r4, #32]
 80050fa:	6323      	str	r3, [r4, #48]	; 0x30
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	bf00      	nop
 8005100:	08005aa9 	.word	0x08005aa9
 8005104:	08005acb 	.word	0x08005acb
 8005108:	08005b03 	.word	0x08005b03
 800510c:	08005b27 	.word	0x08005b27

08005110 <_cleanup_r>:
 8005110:	4901      	ldr	r1, [pc, #4]	; (8005118 <_cleanup_r+0x8>)
 8005112:	f000 b8c1 	b.w	8005298 <_fwalk_reent>
 8005116:	bf00      	nop
 8005118:	08005e11 	.word	0x08005e11

0800511c <__sfmoreglue>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	2268      	movs	r2, #104	; 0x68
 8005120:	1e4d      	subs	r5, r1, #1
 8005122:	4355      	muls	r5, r2
 8005124:	460e      	mov	r6, r1
 8005126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800512a:	f000 f94b 	bl	80053c4 <_malloc_r>
 800512e:	4604      	mov	r4, r0
 8005130:	b140      	cbz	r0, 8005144 <__sfmoreglue+0x28>
 8005132:	2100      	movs	r1, #0
 8005134:	e9c0 1600 	strd	r1, r6, [r0]
 8005138:	300c      	adds	r0, #12
 800513a:	60a0      	str	r0, [r4, #8]
 800513c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005140:	f7ff ff5e 	bl	8005000 <memset>
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}

08005148 <__sfp_lock_acquire>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sfp_lock_acquire+0x8>)
 800514a:	f000 b8c5 	b.w	80052d8 <__retarget_lock_acquire_recursive>
 800514e:	bf00      	nop
 8005150:	200002d9 	.word	0x200002d9

08005154 <__sfp_lock_release>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__sfp_lock_release+0x8>)
 8005156:	f000 b8c0 	b.w	80052da <__retarget_lock_release_recursive>
 800515a:	bf00      	nop
 800515c:	200002d9 	.word	0x200002d9

08005160 <__sinit_lock_acquire>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sinit_lock_acquire+0x8>)
 8005162:	f000 b8b9 	b.w	80052d8 <__retarget_lock_acquire_recursive>
 8005166:	bf00      	nop
 8005168:	200002da 	.word	0x200002da

0800516c <__sinit_lock_release>:
 800516c:	4801      	ldr	r0, [pc, #4]	; (8005174 <__sinit_lock_release+0x8>)
 800516e:	f000 b8b4 	b.w	80052da <__retarget_lock_release_recursive>
 8005172:	bf00      	nop
 8005174:	200002da 	.word	0x200002da

08005178 <__sinit>:
 8005178:	b510      	push	{r4, lr}
 800517a:	4604      	mov	r4, r0
 800517c:	f7ff fff0 	bl	8005160 <__sinit_lock_acquire>
 8005180:	69a3      	ldr	r3, [r4, #24]
 8005182:	b11b      	cbz	r3, 800518c <__sinit+0x14>
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	f7ff bff0 	b.w	800516c <__sinit_lock_release>
 800518c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005190:	6523      	str	r3, [r4, #80]	; 0x50
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <__sinit+0x68>)
 8005194:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <__sinit+0x6c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	62a2      	str	r2, [r4, #40]	; 0x28
 800519a:	42a3      	cmp	r3, r4
 800519c:	bf04      	itt	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	61a3      	streq	r3, [r4, #24]
 80051a2:	4620      	mov	r0, r4
 80051a4:	f000 f820 	bl	80051e8 <__sfp>
 80051a8:	6060      	str	r0, [r4, #4]
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 f81c 	bl	80051e8 <__sfp>
 80051b0:	60a0      	str	r0, [r4, #8]
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f818 	bl	80051e8 <__sfp>
 80051b8:	2200      	movs	r2, #0
 80051ba:	60e0      	str	r0, [r4, #12]
 80051bc:	2104      	movs	r1, #4
 80051be:	6860      	ldr	r0, [r4, #4]
 80051c0:	f7ff ff82 	bl	80050c8 <std>
 80051c4:	68a0      	ldr	r0, [r4, #8]
 80051c6:	2201      	movs	r2, #1
 80051c8:	2109      	movs	r1, #9
 80051ca:	f7ff ff7d 	bl	80050c8 <std>
 80051ce:	68e0      	ldr	r0, [r4, #12]
 80051d0:	2202      	movs	r2, #2
 80051d2:	2112      	movs	r1, #18
 80051d4:	f7ff ff78 	bl	80050c8 <std>
 80051d8:	2301      	movs	r3, #1
 80051da:	61a3      	str	r3, [r4, #24]
 80051dc:	e7d2      	b.n	8005184 <__sinit+0xc>
 80051de:	bf00      	nop
 80051e0:	08008388 	.word	0x08008388
 80051e4:	08005111 	.word	0x08005111

080051e8 <__sfp>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	4607      	mov	r7, r0
 80051ec:	f7ff ffac 	bl	8005148 <__sfp_lock_acquire>
 80051f0:	4b1e      	ldr	r3, [pc, #120]	; (800526c <__sfp+0x84>)
 80051f2:	681e      	ldr	r6, [r3, #0]
 80051f4:	69b3      	ldr	r3, [r6, #24]
 80051f6:	b913      	cbnz	r3, 80051fe <__sfp+0x16>
 80051f8:	4630      	mov	r0, r6
 80051fa:	f7ff ffbd 	bl	8005178 <__sinit>
 80051fe:	3648      	adds	r6, #72	; 0x48
 8005200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005204:	3b01      	subs	r3, #1
 8005206:	d503      	bpl.n	8005210 <__sfp+0x28>
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	b30b      	cbz	r3, 8005250 <__sfp+0x68>
 800520c:	6836      	ldr	r6, [r6, #0]
 800520e:	e7f7      	b.n	8005200 <__sfp+0x18>
 8005210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005214:	b9d5      	cbnz	r5, 800524c <__sfp+0x64>
 8005216:	4b16      	ldr	r3, [pc, #88]	; (8005270 <__sfp+0x88>)
 8005218:	60e3      	str	r3, [r4, #12]
 800521a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800521e:	6665      	str	r5, [r4, #100]	; 0x64
 8005220:	f000 f859 	bl	80052d6 <__retarget_lock_init_recursive>
 8005224:	f7ff ff96 	bl	8005154 <__sfp_lock_release>
 8005228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800522c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005230:	6025      	str	r5, [r4, #0]
 8005232:	61a5      	str	r5, [r4, #24]
 8005234:	2208      	movs	r2, #8
 8005236:	4629      	mov	r1, r5
 8005238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800523c:	f7ff fee0 	bl	8005000 <memset>
 8005240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005248:	4620      	mov	r0, r4
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524c:	3468      	adds	r4, #104	; 0x68
 800524e:	e7d9      	b.n	8005204 <__sfp+0x1c>
 8005250:	2104      	movs	r1, #4
 8005252:	4638      	mov	r0, r7
 8005254:	f7ff ff62 	bl	800511c <__sfmoreglue>
 8005258:	4604      	mov	r4, r0
 800525a:	6030      	str	r0, [r6, #0]
 800525c:	2800      	cmp	r0, #0
 800525e:	d1d5      	bne.n	800520c <__sfp+0x24>
 8005260:	f7ff ff78 	bl	8005154 <__sfp_lock_release>
 8005264:	230c      	movs	r3, #12
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	e7ee      	b.n	8005248 <__sfp+0x60>
 800526a:	bf00      	nop
 800526c:	08008388 	.word	0x08008388
 8005270:	ffff0001 	.word	0xffff0001

08005274 <fiprintf>:
 8005274:	b40e      	push	{r1, r2, r3}
 8005276:	b503      	push	{r0, r1, lr}
 8005278:	4601      	mov	r1, r0
 800527a:	ab03      	add	r3, sp, #12
 800527c:	4805      	ldr	r0, [pc, #20]	; (8005294 <fiprintf+0x20>)
 800527e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005282:	6800      	ldr	r0, [r0, #0]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	f000 f93b 	bl	8005500 <_vfiprintf_r>
 800528a:	b002      	add	sp, #8
 800528c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005290:	b003      	add	sp, #12
 8005292:	4770      	bx	lr
 8005294:	2000001c 	.word	0x2000001c

08005298 <_fwalk_reent>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	4606      	mov	r6, r0
 800529e:	4688      	mov	r8, r1
 80052a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052a4:	2700      	movs	r7, #0
 80052a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052aa:	f1b9 0901 	subs.w	r9, r9, #1
 80052ae:	d505      	bpl.n	80052bc <_fwalk_reent+0x24>
 80052b0:	6824      	ldr	r4, [r4, #0]
 80052b2:	2c00      	cmp	r4, #0
 80052b4:	d1f7      	bne.n	80052a6 <_fwalk_reent+0xe>
 80052b6:	4638      	mov	r0, r7
 80052b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052bc:	89ab      	ldrh	r3, [r5, #12]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d907      	bls.n	80052d2 <_fwalk_reent+0x3a>
 80052c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052c6:	3301      	adds	r3, #1
 80052c8:	d003      	beq.n	80052d2 <_fwalk_reent+0x3a>
 80052ca:	4629      	mov	r1, r5
 80052cc:	4630      	mov	r0, r6
 80052ce:	47c0      	blx	r8
 80052d0:	4307      	orrs	r7, r0
 80052d2:	3568      	adds	r5, #104	; 0x68
 80052d4:	e7e9      	b.n	80052aa <_fwalk_reent+0x12>

080052d6 <__retarget_lock_init_recursive>:
 80052d6:	4770      	bx	lr

080052d8 <__retarget_lock_acquire_recursive>:
 80052d8:	4770      	bx	lr

080052da <__retarget_lock_release_recursive>:
 80052da:	4770      	bx	lr

080052dc <malloc>:
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <malloc+0xc>)
 80052de:	4601      	mov	r1, r0
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f000 b86f 	b.w	80053c4 <_malloc_r>
 80052e6:	bf00      	nop
 80052e8:	2000001c 	.word	0x2000001c

080052ec <_free_r>:
 80052ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ee:	2900      	cmp	r1, #0
 80052f0:	d044      	beq.n	800537c <_free_r+0x90>
 80052f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f6:	9001      	str	r0, [sp, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f1a1 0404 	sub.w	r4, r1, #4
 80052fe:	bfb8      	it	lt
 8005300:	18e4      	addlt	r4, r4, r3
 8005302:	f000 fe39 	bl	8005f78 <__malloc_lock>
 8005306:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <_free_r+0x94>)
 8005308:	9801      	ldr	r0, [sp, #4]
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	b933      	cbnz	r3, 800531c <_free_r+0x30>
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	b003      	add	sp, #12
 8005314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005318:	f000 be34 	b.w	8005f84 <__malloc_unlock>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d908      	bls.n	8005332 <_free_r+0x46>
 8005320:	6825      	ldr	r5, [r4, #0]
 8005322:	1961      	adds	r1, r4, r5
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1949      	addeq	r1, r1, r5
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	e7ed      	b.n	800530e <_free_r+0x22>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x50>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x46>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1855      	adds	r5, r2, r1
 8005340:	42a5      	cmp	r5, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x70>
 8005344:	6824      	ldr	r4, [r4, #0]
 8005346:	4421      	add	r1, r4
 8005348:	1854      	adds	r4, r2, r1
 800534a:	42a3      	cmp	r3, r4
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1e0      	bne.n	8005312 <_free_r+0x26>
 8005350:	681c      	ldr	r4, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	4421      	add	r1, r4
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	e7da      	b.n	8005312 <_free_r+0x26>
 800535c:	d902      	bls.n	8005364 <_free_r+0x78>
 800535e:	230c      	movs	r3, #12
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	e7d6      	b.n	8005312 <_free_r+0x26>
 8005364:	6825      	ldr	r5, [r4, #0]
 8005366:	1961      	adds	r1, r4, r5
 8005368:	428b      	cmp	r3, r1
 800536a:	bf04      	itt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	bf04      	itt	eq
 8005374:	1949      	addeq	r1, r1, r5
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	6054      	str	r4, [r2, #4]
 800537a:	e7ca      	b.n	8005312 <_free_r+0x26>
 800537c:	b003      	add	sp, #12
 800537e:	bd30      	pop	{r4, r5, pc}
 8005380:	200002dc 	.word	0x200002dc

08005384 <sbrk_aligned>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4e0e      	ldr	r6, [pc, #56]	; (80053c0 <sbrk_aligned+0x3c>)
 8005388:	460c      	mov	r4, r1
 800538a:	6831      	ldr	r1, [r6, #0]
 800538c:	4605      	mov	r5, r0
 800538e:	b911      	cbnz	r1, 8005396 <sbrk_aligned+0x12>
 8005390:	f000 fb7a 	bl	8005a88 <_sbrk_r>
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fb75 	bl	8005a88 <_sbrk_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d00a      	beq.n	80053b8 <sbrk_aligned+0x34>
 80053a2:	1cc4      	adds	r4, r0, #3
 80053a4:	f024 0403 	bic.w	r4, r4, #3
 80053a8:	42a0      	cmp	r0, r4
 80053aa:	d007      	beq.n	80053bc <sbrk_aligned+0x38>
 80053ac:	1a21      	subs	r1, r4, r0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fb6a 	bl	8005a88 <_sbrk_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d101      	bne.n	80053bc <sbrk_aligned+0x38>
 80053b8:	f04f 34ff 	mov.w	r4, #4294967295
 80053bc:	4620      	mov	r0, r4
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	200002e0 	.word	0x200002e0

080053c4 <_malloc_r>:
 80053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	1ccd      	adds	r5, r1, #3
 80053ca:	f025 0503 	bic.w	r5, r5, #3
 80053ce:	3508      	adds	r5, #8
 80053d0:	2d0c      	cmp	r5, #12
 80053d2:	bf38      	it	cc
 80053d4:	250c      	movcc	r5, #12
 80053d6:	2d00      	cmp	r5, #0
 80053d8:	4607      	mov	r7, r0
 80053da:	db01      	blt.n	80053e0 <_malloc_r+0x1c>
 80053dc:	42a9      	cmp	r1, r5
 80053de:	d905      	bls.n	80053ec <_malloc_r+0x28>
 80053e0:	230c      	movs	r3, #12
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	2600      	movs	r6, #0
 80053e6:	4630      	mov	r0, r6
 80053e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ec:	4e2e      	ldr	r6, [pc, #184]	; (80054a8 <_malloc_r+0xe4>)
 80053ee:	f000 fdc3 	bl	8005f78 <__malloc_lock>
 80053f2:	6833      	ldr	r3, [r6, #0]
 80053f4:	461c      	mov	r4, r3
 80053f6:	bb34      	cbnz	r4, 8005446 <_malloc_r+0x82>
 80053f8:	4629      	mov	r1, r5
 80053fa:	4638      	mov	r0, r7
 80053fc:	f7ff ffc2 	bl	8005384 <sbrk_aligned>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	4604      	mov	r4, r0
 8005404:	d14d      	bne.n	80054a2 <_malloc_r+0xde>
 8005406:	6834      	ldr	r4, [r6, #0]
 8005408:	4626      	mov	r6, r4
 800540a:	2e00      	cmp	r6, #0
 800540c:	d140      	bne.n	8005490 <_malloc_r+0xcc>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	4631      	mov	r1, r6
 8005412:	4638      	mov	r0, r7
 8005414:	eb04 0803 	add.w	r8, r4, r3
 8005418:	f000 fb36 	bl	8005a88 <_sbrk_r>
 800541c:	4580      	cmp	r8, r0
 800541e:	d13a      	bne.n	8005496 <_malloc_r+0xd2>
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	3503      	adds	r5, #3
 8005424:	1a6d      	subs	r5, r5, r1
 8005426:	f025 0503 	bic.w	r5, r5, #3
 800542a:	3508      	adds	r5, #8
 800542c:	2d0c      	cmp	r5, #12
 800542e:	bf38      	it	cc
 8005430:	250c      	movcc	r5, #12
 8005432:	4629      	mov	r1, r5
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ffa5 	bl	8005384 <sbrk_aligned>
 800543a:	3001      	adds	r0, #1
 800543c:	d02b      	beq.n	8005496 <_malloc_r+0xd2>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	442b      	add	r3, r5
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	e00e      	b.n	8005464 <_malloc_r+0xa0>
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	1b52      	subs	r2, r2, r5
 800544a:	d41e      	bmi.n	800548a <_malloc_r+0xc6>
 800544c:	2a0b      	cmp	r2, #11
 800544e:	d916      	bls.n	800547e <_malloc_r+0xba>
 8005450:	1961      	adds	r1, r4, r5
 8005452:	42a3      	cmp	r3, r4
 8005454:	6025      	str	r5, [r4, #0]
 8005456:	bf18      	it	ne
 8005458:	6059      	strne	r1, [r3, #4]
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	bf08      	it	eq
 800545e:	6031      	streq	r1, [r6, #0]
 8005460:	5162      	str	r2, [r4, r5]
 8005462:	604b      	str	r3, [r1, #4]
 8005464:	4638      	mov	r0, r7
 8005466:	f104 060b 	add.w	r6, r4, #11
 800546a:	f000 fd8b 	bl	8005f84 <__malloc_unlock>
 800546e:	f026 0607 	bic.w	r6, r6, #7
 8005472:	1d23      	adds	r3, r4, #4
 8005474:	1af2      	subs	r2, r6, r3
 8005476:	d0b6      	beq.n	80053e6 <_malloc_r+0x22>
 8005478:	1b9b      	subs	r3, r3, r6
 800547a:	50a3      	str	r3, [r4, r2]
 800547c:	e7b3      	b.n	80053e6 <_malloc_r+0x22>
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	42a3      	cmp	r3, r4
 8005482:	bf0c      	ite	eq
 8005484:	6032      	streq	r2, [r6, #0]
 8005486:	605a      	strne	r2, [r3, #4]
 8005488:	e7ec      	b.n	8005464 <_malloc_r+0xa0>
 800548a:	4623      	mov	r3, r4
 800548c:	6864      	ldr	r4, [r4, #4]
 800548e:	e7b2      	b.n	80053f6 <_malloc_r+0x32>
 8005490:	4634      	mov	r4, r6
 8005492:	6876      	ldr	r6, [r6, #4]
 8005494:	e7b9      	b.n	800540a <_malloc_r+0x46>
 8005496:	230c      	movs	r3, #12
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4638      	mov	r0, r7
 800549c:	f000 fd72 	bl	8005f84 <__malloc_unlock>
 80054a0:	e7a1      	b.n	80053e6 <_malloc_r+0x22>
 80054a2:	6025      	str	r5, [r4, #0]
 80054a4:	e7de      	b.n	8005464 <_malloc_r+0xa0>
 80054a6:	bf00      	nop
 80054a8:	200002dc 	.word	0x200002dc

080054ac <__sfputc_r>:
 80054ac:	6893      	ldr	r3, [r2, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	b410      	push	{r4}
 80054b4:	6093      	str	r3, [r2, #8]
 80054b6:	da08      	bge.n	80054ca <__sfputc_r+0x1e>
 80054b8:	6994      	ldr	r4, [r2, #24]
 80054ba:	42a3      	cmp	r3, r4
 80054bc:	db01      	blt.n	80054c2 <__sfputc_r+0x16>
 80054be:	290a      	cmp	r1, #10
 80054c0:	d103      	bne.n	80054ca <__sfputc_r+0x1e>
 80054c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c6:	f000 bb33 	b.w	8005b30 <__swbuf_r>
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	1c58      	adds	r0, r3, #1
 80054ce:	6010      	str	r0, [r2, #0]
 80054d0:	7019      	strb	r1, [r3, #0]
 80054d2:	4608      	mov	r0, r1
 80054d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054d8:	4770      	bx	lr

080054da <__sfputs_r>:
 80054da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	4614      	mov	r4, r2
 80054e2:	18d5      	adds	r5, r2, r3
 80054e4:	42ac      	cmp	r4, r5
 80054e6:	d101      	bne.n	80054ec <__sfputs_r+0x12>
 80054e8:	2000      	movs	r0, #0
 80054ea:	e007      	b.n	80054fc <__sfputs_r+0x22>
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	463a      	mov	r2, r7
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff ffda 	bl	80054ac <__sfputc_r>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d1f3      	bne.n	80054e4 <__sfputs_r+0xa>
 80054fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005500 <_vfiprintf_r>:
 8005500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	460d      	mov	r5, r1
 8005506:	b09d      	sub	sp, #116	; 0x74
 8005508:	4614      	mov	r4, r2
 800550a:	4698      	mov	r8, r3
 800550c:	4606      	mov	r6, r0
 800550e:	b118      	cbz	r0, 8005518 <_vfiprintf_r+0x18>
 8005510:	6983      	ldr	r3, [r0, #24]
 8005512:	b90b      	cbnz	r3, 8005518 <_vfiprintf_r+0x18>
 8005514:	f7ff fe30 	bl	8005178 <__sinit>
 8005518:	4b89      	ldr	r3, [pc, #548]	; (8005740 <_vfiprintf_r+0x240>)
 800551a:	429d      	cmp	r5, r3
 800551c:	d11b      	bne.n	8005556 <_vfiprintf_r+0x56>
 800551e:	6875      	ldr	r5, [r6, #4]
 8005520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005522:	07d9      	lsls	r1, r3, #31
 8005524:	d405      	bmi.n	8005532 <_vfiprintf_r+0x32>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	059a      	lsls	r2, r3, #22
 800552a:	d402      	bmi.n	8005532 <_vfiprintf_r+0x32>
 800552c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552e:	f7ff fed3 	bl	80052d8 <__retarget_lock_acquire_recursive>
 8005532:	89ab      	ldrh	r3, [r5, #12]
 8005534:	071b      	lsls	r3, r3, #28
 8005536:	d501      	bpl.n	800553c <_vfiprintf_r+0x3c>
 8005538:	692b      	ldr	r3, [r5, #16]
 800553a:	b9eb      	cbnz	r3, 8005578 <_vfiprintf_r+0x78>
 800553c:	4629      	mov	r1, r5
 800553e:	4630      	mov	r0, r6
 8005540:	f000 fb5a 	bl	8005bf8 <__swsetup_r>
 8005544:	b1c0      	cbz	r0, 8005578 <_vfiprintf_r+0x78>
 8005546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005548:	07dc      	lsls	r4, r3, #31
 800554a:	d50e      	bpl.n	800556a <_vfiprintf_r+0x6a>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	b01d      	add	sp, #116	; 0x74
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005556:	4b7b      	ldr	r3, [pc, #492]	; (8005744 <_vfiprintf_r+0x244>)
 8005558:	429d      	cmp	r5, r3
 800555a:	d101      	bne.n	8005560 <_vfiprintf_r+0x60>
 800555c:	68b5      	ldr	r5, [r6, #8]
 800555e:	e7df      	b.n	8005520 <_vfiprintf_r+0x20>
 8005560:	4b79      	ldr	r3, [pc, #484]	; (8005748 <_vfiprintf_r+0x248>)
 8005562:	429d      	cmp	r5, r3
 8005564:	bf08      	it	eq
 8005566:	68f5      	ldreq	r5, [r6, #12]
 8005568:	e7da      	b.n	8005520 <_vfiprintf_r+0x20>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	0598      	lsls	r0, r3, #22
 800556e:	d4ed      	bmi.n	800554c <_vfiprintf_r+0x4c>
 8005570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005572:	f7ff feb2 	bl	80052da <__retarget_lock_release_recursive>
 8005576:	e7e9      	b.n	800554c <_vfiprintf_r+0x4c>
 8005578:	2300      	movs	r3, #0
 800557a:	9309      	str	r3, [sp, #36]	; 0x24
 800557c:	2320      	movs	r3, #32
 800557e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005582:	f8cd 800c 	str.w	r8, [sp, #12]
 8005586:	2330      	movs	r3, #48	; 0x30
 8005588:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800574c <_vfiprintf_r+0x24c>
 800558c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005590:	f04f 0901 	mov.w	r9, #1
 8005594:	4623      	mov	r3, r4
 8005596:	469a      	mov	sl, r3
 8005598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559c:	b10a      	cbz	r2, 80055a2 <_vfiprintf_r+0xa2>
 800559e:	2a25      	cmp	r2, #37	; 0x25
 80055a0:	d1f9      	bne.n	8005596 <_vfiprintf_r+0x96>
 80055a2:	ebba 0b04 	subs.w	fp, sl, r4
 80055a6:	d00b      	beq.n	80055c0 <_vfiprintf_r+0xc0>
 80055a8:	465b      	mov	r3, fp
 80055aa:	4622      	mov	r2, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ff93 	bl	80054da <__sfputs_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	f000 80aa 	beq.w	800570e <_vfiprintf_r+0x20e>
 80055ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055bc:	445a      	add	r2, fp
 80055be:	9209      	str	r2, [sp, #36]	; 0x24
 80055c0:	f89a 3000 	ldrb.w	r3, [sl]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80a2 	beq.w	800570e <_vfiprintf_r+0x20e>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d4:	f10a 0a01 	add.w	sl, sl, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	9307      	str	r3, [sp, #28]
 80055dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e0:	931a      	str	r3, [sp, #104]	; 0x68
 80055e2:	4654      	mov	r4, sl
 80055e4:	2205      	movs	r2, #5
 80055e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ea:	4858      	ldr	r0, [pc, #352]	; (800574c <_vfiprintf_r+0x24c>)
 80055ec:	f7fa fe10 	bl	8000210 <memchr>
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	b9d8      	cbnz	r0, 800562c <_vfiprintf_r+0x12c>
 80055f4:	06d1      	lsls	r1, r2, #27
 80055f6:	bf44      	itt	mi
 80055f8:	2320      	movmi	r3, #32
 80055fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fe:	0713      	lsls	r3, r2, #28
 8005600:	bf44      	itt	mi
 8005602:	232b      	movmi	r3, #43	; 0x2b
 8005604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005608:	f89a 3000 	ldrb.w	r3, [sl]
 800560c:	2b2a      	cmp	r3, #42	; 0x2a
 800560e:	d015      	beq.n	800563c <_vfiprintf_r+0x13c>
 8005610:	9a07      	ldr	r2, [sp, #28]
 8005612:	4654      	mov	r4, sl
 8005614:	2000      	movs	r0, #0
 8005616:	f04f 0c0a 	mov.w	ip, #10
 800561a:	4621      	mov	r1, r4
 800561c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005620:	3b30      	subs	r3, #48	; 0x30
 8005622:	2b09      	cmp	r3, #9
 8005624:	d94e      	bls.n	80056c4 <_vfiprintf_r+0x1c4>
 8005626:	b1b0      	cbz	r0, 8005656 <_vfiprintf_r+0x156>
 8005628:	9207      	str	r2, [sp, #28]
 800562a:	e014      	b.n	8005656 <_vfiprintf_r+0x156>
 800562c:	eba0 0308 	sub.w	r3, r0, r8
 8005630:	fa09 f303 	lsl.w	r3, r9, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	46a2      	mov	sl, r4
 800563a:	e7d2      	b.n	80055e2 <_vfiprintf_r+0xe2>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	1d19      	adds	r1, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	9103      	str	r1, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbb      	ittet	lt
 8005648:	425b      	neglt	r3, r3
 800564a:	f042 0202 	orrlt.w	r2, r2, #2
 800564e:	9307      	strge	r3, [sp, #28]
 8005650:	9307      	strlt	r3, [sp, #28]
 8005652:	bfb8      	it	lt
 8005654:	9204      	strlt	r2, [sp, #16]
 8005656:	7823      	ldrb	r3, [r4, #0]
 8005658:	2b2e      	cmp	r3, #46	; 0x2e
 800565a:	d10c      	bne.n	8005676 <_vfiprintf_r+0x176>
 800565c:	7863      	ldrb	r3, [r4, #1]
 800565e:	2b2a      	cmp	r3, #42	; 0x2a
 8005660:	d135      	bne.n	80056ce <_vfiprintf_r+0x1ce>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	9203      	str	r2, [sp, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	bfb8      	it	lt
 800566e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005672:	3402      	adds	r4, #2
 8005674:	9305      	str	r3, [sp, #20]
 8005676:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800575c <_vfiprintf_r+0x25c>
 800567a:	7821      	ldrb	r1, [r4, #0]
 800567c:	2203      	movs	r2, #3
 800567e:	4650      	mov	r0, sl
 8005680:	f7fa fdc6 	bl	8000210 <memchr>
 8005684:	b140      	cbz	r0, 8005698 <_vfiprintf_r+0x198>
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	eba0 000a 	sub.w	r0, r0, sl
 800568c:	fa03 f000 	lsl.w	r0, r3, r0
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	4303      	orrs	r3, r0
 8005694:	3401      	adds	r4, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	482c      	ldr	r0, [pc, #176]	; (8005750 <_vfiprintf_r+0x250>)
 800569e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056a2:	2206      	movs	r2, #6
 80056a4:	f7fa fdb4 	bl	8000210 <memchr>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d03f      	beq.n	800572c <_vfiprintf_r+0x22c>
 80056ac:	4b29      	ldr	r3, [pc, #164]	; (8005754 <_vfiprintf_r+0x254>)
 80056ae:	bb1b      	cbnz	r3, 80056f8 <_vfiprintf_r+0x1f8>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	3307      	adds	r3, #7
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	3308      	adds	r3, #8
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	443b      	add	r3, r7
 80056c0:	9309      	str	r3, [sp, #36]	; 0x24
 80056c2:	e767      	b.n	8005594 <_vfiprintf_r+0x94>
 80056c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	e7a5      	b.n	800561a <_vfiprintf_r+0x11a>
 80056ce:	2300      	movs	r3, #0
 80056d0:	3401      	adds	r4, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e0:	3a30      	subs	r2, #48	; 0x30
 80056e2:	2a09      	cmp	r2, #9
 80056e4:	d903      	bls.n	80056ee <_vfiprintf_r+0x1ee>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0c5      	beq.n	8005676 <_vfiprintf_r+0x176>
 80056ea:	9105      	str	r1, [sp, #20]
 80056ec:	e7c3      	b.n	8005676 <_vfiprintf_r+0x176>
 80056ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	e7f0      	b.n	80056da <_vfiprintf_r+0x1da>
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <_vfiprintf_r+0x258>)
 8005700:	a904      	add	r1, sp, #16
 8005702:	4630      	mov	r0, r6
 8005704:	f3af 8000 	nop.w
 8005708:	4607      	mov	r7, r0
 800570a:	1c78      	adds	r0, r7, #1
 800570c:	d1d6      	bne.n	80056bc <_vfiprintf_r+0x1bc>
 800570e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005710:	07d9      	lsls	r1, r3, #31
 8005712:	d405      	bmi.n	8005720 <_vfiprintf_r+0x220>
 8005714:	89ab      	ldrh	r3, [r5, #12]
 8005716:	059a      	lsls	r2, r3, #22
 8005718:	d402      	bmi.n	8005720 <_vfiprintf_r+0x220>
 800571a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571c:	f7ff fddd 	bl	80052da <__retarget_lock_release_recursive>
 8005720:	89ab      	ldrh	r3, [r5, #12]
 8005722:	065b      	lsls	r3, r3, #25
 8005724:	f53f af12 	bmi.w	800554c <_vfiprintf_r+0x4c>
 8005728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800572a:	e711      	b.n	8005550 <_vfiprintf_r+0x50>
 800572c:	ab03      	add	r3, sp, #12
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	462a      	mov	r2, r5
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <_vfiprintf_r+0x258>)
 8005734:	a904      	add	r1, sp, #16
 8005736:	4630      	mov	r0, r6
 8005738:	f000 f880 	bl	800583c <_printf_i>
 800573c:	e7e4      	b.n	8005708 <_vfiprintf_r+0x208>
 800573e:	bf00      	nop
 8005740:	0800845c 	.word	0x0800845c
 8005744:	0800847c 	.word	0x0800847c
 8005748:	0800843c 	.word	0x0800843c
 800574c:	0800849c 	.word	0x0800849c
 8005750:	080084a6 	.word	0x080084a6
 8005754:	00000000 	.word	0x00000000
 8005758:	080054db 	.word	0x080054db
 800575c:	080084a2 	.word	0x080084a2

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4616      	mov	r6, r2
 8005766:	4699      	mov	r9, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005770:	4293      	cmp	r3, r2
 8005772:	bfb8      	it	lt
 8005774:	4613      	movlt	r3, r2
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800577c:	4607      	mov	r7, r0
 800577e:	460c      	mov	r4, r1
 8005780:	b10a      	cbz	r2, 8005786 <_printf_common+0x26>
 8005782:	3301      	adds	r3, #1
 8005784:	6033      	str	r3, [r6, #0]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	0699      	lsls	r1, r3, #26
 800578a:	bf42      	ittt	mi
 800578c:	6833      	ldrmi	r3, [r6, #0]
 800578e:	3302      	addmi	r3, #2
 8005790:	6033      	strmi	r3, [r6, #0]
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	f015 0506 	ands.w	r5, r5, #6
 8005798:	d106      	bne.n	80057a8 <_printf_common+0x48>
 800579a:	f104 0a19 	add.w	sl, r4, #25
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	6832      	ldr	r2, [r6, #0]
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	dc26      	bgt.n	80057f6 <_printf_common+0x96>
 80057a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ac:	1e13      	subs	r3, r2, #0
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	bf18      	it	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	0692      	lsls	r2, r2, #26
 80057b6:	d42b      	bmi.n	8005810 <_printf_common+0xb0>
 80057b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057bc:	4649      	mov	r1, r9
 80057be:	4638      	mov	r0, r7
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d01e      	beq.n	8005804 <_printf_common+0xa4>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	68e5      	ldr	r5, [r4, #12]
 80057ca:	6832      	ldr	r2, [r6, #0]
 80057cc:	f003 0306 	and.w	r3, r3, #6
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	bf08      	it	eq
 80057d4:	1aad      	subeq	r5, r5, r2
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	bf0c      	ite	eq
 80057dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e0:	2500      	movne	r5, #0
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bfc4      	itt	gt
 80057e6:	1a9b      	subgt	r3, r3, r2
 80057e8:	18ed      	addgt	r5, r5, r3
 80057ea:	2600      	movs	r6, #0
 80057ec:	341a      	adds	r4, #26
 80057ee:	42b5      	cmp	r5, r6
 80057f0:	d11a      	bne.n	8005828 <_printf_common+0xc8>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e008      	b.n	8005808 <_printf_common+0xa8>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4652      	mov	r2, sl
 80057fa:	4649      	mov	r1, r9
 80057fc:	4638      	mov	r0, r7
 80057fe:	47c0      	blx	r8
 8005800:	3001      	adds	r0, #1
 8005802:	d103      	bne.n	800580c <_printf_common+0xac>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	3501      	adds	r5, #1
 800580e:	e7c6      	b.n	800579e <_printf_common+0x3e>
 8005810:	18e1      	adds	r1, r4, r3
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	2030      	movs	r0, #48	; 0x30
 8005816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800581a:	4422      	add	r2, r4
 800581c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005824:	3302      	adds	r3, #2
 8005826:	e7c7      	b.n	80057b8 <_printf_common+0x58>
 8005828:	2301      	movs	r3, #1
 800582a:	4622      	mov	r2, r4
 800582c:	4649      	mov	r1, r9
 800582e:	4638      	mov	r0, r7
 8005830:	47c0      	blx	r8
 8005832:	3001      	adds	r0, #1
 8005834:	d0e6      	beq.n	8005804 <_printf_common+0xa4>
 8005836:	3601      	adds	r6, #1
 8005838:	e7d9      	b.n	80057ee <_printf_common+0x8e>
	...

0800583c <_printf_i>:
 800583c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	7e0f      	ldrb	r7, [r1, #24]
 8005842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005844:	2f78      	cmp	r7, #120	; 0x78
 8005846:	4691      	mov	r9, r2
 8005848:	4680      	mov	r8, r0
 800584a:	460c      	mov	r4, r1
 800584c:	469a      	mov	sl, r3
 800584e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005852:	d807      	bhi.n	8005864 <_printf_i+0x28>
 8005854:	2f62      	cmp	r7, #98	; 0x62
 8005856:	d80a      	bhi.n	800586e <_printf_i+0x32>
 8005858:	2f00      	cmp	r7, #0
 800585a:	f000 80d8 	beq.w	8005a0e <_printf_i+0x1d2>
 800585e:	2f58      	cmp	r7, #88	; 0x58
 8005860:	f000 80a3 	beq.w	80059aa <_printf_i+0x16e>
 8005864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800586c:	e03a      	b.n	80058e4 <_printf_i+0xa8>
 800586e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005872:	2b15      	cmp	r3, #21
 8005874:	d8f6      	bhi.n	8005864 <_printf_i+0x28>
 8005876:	a101      	add	r1, pc, #4	; (adr r1, 800587c <_printf_i+0x40>)
 8005878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058e9 	.word	0x080058e9
 8005884:	08005865 	.word	0x08005865
 8005888:	08005865 	.word	0x08005865
 800588c:	08005865 	.word	0x08005865
 8005890:	08005865 	.word	0x08005865
 8005894:	080058e9 	.word	0x080058e9
 8005898:	08005865 	.word	0x08005865
 800589c:	08005865 	.word	0x08005865
 80058a0:	08005865 	.word	0x08005865
 80058a4:	08005865 	.word	0x08005865
 80058a8:	080059f5 	.word	0x080059f5
 80058ac:	08005919 	.word	0x08005919
 80058b0:	080059d7 	.word	0x080059d7
 80058b4:	08005865 	.word	0x08005865
 80058b8:	08005865 	.word	0x08005865
 80058bc:	08005a17 	.word	0x08005a17
 80058c0:	08005865 	.word	0x08005865
 80058c4:	08005919 	.word	0x08005919
 80058c8:	08005865 	.word	0x08005865
 80058cc:	08005865 	.word	0x08005865
 80058d0:	080059df 	.word	0x080059df
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	602a      	str	r2, [r5, #0]
 80058dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0a3      	b.n	8005a30 <_printf_i+0x1f4>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	6829      	ldr	r1, [r5, #0]
 80058ec:	0606      	lsls	r6, r0, #24
 80058ee:	f101 0304 	add.w	r3, r1, #4
 80058f2:	d50a      	bpl.n	800590a <_printf_i+0xce>
 80058f4:	680e      	ldr	r6, [r1, #0]
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	2e00      	cmp	r6, #0
 80058fa:	da03      	bge.n	8005904 <_printf_i+0xc8>
 80058fc:	232d      	movs	r3, #45	; 0x2d
 80058fe:	4276      	negs	r6, r6
 8005900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005904:	485e      	ldr	r0, [pc, #376]	; (8005a80 <_printf_i+0x244>)
 8005906:	230a      	movs	r3, #10
 8005908:	e019      	b.n	800593e <_printf_i+0x102>
 800590a:	680e      	ldr	r6, [r1, #0]
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005912:	bf18      	it	ne
 8005914:	b236      	sxthne	r6, r6
 8005916:	e7ef      	b.n	80058f8 <_printf_i+0xbc>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	6820      	ldr	r0, [r4, #0]
 800591c:	1d19      	adds	r1, r3, #4
 800591e:	6029      	str	r1, [r5, #0]
 8005920:	0601      	lsls	r1, r0, #24
 8005922:	d501      	bpl.n	8005928 <_printf_i+0xec>
 8005924:	681e      	ldr	r6, [r3, #0]
 8005926:	e002      	b.n	800592e <_printf_i+0xf2>
 8005928:	0646      	lsls	r6, r0, #25
 800592a:	d5fb      	bpl.n	8005924 <_printf_i+0xe8>
 800592c:	881e      	ldrh	r6, [r3, #0]
 800592e:	4854      	ldr	r0, [pc, #336]	; (8005a80 <_printf_i+0x244>)
 8005930:	2f6f      	cmp	r7, #111	; 0x6f
 8005932:	bf0c      	ite	eq
 8005934:	2308      	moveq	r3, #8
 8005936:	230a      	movne	r3, #10
 8005938:	2100      	movs	r1, #0
 800593a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593e:	6865      	ldr	r5, [r4, #4]
 8005940:	60a5      	str	r5, [r4, #8]
 8005942:	2d00      	cmp	r5, #0
 8005944:	bfa2      	ittt	ge
 8005946:	6821      	ldrge	r1, [r4, #0]
 8005948:	f021 0104 	bicge.w	r1, r1, #4
 800594c:	6021      	strge	r1, [r4, #0]
 800594e:	b90e      	cbnz	r6, 8005954 <_printf_i+0x118>
 8005950:	2d00      	cmp	r5, #0
 8005952:	d04d      	beq.n	80059f0 <_printf_i+0x1b4>
 8005954:	4615      	mov	r5, r2
 8005956:	fbb6 f1f3 	udiv	r1, r6, r3
 800595a:	fb03 6711 	mls	r7, r3, r1, r6
 800595e:	5dc7      	ldrb	r7, [r0, r7]
 8005960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005964:	4637      	mov	r7, r6
 8005966:	42bb      	cmp	r3, r7
 8005968:	460e      	mov	r6, r1
 800596a:	d9f4      	bls.n	8005956 <_printf_i+0x11a>
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10b      	bne.n	8005988 <_printf_i+0x14c>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	07de      	lsls	r6, r3, #31
 8005974:	d508      	bpl.n	8005988 <_printf_i+0x14c>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	6861      	ldr	r1, [r4, #4]
 800597a:	4299      	cmp	r1, r3
 800597c:	bfde      	ittt	le
 800597e:	2330      	movle	r3, #48	; 0x30
 8005980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005988:	1b52      	subs	r2, r2, r5
 800598a:	6122      	str	r2, [r4, #16]
 800598c:	f8cd a000 	str.w	sl, [sp]
 8005990:	464b      	mov	r3, r9
 8005992:	aa03      	add	r2, sp, #12
 8005994:	4621      	mov	r1, r4
 8005996:	4640      	mov	r0, r8
 8005998:	f7ff fee2 	bl	8005760 <_printf_common>
 800599c:	3001      	adds	r0, #1
 800599e:	d14c      	bne.n	8005a3a <_printf_i+0x1fe>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	b004      	add	sp, #16
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	4835      	ldr	r0, [pc, #212]	; (8005a80 <_printf_i+0x244>)
 80059ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059b0:	6829      	ldr	r1, [r5, #0]
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059b8:	6029      	str	r1, [r5, #0]
 80059ba:	061d      	lsls	r5, r3, #24
 80059bc:	d514      	bpl.n	80059e8 <_printf_i+0x1ac>
 80059be:	07df      	lsls	r7, r3, #31
 80059c0:	bf44      	itt	mi
 80059c2:	f043 0320 	orrmi.w	r3, r3, #32
 80059c6:	6023      	strmi	r3, [r4, #0]
 80059c8:	b91e      	cbnz	r6, 80059d2 <_printf_i+0x196>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f023 0320 	bic.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	2310      	movs	r3, #16
 80059d4:	e7b0      	b.n	8005938 <_printf_i+0xfc>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	f043 0320 	orr.w	r3, r3, #32
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	2378      	movs	r3, #120	; 0x78
 80059e0:	4828      	ldr	r0, [pc, #160]	; (8005a84 <_printf_i+0x248>)
 80059e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e6:	e7e3      	b.n	80059b0 <_printf_i+0x174>
 80059e8:	0659      	lsls	r1, r3, #25
 80059ea:	bf48      	it	mi
 80059ec:	b2b6      	uxthmi	r6, r6
 80059ee:	e7e6      	b.n	80059be <_printf_i+0x182>
 80059f0:	4615      	mov	r5, r2
 80059f2:	e7bb      	b.n	800596c <_printf_i+0x130>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	6826      	ldr	r6, [r4, #0]
 80059f8:	6961      	ldr	r1, [r4, #20]
 80059fa:	1d18      	adds	r0, r3, #4
 80059fc:	6028      	str	r0, [r5, #0]
 80059fe:	0635      	lsls	r5, r6, #24
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0x1cc>
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0x1d2>
 8005a08:	0670      	lsls	r0, r6, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0x1c8>
 8005a0c:	8019      	strh	r1, [r3, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	4615      	mov	r5, r2
 8005a14:	e7ba      	b.n	800598c <_printf_i+0x150>
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	1d1a      	adds	r2, r3, #4
 8005a1a:	602a      	str	r2, [r5, #0]
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	2100      	movs	r1, #0
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7fa fbf4 	bl	8000210 <memchr>
 8005a28:	b108      	cbz	r0, 8005a2e <_printf_i+0x1f2>
 8005a2a:	1b40      	subs	r0, r0, r5
 8005a2c:	6060      	str	r0, [r4, #4]
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	e7a8      	b.n	800598c <_printf_i+0x150>
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d0ab      	beq.n	80059a0 <_printf_i+0x164>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	d413      	bmi.n	8005a76 <_printf_i+0x23a>
 8005a4e:	68e0      	ldr	r0, [r4, #12]
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	4298      	cmp	r0, r3
 8005a54:	bfb8      	it	lt
 8005a56:	4618      	movlt	r0, r3
 8005a58:	e7a4      	b.n	80059a4 <_printf_i+0x168>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4640      	mov	r0, r8
 8005a62:	47d0      	blx	sl
 8005a64:	3001      	adds	r0, #1
 8005a66:	d09b      	beq.n	80059a0 <_printf_i+0x164>
 8005a68:	3501      	adds	r5, #1
 8005a6a:	68e3      	ldr	r3, [r4, #12]
 8005a6c:	9903      	ldr	r1, [sp, #12]
 8005a6e:	1a5b      	subs	r3, r3, r1
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	dcf2      	bgt.n	8005a5a <_printf_i+0x21e>
 8005a74:	e7eb      	b.n	8005a4e <_printf_i+0x212>
 8005a76:	2500      	movs	r5, #0
 8005a78:	f104 0619 	add.w	r6, r4, #25
 8005a7c:	e7f5      	b.n	8005a6a <_printf_i+0x22e>
 8005a7e:	bf00      	nop
 8005a80:	080084ad 	.word	0x080084ad
 8005a84:	080084be 	.word	0x080084be

08005a88 <_sbrk_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4d06      	ldr	r5, [pc, #24]	; (8005aa4 <_sbrk_r+0x1c>)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4604      	mov	r4, r0
 8005a90:	4608      	mov	r0, r1
 8005a92:	602b      	str	r3, [r5, #0]
 8005a94:	f7fc fcc2 	bl	800241c <_sbrk>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d102      	bne.n	8005aa2 <_sbrk_r+0x1a>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b103      	cbz	r3, 8005aa2 <_sbrk_r+0x1a>
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
 8005aa4:	200002e4 	.word	0x200002e4

08005aa8 <__sread>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	460c      	mov	r4, r1
 8005aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab0:	f000 fa6e 	bl	8005f90 <_read_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	bfab      	itete	ge
 8005ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aba:	89a3      	ldrhlt	r3, [r4, #12]
 8005abc:	181b      	addge	r3, r3, r0
 8005abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ac2:	bfac      	ite	ge
 8005ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ac6:	81a3      	strhlt	r3, [r4, #12]
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <__swrite>:
 8005aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ace:	461f      	mov	r7, r3
 8005ad0:	898b      	ldrh	r3, [r1, #12]
 8005ad2:	05db      	lsls	r3, r3, #23
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	4616      	mov	r6, r2
 8005ada:	d505      	bpl.n	8005ae8 <__swrite+0x1e>
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f000 f9d0 	bl	8005e88 <_lseek_r>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	4628      	mov	r0, r5
 8005afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	f000 b869 	b.w	8005bd4 <_write_r>

08005b02 <__sseek>:
 8005b02:	b510      	push	{r4, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0a:	f000 f9bd 	bl	8005e88 <_lseek_r>
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	bf15      	itete	ne
 8005b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b1e:	81a3      	strheq	r3, [r4, #12]
 8005b20:	bf18      	it	ne
 8005b22:	81a3      	strhne	r3, [r4, #12]
 8005b24:	bd10      	pop	{r4, pc}

08005b26 <__sclose>:
 8005b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2a:	f000 b8db 	b.w	8005ce4 <_close_r>
	...

08005b30 <__swbuf_r>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	460e      	mov	r6, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	4605      	mov	r5, r0
 8005b38:	b118      	cbz	r0, 8005b42 <__swbuf_r+0x12>
 8005b3a:	6983      	ldr	r3, [r0, #24]
 8005b3c:	b90b      	cbnz	r3, 8005b42 <__swbuf_r+0x12>
 8005b3e:	f7ff fb1b 	bl	8005178 <__sinit>
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <__swbuf_r+0x98>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d12b      	bne.n	8005ba0 <__swbuf_r+0x70>
 8005b48:	686c      	ldr	r4, [r5, #4]
 8005b4a:	69a3      	ldr	r3, [r4, #24]
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	071a      	lsls	r2, r3, #28
 8005b52:	d52f      	bpl.n	8005bb4 <__swbuf_r+0x84>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	b36b      	cbz	r3, 8005bb4 <__swbuf_r+0x84>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	6820      	ldr	r0, [r4, #0]
 8005b5c:	1ac0      	subs	r0, r0, r3
 8005b5e:	6963      	ldr	r3, [r4, #20]
 8005b60:	b2f6      	uxtb	r6, r6
 8005b62:	4283      	cmp	r3, r0
 8005b64:	4637      	mov	r7, r6
 8005b66:	dc04      	bgt.n	8005b72 <__swbuf_r+0x42>
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 f950 	bl	8005e10 <_fflush_r>
 8005b70:	bb30      	cbnz	r0, 8005bc0 <__swbuf_r+0x90>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	701e      	strb	r6, [r3, #0]
 8005b80:	6963      	ldr	r3, [r4, #20]
 8005b82:	3001      	adds	r0, #1
 8005b84:	4283      	cmp	r3, r0
 8005b86:	d004      	beq.n	8005b92 <__swbuf_r+0x62>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	07db      	lsls	r3, r3, #31
 8005b8c:	d506      	bpl.n	8005b9c <__swbuf_r+0x6c>
 8005b8e:	2e0a      	cmp	r6, #10
 8005b90:	d104      	bne.n	8005b9c <__swbuf_r+0x6c>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 f93b 	bl	8005e10 <_fflush_r>
 8005b9a:	b988      	cbnz	r0, 8005bc0 <__swbuf_r+0x90>
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <__swbuf_r+0x9c>)
 8005ba2:	429c      	cmp	r4, r3
 8005ba4:	d101      	bne.n	8005baa <__swbuf_r+0x7a>
 8005ba6:	68ac      	ldr	r4, [r5, #8]
 8005ba8:	e7cf      	b.n	8005b4a <__swbuf_r+0x1a>
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <__swbuf_r+0xa0>)
 8005bac:	429c      	cmp	r4, r3
 8005bae:	bf08      	it	eq
 8005bb0:	68ec      	ldreq	r4, [r5, #12]
 8005bb2:	e7ca      	b.n	8005b4a <__swbuf_r+0x1a>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f81e 	bl	8005bf8 <__swsetup_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d0cb      	beq.n	8005b58 <__swbuf_r+0x28>
 8005bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8005bc4:	e7ea      	b.n	8005b9c <__swbuf_r+0x6c>
 8005bc6:	bf00      	nop
 8005bc8:	0800845c 	.word	0x0800845c
 8005bcc:	0800847c 	.word	0x0800847c
 8005bd0:	0800843c 	.word	0x0800843c

08005bd4 <_write_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d07      	ldr	r5, [pc, #28]	; (8005bf4 <_write_r+0x20>)
 8005bd8:	4604      	mov	r4, r0
 8005bda:	4608      	mov	r0, r1
 8005bdc:	4611      	mov	r1, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fc fbc9 	bl	800237a <_write>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_write_r+0x1e>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_write_r+0x1e>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200002e4 	.word	0x200002e4

08005bf8 <__swsetup_r>:
 8005bf8:	4b32      	ldr	r3, [pc, #200]	; (8005cc4 <__swsetup_r+0xcc>)
 8005bfa:	b570      	push	{r4, r5, r6, lr}
 8005bfc:	681d      	ldr	r5, [r3, #0]
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	b125      	cbz	r5, 8005c0e <__swsetup_r+0x16>
 8005c04:	69ab      	ldr	r3, [r5, #24]
 8005c06:	b913      	cbnz	r3, 8005c0e <__swsetup_r+0x16>
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f7ff fab5 	bl	8005178 <__sinit>
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <__swsetup_r+0xd0>)
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d10f      	bne.n	8005c34 <__swsetup_r+0x3c>
 8005c14:	686c      	ldr	r4, [r5, #4]
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c1c:	0719      	lsls	r1, r3, #28
 8005c1e:	d42c      	bmi.n	8005c7a <__swsetup_r+0x82>
 8005c20:	06dd      	lsls	r5, r3, #27
 8005c22:	d411      	bmi.n	8005c48 <__swsetup_r+0x50>
 8005c24:	2309      	movs	r3, #9
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c2c:	81a3      	strh	r3, [r4, #12]
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c32:	e03e      	b.n	8005cb2 <__swsetup_r+0xba>
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <__swsetup_r+0xd4>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <__swsetup_r+0x46>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7eb      	b.n	8005c16 <__swsetup_r+0x1e>
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <__swsetup_r+0xd8>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7e6      	b.n	8005c16 <__swsetup_r+0x1e>
 8005c48:	0758      	lsls	r0, r3, #29
 8005c4a:	d512      	bpl.n	8005c72 <__swsetup_r+0x7a>
 8005c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4e:	b141      	cbz	r1, 8005c62 <__swsetup_r+0x6a>
 8005c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d002      	beq.n	8005c5e <__swsetup_r+0x66>
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f7ff fb47 	bl	80052ec <_free_r>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6363      	str	r3, [r4, #52]	; 0x34
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c68:	81a3      	strh	r3, [r4, #12]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6063      	str	r3, [r4, #4]
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f043 0308 	orr.w	r3, r3, #8
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	b94b      	cbnz	r3, 8005c92 <__swsetup_r+0x9a>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c88:	d003      	beq.n	8005c92 <__swsetup_r+0x9a>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f933 	bl	8005ef8 <__smakebuf_r>
 8005c92:	89a0      	ldrh	r0, [r4, #12]
 8005c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c98:	f010 0301 	ands.w	r3, r0, #1
 8005c9c:	d00a      	beq.n	8005cb4 <__swsetup_r+0xbc>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	6963      	ldr	r3, [r4, #20]
 8005ca4:	425b      	negs	r3, r3
 8005ca6:	61a3      	str	r3, [r4, #24]
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	b943      	cbnz	r3, 8005cbe <__swsetup_r+0xc6>
 8005cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cb0:	d1ba      	bne.n	8005c28 <__swsetup_r+0x30>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	0781      	lsls	r1, r0, #30
 8005cb6:	bf58      	it	pl
 8005cb8:	6963      	ldrpl	r3, [r4, #20]
 8005cba:	60a3      	str	r3, [r4, #8]
 8005cbc:	e7f4      	b.n	8005ca8 <__swsetup_r+0xb0>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e7f7      	b.n	8005cb2 <__swsetup_r+0xba>
 8005cc2:	bf00      	nop
 8005cc4:	2000001c 	.word	0x2000001c
 8005cc8:	0800845c 	.word	0x0800845c
 8005ccc:	0800847c 	.word	0x0800847c
 8005cd0:	0800843c 	.word	0x0800843c

08005cd4 <abort>:
 8005cd4:	b508      	push	{r3, lr}
 8005cd6:	2006      	movs	r0, #6
 8005cd8:	f000 f994 	bl	8006004 <raise>
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f7fc fb25 	bl	800232c <_exit>
	...

08005ce4 <_close_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	; (8005d00 <_close_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fc fb5f 	bl	80023b2 <_close>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_close_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_close_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	200002e4 	.word	0x200002e4

08005d04 <__sflush_r>:
 8005d04:	898a      	ldrh	r2, [r1, #12]
 8005d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	0710      	lsls	r0, r2, #28
 8005d0e:	460c      	mov	r4, r1
 8005d10:	d458      	bmi.n	8005dc4 <__sflush_r+0xc0>
 8005d12:	684b      	ldr	r3, [r1, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	dc05      	bgt.n	8005d24 <__sflush_r+0x20>
 8005d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	dc02      	bgt.n	8005d24 <__sflush_r+0x20>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d26:	2e00      	cmp	r6, #0
 8005d28:	d0f9      	beq.n	8005d1e <__sflush_r+0x1a>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d30:	682f      	ldr	r7, [r5, #0]
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	d032      	beq.n	8005d9c <__sflush_r+0x98>
 8005d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	075a      	lsls	r2, r3, #29
 8005d3c:	d505      	bpl.n	8005d4a <__sflush_r+0x46>
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	1ac0      	subs	r0, r0, r3
 8005d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d44:	b10b      	cbz	r3, 8005d4a <__sflush_r+0x46>
 8005d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d48:	1ac0      	subs	r0, r0, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d50:	6a21      	ldr	r1, [r4, #32]
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b0      	blx	r6
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	d106      	bne.n	8005d6a <__sflush_r+0x66>
 8005d5c:	6829      	ldr	r1, [r5, #0]
 8005d5e:	291d      	cmp	r1, #29
 8005d60:	d82c      	bhi.n	8005dbc <__sflush_r+0xb8>
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <__sflush_r+0x108>)
 8005d64:	40ca      	lsrs	r2, r1
 8005d66:	07d6      	lsls	r6, r2, #31
 8005d68:	d528      	bpl.n	8005dbc <__sflush_r+0xb8>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	6062      	str	r2, [r4, #4]
 8005d6e:	04d9      	lsls	r1, r3, #19
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	d504      	bpl.n	8005d80 <__sflush_r+0x7c>
 8005d76:	1c42      	adds	r2, r0, #1
 8005d78:	d101      	bne.n	8005d7e <__sflush_r+0x7a>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	b903      	cbnz	r3, 8005d80 <__sflush_r+0x7c>
 8005d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8005d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d82:	602f      	str	r7, [r5, #0]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	d0ca      	beq.n	8005d1e <__sflush_r+0x1a>
 8005d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <__sflush_r+0x92>
 8005d90:	4628      	mov	r0, r5
 8005d92:	f7ff faab 	bl	80052ec <_free_r>
 8005d96:	2000      	movs	r0, #0
 8005d98:	6360      	str	r0, [r4, #52]	; 0x34
 8005d9a:	e7c1      	b.n	8005d20 <__sflush_r+0x1c>
 8005d9c:	6a21      	ldr	r1, [r4, #32]
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b0      	blx	r6
 8005da4:	1c41      	adds	r1, r0, #1
 8005da6:	d1c7      	bne.n	8005d38 <__sflush_r+0x34>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0c4      	beq.n	8005d38 <__sflush_r+0x34>
 8005dae:	2b1d      	cmp	r3, #29
 8005db0:	d001      	beq.n	8005db6 <__sflush_r+0xb2>
 8005db2:	2b16      	cmp	r3, #22
 8005db4:	d101      	bne.n	8005dba <__sflush_r+0xb6>
 8005db6:	602f      	str	r7, [r5, #0]
 8005db8:	e7b1      	b.n	8005d1e <__sflush_r+0x1a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc0:	81a3      	strh	r3, [r4, #12]
 8005dc2:	e7ad      	b.n	8005d20 <__sflush_r+0x1c>
 8005dc4:	690f      	ldr	r7, [r1, #16]
 8005dc6:	2f00      	cmp	r7, #0
 8005dc8:	d0a9      	beq.n	8005d1e <__sflush_r+0x1a>
 8005dca:	0793      	lsls	r3, r2, #30
 8005dcc:	680e      	ldr	r6, [r1, #0]
 8005dce:	bf08      	it	eq
 8005dd0:	694b      	ldreq	r3, [r1, #20]
 8005dd2:	600f      	str	r7, [r1, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	eba6 0807 	sub.w	r8, r6, r7
 8005ddc:	608b      	str	r3, [r1, #8]
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	dd9c      	ble.n	8005d1e <__sflush_r+0x1a>
 8005de4:	6a21      	ldr	r1, [r4, #32]
 8005de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005de8:	4643      	mov	r3, r8
 8005dea:	463a      	mov	r2, r7
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b0      	blx	r6
 8005df0:	2800      	cmp	r0, #0
 8005df2:	dc06      	bgt.n	8005e02 <__sflush_r+0xfe>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	e78e      	b.n	8005d20 <__sflush_r+0x1c>
 8005e02:	4407      	add	r7, r0
 8005e04:	eba8 0800 	sub.w	r8, r8, r0
 8005e08:	e7e9      	b.n	8005dde <__sflush_r+0xda>
 8005e0a:	bf00      	nop
 8005e0c:	20400001 	.word	0x20400001

08005e10 <_fflush_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	4605      	mov	r5, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	b913      	cbnz	r3, 8005e20 <_fflush_r+0x10>
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	b118      	cbz	r0, 8005e2a <_fflush_r+0x1a>
 8005e22:	6983      	ldr	r3, [r0, #24]
 8005e24:	b90b      	cbnz	r3, 8005e2a <_fflush_r+0x1a>
 8005e26:	f7ff f9a7 	bl	8005178 <__sinit>
 8005e2a:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <_fflush_r+0x6c>)
 8005e2c:	429c      	cmp	r4, r3
 8005e2e:	d11b      	bne.n	8005e68 <_fflush_r+0x58>
 8005e30:	686c      	ldr	r4, [r5, #4]
 8005e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0ef      	beq.n	8005e1a <_fflush_r+0xa>
 8005e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e3c:	07d0      	lsls	r0, r2, #31
 8005e3e:	d404      	bmi.n	8005e4a <_fflush_r+0x3a>
 8005e40:	0599      	lsls	r1, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_fflush_r+0x3a>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f7ff fa47 	bl	80052d8 <__retarget_lock_acquire_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	f7ff ff59 	bl	8005d04 <__sflush_r>
 8005e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e54:	07da      	lsls	r2, r3, #31
 8005e56:	4605      	mov	r5, r0
 8005e58:	d4e0      	bmi.n	8005e1c <_fflush_r+0xc>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d4dd      	bmi.n	8005e1c <_fflush_r+0xc>
 8005e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e62:	f7ff fa3a 	bl	80052da <__retarget_lock_release_recursive>
 8005e66:	e7d9      	b.n	8005e1c <_fflush_r+0xc>
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <_fflush_r+0x70>)
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d101      	bne.n	8005e72 <_fflush_r+0x62>
 8005e6e:	68ac      	ldr	r4, [r5, #8]
 8005e70:	e7df      	b.n	8005e32 <_fflush_r+0x22>
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <_fflush_r+0x74>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	bf08      	it	eq
 8005e78:	68ec      	ldreq	r4, [r5, #12]
 8005e7a:	e7da      	b.n	8005e32 <_fflush_r+0x22>
 8005e7c:	0800845c 	.word	0x0800845c
 8005e80:	0800847c 	.word	0x0800847c
 8005e84:	0800843c 	.word	0x0800843c

08005e88 <_lseek_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d07      	ldr	r5, [pc, #28]	; (8005ea8 <_lseek_r+0x20>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fc fab2 	bl	8002400 <_lseek>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_lseek_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_lseek_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	200002e4 	.word	0x200002e4

08005eac <__swhatbuf_r>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	460e      	mov	r6, r1
 8005eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	b096      	sub	sp, #88	; 0x58
 8005eb8:	4614      	mov	r4, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	da08      	bge.n	8005ed0 <__swhatbuf_r+0x24>
 8005ebe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	061a      	lsls	r2, r3, #24
 8005ec8:	d410      	bmi.n	8005eec <__swhatbuf_r+0x40>
 8005eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ece:	e00e      	b.n	8005eee <__swhatbuf_r+0x42>
 8005ed0:	466a      	mov	r2, sp
 8005ed2:	f000 f8b3 	bl	800603c <_fstat_r>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	dbf1      	blt.n	8005ebe <__swhatbuf_r+0x12>
 8005eda:	9a01      	ldr	r2, [sp, #4]
 8005edc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ee4:	425a      	negs	r2, r3
 8005ee6:	415a      	adcs	r2, r3
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	e7ee      	b.n	8005eca <__swhatbuf_r+0x1e>
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	2000      	movs	r0, #0
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	b016      	add	sp, #88	; 0x58
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ef8 <__smakebuf_r>:
 8005ef8:	898b      	ldrh	r3, [r1, #12]
 8005efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005efc:	079d      	lsls	r5, r3, #30
 8005efe:	4606      	mov	r6, r0
 8005f00:	460c      	mov	r4, r1
 8005f02:	d507      	bpl.n	8005f14 <__smakebuf_r+0x1c>
 8005f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	6163      	str	r3, [r4, #20]
 8005f10:	b002      	add	sp, #8
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	ab01      	add	r3, sp, #4
 8005f16:	466a      	mov	r2, sp
 8005f18:	f7ff ffc8 	bl	8005eac <__swhatbuf_r>
 8005f1c:	9900      	ldr	r1, [sp, #0]
 8005f1e:	4605      	mov	r5, r0
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7ff fa4f 	bl	80053c4 <_malloc_r>
 8005f26:	b948      	cbnz	r0, 8005f3c <__smakebuf_r+0x44>
 8005f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2c:	059a      	lsls	r2, r3, #22
 8005f2e:	d4ef      	bmi.n	8005f10 <__smakebuf_r+0x18>
 8005f30:	f023 0303 	bic.w	r3, r3, #3
 8005f34:	f043 0302 	orr.w	r3, r3, #2
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	e7e3      	b.n	8005f04 <__smakebuf_r+0xc>
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <__smakebuf_r+0x7c>)
 8005f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	6020      	str	r0, [r4, #0]
 8005f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	6163      	str	r3, [r4, #20]
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	6120      	str	r0, [r4, #16]
 8005f52:	b15b      	cbz	r3, 8005f6c <__smakebuf_r+0x74>
 8005f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f881 	bl	8006060 <_isatty_r>
 8005f5e:	b128      	cbz	r0, 8005f6c <__smakebuf_r+0x74>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	89a0      	ldrh	r0, [r4, #12]
 8005f6e:	4305      	orrs	r5, r0
 8005f70:	81a5      	strh	r5, [r4, #12]
 8005f72:	e7cd      	b.n	8005f10 <__smakebuf_r+0x18>
 8005f74:	08005111 	.word	0x08005111

08005f78 <__malloc_lock>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__malloc_lock+0x8>)
 8005f7a:	f7ff b9ad 	b.w	80052d8 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200002d8 	.word	0x200002d8

08005f84 <__malloc_unlock>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__malloc_unlock+0x8>)
 8005f86:	f7ff b9a8 	b.w	80052da <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200002d8 	.word	0x200002d8

08005f90 <_read_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d07      	ldr	r5, [pc, #28]	; (8005fb0 <_read_r+0x20>)
 8005f94:	4604      	mov	r4, r0
 8005f96:	4608      	mov	r0, r1
 8005f98:	4611      	mov	r1, r2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	602a      	str	r2, [r5, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f7fc f9ce 	bl	8002340 <_read>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_read_r+0x1e>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_read_r+0x1e>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	200002e4 	.word	0x200002e4

08005fb4 <_raise_r>:
 8005fb4:	291f      	cmp	r1, #31
 8005fb6:	b538      	push	{r3, r4, r5, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	460d      	mov	r5, r1
 8005fbc:	d904      	bls.n	8005fc8 <_raise_r+0x14>
 8005fbe:	2316      	movs	r3, #22
 8005fc0:	6003      	str	r3, [r0, #0]
 8005fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fca:	b112      	cbz	r2, 8005fd2 <_raise_r+0x1e>
 8005fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fd0:	b94b      	cbnz	r3, 8005fe6 <_raise_r+0x32>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f830 	bl	8006038 <_getpid_r>
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4601      	mov	r1, r0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe2:	f000 b817 	b.w	8006014 <_kill_r>
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d00a      	beq.n	8006000 <_raise_r+0x4c>
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	d103      	bne.n	8005ff6 <_raise_r+0x42>
 8005fee:	2316      	movs	r3, #22
 8005ff0:	6003      	str	r3, [r0, #0]
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e7e7      	b.n	8005fc6 <_raise_r+0x12>
 8005ff6:	2400      	movs	r4, #0
 8005ff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	4798      	blx	r3
 8006000:	2000      	movs	r0, #0
 8006002:	e7e0      	b.n	8005fc6 <_raise_r+0x12>

08006004 <raise>:
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <raise+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f7ff bfd3 	b.w	8005fb4 <_raise_r>
 800600e:	bf00      	nop
 8006010:	2000001c 	.word	0x2000001c

08006014 <_kill_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d07      	ldr	r5, [pc, #28]	; (8006034 <_kill_r+0x20>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	f7fc f973 	bl	800230c <_kill>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	d102      	bne.n	8006030 <_kill_r+0x1c>
 800602a:	682b      	ldr	r3, [r5, #0]
 800602c:	b103      	cbz	r3, 8006030 <_kill_r+0x1c>
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	bd38      	pop	{r3, r4, r5, pc}
 8006032:	bf00      	nop
 8006034:	200002e4 	.word	0x200002e4

08006038 <_getpid_r>:
 8006038:	f7fc b960 	b.w	80022fc <_getpid>

0800603c <_fstat_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d07      	ldr	r5, [pc, #28]	; (800605c <_fstat_r+0x20>)
 8006040:	2300      	movs	r3, #0
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	4611      	mov	r1, r2
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	f7fc f9be 	bl	80023ca <_fstat>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d102      	bne.n	8006058 <_fstat_r+0x1c>
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	b103      	cbz	r3, 8006058 <_fstat_r+0x1c>
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	bd38      	pop	{r3, r4, r5, pc}
 800605a:	bf00      	nop
 800605c:	200002e4 	.word	0x200002e4

08006060 <_isatty_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_isatty_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fc f9bd 	bl	80023ea <_isatty>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_isatty_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_isatty_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	200002e4 	.word	0x200002e4

08006080 <cos>:
 8006080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006082:	ec53 2b10 	vmov	r2, r3, d0
 8006086:	4826      	ldr	r0, [pc, #152]	; (8006120 <cos+0xa0>)
 8006088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800608c:	4281      	cmp	r1, r0
 800608e:	dc06      	bgt.n	800609e <cos+0x1e>
 8006090:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006118 <cos+0x98>
 8006094:	b005      	add	sp, #20
 8006096:	f85d eb04 	ldr.w	lr, [sp], #4
 800609a:	f001 bb3d 	b.w	8007718 <__kernel_cos>
 800609e:	4821      	ldr	r0, [pc, #132]	; (8006124 <cos+0xa4>)
 80060a0:	4281      	cmp	r1, r0
 80060a2:	dd09      	ble.n	80060b8 <cos+0x38>
 80060a4:	ee10 0a10 	vmov	r0, s0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fa f905 	bl	80002b8 <__aeabi_dsub>
 80060ae:	ec41 0b10 	vmov	d0, r0, r1
 80060b2:	b005      	add	sp, #20
 80060b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80060b8:	4668      	mov	r0, sp
 80060ba:	f001 f86d 	bl	8007198 <__ieee754_rem_pio2>
 80060be:	f000 0003 	and.w	r0, r0, #3
 80060c2:	2801      	cmp	r0, #1
 80060c4:	d00b      	beq.n	80060de <cos+0x5e>
 80060c6:	2802      	cmp	r0, #2
 80060c8:	d016      	beq.n	80060f8 <cos+0x78>
 80060ca:	b9e0      	cbnz	r0, 8006106 <cos+0x86>
 80060cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060d0:	ed9d 0b00 	vldr	d0, [sp]
 80060d4:	f001 fb20 	bl	8007718 <__kernel_cos>
 80060d8:	ec51 0b10 	vmov	r0, r1, d0
 80060dc:	e7e7      	b.n	80060ae <cos+0x2e>
 80060de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060e2:	ed9d 0b00 	vldr	d0, [sp]
 80060e6:	f001 ff2f 	bl	8007f48 <__kernel_sin>
 80060ea:	ec53 2b10 	vmov	r2, r3, d0
 80060ee:	ee10 0a10 	vmov	r0, s0
 80060f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80060f6:	e7da      	b.n	80060ae <cos+0x2e>
 80060f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060fc:	ed9d 0b00 	vldr	d0, [sp]
 8006100:	f001 fb0a 	bl	8007718 <__kernel_cos>
 8006104:	e7f1      	b.n	80060ea <cos+0x6a>
 8006106:	ed9d 1b02 	vldr	d1, [sp, #8]
 800610a:	ed9d 0b00 	vldr	d0, [sp]
 800610e:	2001      	movs	r0, #1
 8006110:	f001 ff1a 	bl	8007f48 <__kernel_sin>
 8006114:	e7e0      	b.n	80060d8 <cos+0x58>
 8006116:	bf00      	nop
	...
 8006120:	3fe921fb 	.word	0x3fe921fb
 8006124:	7fefffff 	.word	0x7fefffff

08006128 <round>:
 8006128:	ec51 0b10 	vmov	r0, r1, d0
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006132:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006136:	2c13      	cmp	r4, #19
 8006138:	ee10 2a10 	vmov	r2, s0
 800613c:	460b      	mov	r3, r1
 800613e:	dc19      	bgt.n	8006174 <round+0x4c>
 8006140:	2c00      	cmp	r4, #0
 8006142:	da09      	bge.n	8006158 <round+0x30>
 8006144:	3401      	adds	r4, #1
 8006146:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800614a:	d103      	bne.n	8006154 <round+0x2c>
 800614c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006150:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006154:	2200      	movs	r2, #0
 8006156:	e028      	b.n	80061aa <round+0x82>
 8006158:	4d15      	ldr	r5, [pc, #84]	; (80061b0 <round+0x88>)
 800615a:	4125      	asrs	r5, r4
 800615c:	ea01 0605 	and.w	r6, r1, r5
 8006160:	4332      	orrs	r2, r6
 8006162:	d00e      	beq.n	8006182 <round+0x5a>
 8006164:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006168:	fa42 f404 	asr.w	r4, r2, r4
 800616c:	4423      	add	r3, r4
 800616e:	ea23 0305 	bic.w	r3, r3, r5
 8006172:	e7ef      	b.n	8006154 <round+0x2c>
 8006174:	2c33      	cmp	r4, #51	; 0x33
 8006176:	dd07      	ble.n	8006188 <round+0x60>
 8006178:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800617c:	d101      	bne.n	8006182 <round+0x5a>
 800617e:	f7fa f89d 	bl	80002bc <__adddf3>
 8006182:	ec41 0b10 	vmov	d0, r0, r1
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800618c:	f04f 35ff 	mov.w	r5, #4294967295
 8006190:	40f5      	lsrs	r5, r6
 8006192:	4228      	tst	r0, r5
 8006194:	d0f5      	beq.n	8006182 <round+0x5a>
 8006196:	2101      	movs	r1, #1
 8006198:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800619c:	fa01 f404 	lsl.w	r4, r1, r4
 80061a0:	1912      	adds	r2, r2, r4
 80061a2:	bf28      	it	cs
 80061a4:	185b      	addcs	r3, r3, r1
 80061a6:	ea22 0205 	bic.w	r2, r2, r5
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	e7e8      	b.n	8006182 <round+0x5a>
 80061b0:	000fffff 	.word	0x000fffff
 80061b4:	00000000 	.word	0x00000000

080061b8 <sin>:
 80061b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061ba:	ec53 2b10 	vmov	r2, r3, d0
 80061be:	4828      	ldr	r0, [pc, #160]	; (8006260 <sin+0xa8>)
 80061c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061c4:	4281      	cmp	r1, r0
 80061c6:	dc07      	bgt.n	80061d8 <sin+0x20>
 80061c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006258 <sin+0xa0>
 80061cc:	2000      	movs	r0, #0
 80061ce:	b005      	add	sp, #20
 80061d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d4:	f001 beb8 	b.w	8007f48 <__kernel_sin>
 80061d8:	4822      	ldr	r0, [pc, #136]	; (8006264 <sin+0xac>)
 80061da:	4281      	cmp	r1, r0
 80061dc:	dd09      	ble.n	80061f2 <sin+0x3a>
 80061de:	ee10 0a10 	vmov	r0, s0
 80061e2:	4619      	mov	r1, r3
 80061e4:	f7fa f868 	bl	80002b8 <__aeabi_dsub>
 80061e8:	ec41 0b10 	vmov	d0, r0, r1
 80061ec:	b005      	add	sp, #20
 80061ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80061f2:	4668      	mov	r0, sp
 80061f4:	f000 ffd0 	bl	8007198 <__ieee754_rem_pio2>
 80061f8:	f000 0003 	and.w	r0, r0, #3
 80061fc:	2801      	cmp	r0, #1
 80061fe:	d00c      	beq.n	800621a <sin+0x62>
 8006200:	2802      	cmp	r0, #2
 8006202:	d011      	beq.n	8006228 <sin+0x70>
 8006204:	b9f0      	cbnz	r0, 8006244 <sin+0x8c>
 8006206:	ed9d 1b02 	vldr	d1, [sp, #8]
 800620a:	ed9d 0b00 	vldr	d0, [sp]
 800620e:	2001      	movs	r0, #1
 8006210:	f001 fe9a 	bl	8007f48 <__kernel_sin>
 8006214:	ec51 0b10 	vmov	r0, r1, d0
 8006218:	e7e6      	b.n	80061e8 <sin+0x30>
 800621a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800621e:	ed9d 0b00 	vldr	d0, [sp]
 8006222:	f001 fa79 	bl	8007718 <__kernel_cos>
 8006226:	e7f5      	b.n	8006214 <sin+0x5c>
 8006228:	ed9d 1b02 	vldr	d1, [sp, #8]
 800622c:	ed9d 0b00 	vldr	d0, [sp]
 8006230:	2001      	movs	r0, #1
 8006232:	f001 fe89 	bl	8007f48 <__kernel_sin>
 8006236:	ec53 2b10 	vmov	r2, r3, d0
 800623a:	ee10 0a10 	vmov	r0, s0
 800623e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006242:	e7d1      	b.n	80061e8 <sin+0x30>
 8006244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006248:	ed9d 0b00 	vldr	d0, [sp]
 800624c:	f001 fa64 	bl	8007718 <__kernel_cos>
 8006250:	e7f1      	b.n	8006236 <sin+0x7e>
 8006252:	bf00      	nop
 8006254:	f3af 8000 	nop.w
	...
 8006260:	3fe921fb 	.word	0x3fe921fb
 8006264:	7fefffff 	.word	0x7fefffff

08006268 <exp>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	ed2d 8b02 	vpush	{d8}
 800626e:	ec55 4b10 	vmov	r4, r5, d0
 8006272:	f000 f8dd 	bl	8006430 <__ieee754_exp>
 8006276:	eeb0 8a40 	vmov.f32	s16, s0
 800627a:	eef0 8a60 	vmov.f32	s17, s1
 800627e:	ec45 4b10 	vmov	d0, r4, r5
 8006282:	f001 ff58 	bl	8008136 <finite>
 8006286:	b168      	cbz	r0, 80062a4 <exp+0x3c>
 8006288:	a317      	add	r3, pc, #92	; (adr r3, 80062e8 <exp+0x80>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa fc59 	bl	8000b48 <__aeabi_dcmpgt>
 8006296:	b160      	cbz	r0, 80062b2 <exp+0x4a>
 8006298:	f7fe fe7a 	bl	8004f90 <__errno>
 800629c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80062d8 <exp+0x70>
 80062a0:	2322      	movs	r3, #34	; 0x22
 80062a2:	6003      	str	r3, [r0, #0]
 80062a4:	eeb0 0a48 	vmov.f32	s0, s16
 80062a8:	eef0 0a68 	vmov.f32	s1, s17
 80062ac:	ecbd 8b02 	vpop	{d8}
 80062b0:	bd38      	pop	{r3, r4, r5, pc}
 80062b2:	a30f      	add	r3, pc, #60	; (adr r3, 80062f0 <exp+0x88>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7fa fc26 	bl	8000b0c <__aeabi_dcmplt>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d0ef      	beq.n	80062a4 <exp+0x3c>
 80062c4:	f7fe fe64 	bl	8004f90 <__errno>
 80062c8:	2322      	movs	r3, #34	; 0x22
 80062ca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80062e0 <exp+0x78>
 80062ce:	6003      	str	r3, [r0, #0]
 80062d0:	e7e8      	b.n	80062a4 <exp+0x3c>
 80062d2:	bf00      	nop
 80062d4:	f3af 8000 	nop.w
 80062d8:	00000000 	.word	0x00000000
 80062dc:	7ff00000 	.word	0x7ff00000
	...
 80062e8:	fefa39ef 	.word	0xfefa39ef
 80062ec:	40862e42 	.word	0x40862e42
 80062f0:	d52d3051 	.word	0xd52d3051
 80062f4:	c0874910 	.word	0xc0874910

080062f8 <pow>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	ed2d 8b02 	vpush	{d8}
 80062fe:	eeb0 8a40 	vmov.f32	s16, s0
 8006302:	eef0 8a60 	vmov.f32	s17, s1
 8006306:	ec55 4b11 	vmov	r4, r5, d1
 800630a:	f000 fa15 	bl	8006738 <__ieee754_pow>
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	ec57 6b10 	vmov	r6, r7, d0
 800631a:	f7fa fc1f 	bl	8000b5c <__aeabi_dcmpun>
 800631e:	2800      	cmp	r0, #0
 8006320:	d13b      	bne.n	800639a <pow+0xa2>
 8006322:	ec51 0b18 	vmov	r0, r1, d8
 8006326:	2200      	movs	r2, #0
 8006328:	2300      	movs	r3, #0
 800632a:	f7fa fbe5 	bl	8000af8 <__aeabi_dcmpeq>
 800632e:	b1b8      	cbz	r0, 8006360 <pow+0x68>
 8006330:	2200      	movs	r2, #0
 8006332:	2300      	movs	r3, #0
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7fa fbde 	bl	8000af8 <__aeabi_dcmpeq>
 800633c:	2800      	cmp	r0, #0
 800633e:	d146      	bne.n	80063ce <pow+0xd6>
 8006340:	ec45 4b10 	vmov	d0, r4, r5
 8006344:	f001 fef7 	bl	8008136 <finite>
 8006348:	b338      	cbz	r0, 800639a <pow+0xa2>
 800634a:	2200      	movs	r2, #0
 800634c:	2300      	movs	r3, #0
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7fa fbdb 	bl	8000b0c <__aeabi_dcmplt>
 8006356:	b300      	cbz	r0, 800639a <pow+0xa2>
 8006358:	f7fe fe1a 	bl	8004f90 <__errno>
 800635c:	2322      	movs	r3, #34	; 0x22
 800635e:	e01b      	b.n	8006398 <pow+0xa0>
 8006360:	ec47 6b10 	vmov	d0, r6, r7
 8006364:	f001 fee7 	bl	8008136 <finite>
 8006368:	b9e0      	cbnz	r0, 80063a4 <pow+0xac>
 800636a:	eeb0 0a48 	vmov.f32	s0, s16
 800636e:	eef0 0a68 	vmov.f32	s1, s17
 8006372:	f001 fee0 	bl	8008136 <finite>
 8006376:	b1a8      	cbz	r0, 80063a4 <pow+0xac>
 8006378:	ec45 4b10 	vmov	d0, r4, r5
 800637c:	f001 fedb 	bl	8008136 <finite>
 8006380:	b180      	cbz	r0, 80063a4 <pow+0xac>
 8006382:	4632      	mov	r2, r6
 8006384:	463b      	mov	r3, r7
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fbe7 	bl	8000b5c <__aeabi_dcmpun>
 800638e:	2800      	cmp	r0, #0
 8006390:	d0e2      	beq.n	8006358 <pow+0x60>
 8006392:	f7fe fdfd 	bl	8004f90 <__errno>
 8006396:	2321      	movs	r3, #33	; 0x21
 8006398:	6003      	str	r3, [r0, #0]
 800639a:	ecbd 8b02 	vpop	{d8}
 800639e:	ec47 6b10 	vmov	d0, r6, r7
 80063a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a4:	2200      	movs	r2, #0
 80063a6:	2300      	movs	r3, #0
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7fa fba4 	bl	8000af8 <__aeabi_dcmpeq>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d0f2      	beq.n	800639a <pow+0xa2>
 80063b4:	eeb0 0a48 	vmov.f32	s0, s16
 80063b8:	eef0 0a68 	vmov.f32	s1, s17
 80063bc:	f001 febb 	bl	8008136 <finite>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d0ea      	beq.n	800639a <pow+0xa2>
 80063c4:	ec45 4b10 	vmov	d0, r4, r5
 80063c8:	f001 feb5 	bl	8008136 <finite>
 80063cc:	e7c3      	b.n	8006356 <pow+0x5e>
 80063ce:	4f01      	ldr	r7, [pc, #4]	; (80063d4 <pow+0xdc>)
 80063d0:	2600      	movs	r6, #0
 80063d2:	e7e2      	b.n	800639a <pow+0xa2>
 80063d4:	3ff00000 	.word	0x3ff00000

080063d8 <sqrt>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	ed2d 8b02 	vpush	{d8}
 80063de:	ec55 4b10 	vmov	r4, r5, d0
 80063e2:	f001 f8e5 	bl	80075b0 <__ieee754_sqrt>
 80063e6:	4622      	mov	r2, r4
 80063e8:	462b      	mov	r3, r5
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	eeb0 8a40 	vmov.f32	s16, s0
 80063f2:	eef0 8a60 	vmov.f32	s17, s1
 80063f6:	f7fa fbb1 	bl	8000b5c <__aeabi_dcmpun>
 80063fa:	b990      	cbnz	r0, 8006422 <sqrt+0x4a>
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f7fa fb82 	bl	8000b0c <__aeabi_dcmplt>
 8006408:	b158      	cbz	r0, 8006422 <sqrt+0x4a>
 800640a:	f7fe fdc1 	bl	8004f90 <__errno>
 800640e:	2321      	movs	r3, #33	; 0x21
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	f7fa fa2f 	bl	800087c <__aeabi_ddiv>
 800641e:	ec41 0b18 	vmov	d8, r0, r1
 8006422:	eeb0 0a48 	vmov.f32	s0, s16
 8006426:	eef0 0a68 	vmov.f32	s1, s17
 800642a:	ecbd 8b02 	vpop	{d8}
 800642e:	bd38      	pop	{r3, r4, r5, pc}

08006430 <__ieee754_exp>:
 8006430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006434:	ec55 4b10 	vmov	r4, r5, d0
 8006438:	49b5      	ldr	r1, [pc, #724]	; (8006710 <__ieee754_exp+0x2e0>)
 800643a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800643e:	428b      	cmp	r3, r1
 8006440:	ed2d 8b04 	vpush	{d8-d9}
 8006444:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006448:	d93d      	bls.n	80064c6 <__ieee754_exp+0x96>
 800644a:	49b2      	ldr	r1, [pc, #712]	; (8006714 <__ieee754_exp+0x2e4>)
 800644c:	428b      	cmp	r3, r1
 800644e:	d918      	bls.n	8006482 <__ieee754_exp+0x52>
 8006450:	ee10 3a10 	vmov	r3, s0
 8006454:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8006458:	4313      	orrs	r3, r2
 800645a:	d009      	beq.n	8006470 <__ieee754_exp+0x40>
 800645c:	ee10 2a10 	vmov	r2, s0
 8006460:	462b      	mov	r3, r5
 8006462:	4620      	mov	r0, r4
 8006464:	4629      	mov	r1, r5
 8006466:	f7f9 ff29 	bl	80002bc <__adddf3>
 800646a:	4604      	mov	r4, r0
 800646c:	460d      	mov	r5, r1
 800646e:	e002      	b.n	8006476 <__ieee754_exp+0x46>
 8006470:	b10e      	cbz	r6, 8006476 <__ieee754_exp+0x46>
 8006472:	2400      	movs	r4, #0
 8006474:	2500      	movs	r5, #0
 8006476:	ecbd 8b04 	vpop	{d8-d9}
 800647a:	ec45 4b10 	vmov	d0, r4, r5
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	a38d      	add	r3, pc, #564	; (adr r3, 80066b8 <__ieee754_exp+0x288>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	ee10 0a10 	vmov	r0, s0
 800648c:	4629      	mov	r1, r5
 800648e:	f7fa fb5b 	bl	8000b48 <__aeabi_dcmpgt>
 8006492:	4607      	mov	r7, r0
 8006494:	b130      	cbz	r0, 80064a4 <__ieee754_exp+0x74>
 8006496:	ecbd 8b04 	vpop	{d8-d9}
 800649a:	2000      	movs	r0, #0
 800649c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	f001 be37 	b.w	8008112 <__math_oflow>
 80064a4:	a386      	add	r3, pc, #536	; (adr r3, 80066c0 <__ieee754_exp+0x290>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7fa fb2d 	bl	8000b0c <__aeabi_dcmplt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	f000 808b 	beq.w	80065ce <__ieee754_exp+0x19e>
 80064b8:	ecbd 8b04 	vpop	{d8-d9}
 80064bc:	4638      	mov	r0, r7
 80064be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c2:	f001 be1d 	b.w	8008100 <__math_uflow>
 80064c6:	4a94      	ldr	r2, [pc, #592]	; (8006718 <__ieee754_exp+0x2e8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	f240 80ac 	bls.w	8006626 <__ieee754_exp+0x1f6>
 80064ce:	4a93      	ldr	r2, [pc, #588]	; (800671c <__ieee754_exp+0x2ec>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d87c      	bhi.n	80065ce <__ieee754_exp+0x19e>
 80064d4:	4b92      	ldr	r3, [pc, #584]	; (8006720 <__ieee754_exp+0x2f0>)
 80064d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	ee10 0a10 	vmov	r0, s0
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 fee8 	bl	80002b8 <__aeabi_dsub>
 80064e8:	4b8e      	ldr	r3, [pc, #568]	; (8006724 <__ieee754_exp+0x2f4>)
 80064ea:	00f7      	lsls	r7, r6, #3
 80064ec:	443b      	add	r3, r7
 80064ee:	ed93 7b00 	vldr	d7, [r3]
 80064f2:	f1c6 0a01 	rsb	sl, r6, #1
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	ebaa 0a06 	sub.w	sl, sl, r6
 80064fe:	eeb0 8a47 	vmov.f32	s16, s14
 8006502:	eef0 8a67 	vmov.f32	s17, s15
 8006506:	ec53 2b18 	vmov	r2, r3, d8
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7f9 fed3 	bl	80002b8 <__aeabi_dsub>
 8006512:	4604      	mov	r4, r0
 8006514:	460d      	mov	r5, r1
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	f7fa f883 	bl	8000628 <__aeabi_dmul>
 8006522:	a369      	add	r3, pc, #420	; (adr r3, 80066c8 <__ieee754_exp+0x298>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	f7fa f87c 	bl	8000628 <__aeabi_dmul>
 8006530:	a367      	add	r3, pc, #412	; (adr r3, 80066d0 <__ieee754_exp+0x2a0>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7f9 febf 	bl	80002b8 <__aeabi_dsub>
 800653a:	4632      	mov	r2, r6
 800653c:	463b      	mov	r3, r7
 800653e:	f7fa f873 	bl	8000628 <__aeabi_dmul>
 8006542:	a365      	add	r3, pc, #404	; (adr r3, 80066d8 <__ieee754_exp+0x2a8>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 feb8 	bl	80002bc <__adddf3>
 800654c:	4632      	mov	r2, r6
 800654e:	463b      	mov	r3, r7
 8006550:	f7fa f86a 	bl	8000628 <__aeabi_dmul>
 8006554:	a362      	add	r3, pc, #392	; (adr r3, 80066e0 <__ieee754_exp+0x2b0>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 fead 	bl	80002b8 <__aeabi_dsub>
 800655e:	4632      	mov	r2, r6
 8006560:	463b      	mov	r3, r7
 8006562:	f7fa f861 	bl	8000628 <__aeabi_dmul>
 8006566:	a360      	add	r3, pc, #384	; (adr r3, 80066e8 <__ieee754_exp+0x2b8>)
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f7f9 fea6 	bl	80002bc <__adddf3>
 8006570:	4632      	mov	r2, r6
 8006572:	463b      	mov	r3, r7
 8006574:	f7fa f858 	bl	8000628 <__aeabi_dmul>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7f9 fe9a 	bl	80002b8 <__aeabi_dsub>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4606      	mov	r6, r0
 800658a:	460f      	mov	r7, r1
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f7fa f84a 	bl	8000628 <__aeabi_dmul>
 8006594:	ec41 0b19 	vmov	d9, r0, r1
 8006598:	f1ba 0f00 	cmp.w	sl, #0
 800659c:	d15d      	bne.n	800665a <__ieee754_exp+0x22a>
 800659e:	2200      	movs	r2, #0
 80065a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065a4:	4630      	mov	r0, r6
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7f9 fe86 	bl	80002b8 <__aeabi_dsub>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	ec51 0b19 	vmov	r0, r1, d9
 80065b4:	f7fa f962 	bl	800087c <__aeabi_ddiv>
 80065b8:	4622      	mov	r2, r4
 80065ba:	462b      	mov	r3, r5
 80065bc:	f7f9 fe7c 	bl	80002b8 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	2000      	movs	r0, #0
 80065c6:	4958      	ldr	r1, [pc, #352]	; (8006728 <__ieee754_exp+0x2f8>)
 80065c8:	f7f9 fe76 	bl	80002b8 <__aeabi_dsub>
 80065cc:	e74d      	b.n	800646a <__ieee754_exp+0x3a>
 80065ce:	4857      	ldr	r0, [pc, #348]	; (800672c <__ieee754_exp+0x2fc>)
 80065d0:	a347      	add	r3, pc, #284	; (adr r3, 80066f0 <__ieee754_exp+0x2c0>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80065da:	4629      	mov	r1, r5
 80065dc:	4620      	mov	r0, r4
 80065de:	f7fa f823 	bl	8000628 <__aeabi_dmul>
 80065e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065e6:	f7f9 fe69 	bl	80002bc <__adddf3>
 80065ea:	f7fa facd 	bl	8000b88 <__aeabi_d2iz>
 80065ee:	4682      	mov	sl, r0
 80065f0:	f7f9 ffb0 	bl	8000554 <__aeabi_i2d>
 80065f4:	a340      	add	r3, pc, #256	; (adr r3, 80066f8 <__ieee754_exp+0x2c8>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	f7fa f813 	bl	8000628 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7f9 fe55 	bl	80002b8 <__aeabi_dsub>
 800660e:	a33c      	add	r3, pc, #240	; (adr r3, 8006700 <__ieee754_exp+0x2d0>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	4680      	mov	r8, r0
 8006616:	4689      	mov	r9, r1
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7fa f804 	bl	8000628 <__aeabi_dmul>
 8006620:	ec41 0b18 	vmov	d8, r0, r1
 8006624:	e76f      	b.n	8006506 <__ieee754_exp+0xd6>
 8006626:	4a42      	ldr	r2, [pc, #264]	; (8006730 <__ieee754_exp+0x300>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d811      	bhi.n	8006650 <__ieee754_exp+0x220>
 800662c:	a336      	add	r3, pc, #216	; (adr r3, 8006708 <__ieee754_exp+0x2d8>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	ee10 0a10 	vmov	r0, s0
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 fe40 	bl	80002bc <__adddf3>
 800663c:	4b3a      	ldr	r3, [pc, #232]	; (8006728 <__ieee754_exp+0x2f8>)
 800663e:	2200      	movs	r2, #0
 8006640:	f7fa fa82 	bl	8000b48 <__aeabi_dcmpgt>
 8006644:	b138      	cbz	r0, 8006656 <__ieee754_exp+0x226>
 8006646:	4b38      	ldr	r3, [pc, #224]	; (8006728 <__ieee754_exp+0x2f8>)
 8006648:	2200      	movs	r2, #0
 800664a:	4620      	mov	r0, r4
 800664c:	4629      	mov	r1, r5
 800664e:	e70a      	b.n	8006466 <__ieee754_exp+0x36>
 8006650:	f04f 0a00 	mov.w	sl, #0
 8006654:	e75f      	b.n	8006516 <__ieee754_exp+0xe6>
 8006656:	4682      	mov	sl, r0
 8006658:	e75d      	b.n	8006516 <__ieee754_exp+0xe6>
 800665a:	4632      	mov	r2, r6
 800665c:	463b      	mov	r3, r7
 800665e:	2000      	movs	r0, #0
 8006660:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006664:	f7f9 fe28 	bl	80002b8 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	ec51 0b19 	vmov	r0, r1, d9
 8006670:	f7fa f904 	bl	800087c <__aeabi_ddiv>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	ec51 0b18 	vmov	r0, r1, d8
 800667c:	f7f9 fe1c 	bl	80002b8 <__aeabi_dsub>
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	f7f9 fe18 	bl	80002b8 <__aeabi_dsub>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	2000      	movs	r0, #0
 800668e:	4926      	ldr	r1, [pc, #152]	; (8006728 <__ieee754_exp+0x2f8>)
 8006690:	f7f9 fe12 	bl	80002b8 <__aeabi_dsub>
 8006694:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8006698:	4592      	cmp	sl, r2
 800669a:	db02      	blt.n	80066a2 <__ieee754_exp+0x272>
 800669c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80066a0:	e6e3      	b.n	800646a <__ieee754_exp+0x3a>
 80066a2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80066a6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80066aa:	2200      	movs	r2, #0
 80066ac:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80066b0:	f7f9 ffba 	bl	8000628 <__aeabi_dmul>
 80066b4:	e6d9      	b.n	800646a <__ieee754_exp+0x3a>
 80066b6:	bf00      	nop
 80066b8:	fefa39ef 	.word	0xfefa39ef
 80066bc:	40862e42 	.word	0x40862e42
 80066c0:	d52d3051 	.word	0xd52d3051
 80066c4:	c0874910 	.word	0xc0874910
 80066c8:	72bea4d0 	.word	0x72bea4d0
 80066cc:	3e663769 	.word	0x3e663769
 80066d0:	c5d26bf1 	.word	0xc5d26bf1
 80066d4:	3ebbbd41 	.word	0x3ebbbd41
 80066d8:	af25de2c 	.word	0xaf25de2c
 80066dc:	3f11566a 	.word	0x3f11566a
 80066e0:	16bebd93 	.word	0x16bebd93
 80066e4:	3f66c16c 	.word	0x3f66c16c
 80066e8:	5555553e 	.word	0x5555553e
 80066ec:	3fc55555 	.word	0x3fc55555
 80066f0:	652b82fe 	.word	0x652b82fe
 80066f4:	3ff71547 	.word	0x3ff71547
 80066f8:	fee00000 	.word	0xfee00000
 80066fc:	3fe62e42 	.word	0x3fe62e42
 8006700:	35793c76 	.word	0x35793c76
 8006704:	3dea39ef 	.word	0x3dea39ef
 8006708:	8800759c 	.word	0x8800759c
 800670c:	7e37e43c 	.word	0x7e37e43c
 8006710:	40862e41 	.word	0x40862e41
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	3fd62e42 	.word	0x3fd62e42
 800671c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006720:	080084e0 	.word	0x080084e0
 8006724:	080084f0 	.word	0x080084f0
 8006728:	3ff00000 	.word	0x3ff00000
 800672c:	080084d0 	.word	0x080084d0
 8006730:	3defffff 	.word	0x3defffff
 8006734:	00000000 	.word	0x00000000

08006738 <__ieee754_pow>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ed2d 8b06 	vpush	{d8-d10}
 8006740:	b089      	sub	sp, #36	; 0x24
 8006742:	ed8d 1b00 	vstr	d1, [sp]
 8006746:	e9dd 2900 	ldrd	r2, r9, [sp]
 800674a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800674e:	ea58 0102 	orrs.w	r1, r8, r2
 8006752:	ec57 6b10 	vmov	r6, r7, d0
 8006756:	d115      	bne.n	8006784 <__ieee754_pow+0x4c>
 8006758:	19b3      	adds	r3, r6, r6
 800675a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800675e:	4152      	adcs	r2, r2
 8006760:	4299      	cmp	r1, r3
 8006762:	4b89      	ldr	r3, [pc, #548]	; (8006988 <__ieee754_pow+0x250>)
 8006764:	4193      	sbcs	r3, r2
 8006766:	f080 84d2 	bcs.w	800710e <__ieee754_pow+0x9d6>
 800676a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7f9 fda3 	bl	80002bc <__adddf3>
 8006776:	ec41 0b10 	vmov	d0, r0, r1
 800677a:	b009      	add	sp, #36	; 0x24
 800677c:	ecbd 8b06 	vpop	{d8-d10}
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	4b81      	ldr	r3, [pc, #516]	; (800698c <__ieee754_pow+0x254>)
 8006786:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800678a:	429c      	cmp	r4, r3
 800678c:	ee10 aa10 	vmov	sl, s0
 8006790:	463d      	mov	r5, r7
 8006792:	dc06      	bgt.n	80067a2 <__ieee754_pow+0x6a>
 8006794:	d101      	bne.n	800679a <__ieee754_pow+0x62>
 8006796:	2e00      	cmp	r6, #0
 8006798:	d1e7      	bne.n	800676a <__ieee754_pow+0x32>
 800679a:	4598      	cmp	r8, r3
 800679c:	dc01      	bgt.n	80067a2 <__ieee754_pow+0x6a>
 800679e:	d10f      	bne.n	80067c0 <__ieee754_pow+0x88>
 80067a0:	b172      	cbz	r2, 80067c0 <__ieee754_pow+0x88>
 80067a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80067a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80067aa:	ea55 050a 	orrs.w	r5, r5, sl
 80067ae:	d1dc      	bne.n	800676a <__ieee754_pow+0x32>
 80067b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067b4:	18db      	adds	r3, r3, r3
 80067b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80067ba:	4152      	adcs	r2, r2
 80067bc:	429d      	cmp	r5, r3
 80067be:	e7d0      	b.n	8006762 <__ieee754_pow+0x2a>
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	da3b      	bge.n	800683c <__ieee754_pow+0x104>
 80067c4:	4b72      	ldr	r3, [pc, #456]	; (8006990 <__ieee754_pow+0x258>)
 80067c6:	4598      	cmp	r8, r3
 80067c8:	dc51      	bgt.n	800686e <__ieee754_pow+0x136>
 80067ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80067ce:	4598      	cmp	r8, r3
 80067d0:	f340 84ac 	ble.w	800712c <__ieee754_pow+0x9f4>
 80067d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80067d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067dc:	2b14      	cmp	r3, #20
 80067de:	dd0f      	ble.n	8006800 <__ieee754_pow+0xc8>
 80067e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80067e4:	fa22 f103 	lsr.w	r1, r2, r3
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	4293      	cmp	r3, r2
 80067ee:	f040 849d 	bne.w	800712c <__ieee754_pow+0x9f4>
 80067f2:	f001 0101 	and.w	r1, r1, #1
 80067f6:	f1c1 0302 	rsb	r3, r1, #2
 80067fa:	9304      	str	r3, [sp, #16]
 80067fc:	b182      	cbz	r2, 8006820 <__ieee754_pow+0xe8>
 80067fe:	e05f      	b.n	80068c0 <__ieee754_pow+0x188>
 8006800:	2a00      	cmp	r2, #0
 8006802:	d15b      	bne.n	80068bc <__ieee754_pow+0x184>
 8006804:	f1c3 0314 	rsb	r3, r3, #20
 8006808:	fa48 f103 	asr.w	r1, r8, r3
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	4543      	cmp	r3, r8
 8006812:	f040 8488 	bne.w	8007126 <__ieee754_pow+0x9ee>
 8006816:	f001 0101 	and.w	r1, r1, #1
 800681a:	f1c1 0302 	rsb	r3, r1, #2
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	4b5c      	ldr	r3, [pc, #368]	; (8006994 <__ieee754_pow+0x25c>)
 8006822:	4598      	cmp	r8, r3
 8006824:	d132      	bne.n	800688c <__ieee754_pow+0x154>
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	f280 8478 	bge.w	800711e <__ieee754_pow+0x9e6>
 800682e:	4959      	ldr	r1, [pc, #356]	; (8006994 <__ieee754_pow+0x25c>)
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	2000      	movs	r0, #0
 8006836:	f7fa f821 	bl	800087c <__aeabi_ddiv>
 800683a:	e79c      	b.n	8006776 <__ieee754_pow+0x3e>
 800683c:	2300      	movs	r3, #0
 800683e:	9304      	str	r3, [sp, #16]
 8006840:	2a00      	cmp	r2, #0
 8006842:	d13d      	bne.n	80068c0 <__ieee754_pow+0x188>
 8006844:	4b51      	ldr	r3, [pc, #324]	; (800698c <__ieee754_pow+0x254>)
 8006846:	4598      	cmp	r8, r3
 8006848:	d1ea      	bne.n	8006820 <__ieee754_pow+0xe8>
 800684a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800684e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006852:	ea53 030a 	orrs.w	r3, r3, sl
 8006856:	f000 845a 	beq.w	800710e <__ieee754_pow+0x9d6>
 800685a:	4b4f      	ldr	r3, [pc, #316]	; (8006998 <__ieee754_pow+0x260>)
 800685c:	429c      	cmp	r4, r3
 800685e:	dd08      	ble.n	8006872 <__ieee754_pow+0x13a>
 8006860:	f1b9 0f00 	cmp.w	r9, #0
 8006864:	f2c0 8457 	blt.w	8007116 <__ieee754_pow+0x9de>
 8006868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800686c:	e783      	b.n	8006776 <__ieee754_pow+0x3e>
 800686e:	2302      	movs	r3, #2
 8006870:	e7e5      	b.n	800683e <__ieee754_pow+0x106>
 8006872:	f1b9 0f00 	cmp.w	r9, #0
 8006876:	f04f 0000 	mov.w	r0, #0
 800687a:	f04f 0100 	mov.w	r1, #0
 800687e:	f6bf af7a 	bge.w	8006776 <__ieee754_pow+0x3e>
 8006882:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006886:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800688a:	e774      	b.n	8006776 <__ieee754_pow+0x3e>
 800688c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006890:	d106      	bne.n	80068a0 <__ieee754_pow+0x168>
 8006892:	4632      	mov	r2, r6
 8006894:	463b      	mov	r3, r7
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fec5 	bl	8000628 <__aeabi_dmul>
 800689e:	e76a      	b.n	8006776 <__ieee754_pow+0x3e>
 80068a0:	4b3e      	ldr	r3, [pc, #248]	; (800699c <__ieee754_pow+0x264>)
 80068a2:	4599      	cmp	r9, r3
 80068a4:	d10c      	bne.n	80068c0 <__ieee754_pow+0x188>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	db0a      	blt.n	80068c0 <__ieee754_pow+0x188>
 80068aa:	ec47 6b10 	vmov	d0, r6, r7
 80068ae:	b009      	add	sp, #36	; 0x24
 80068b0:	ecbd 8b06 	vpop	{d8-d10}
 80068b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	f000 be7a 	b.w	80075b0 <__ieee754_sqrt>
 80068bc:	2300      	movs	r3, #0
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	ec47 6b10 	vmov	d0, r6, r7
 80068c4:	f001 fc2e 	bl	8008124 <fabs>
 80068c8:	ec51 0b10 	vmov	r0, r1, d0
 80068cc:	f1ba 0f00 	cmp.w	sl, #0
 80068d0:	d129      	bne.n	8006926 <__ieee754_pow+0x1ee>
 80068d2:	b124      	cbz	r4, 80068de <__ieee754_pow+0x1a6>
 80068d4:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <__ieee754_pow+0x25c>)
 80068d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80068da:	429a      	cmp	r2, r3
 80068dc:	d123      	bne.n	8006926 <__ieee754_pow+0x1ee>
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	da05      	bge.n	80068f0 <__ieee754_pow+0x1b8>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	2000      	movs	r0, #0
 80068ea:	492a      	ldr	r1, [pc, #168]	; (8006994 <__ieee754_pow+0x25c>)
 80068ec:	f7f9 ffc6 	bl	800087c <__aeabi_ddiv>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	f6bf af40 	bge.w	8006776 <__ieee754_pow+0x3e>
 80068f6:	9b04      	ldr	r3, [sp, #16]
 80068f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80068fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006900:	4323      	orrs	r3, r4
 8006902:	d108      	bne.n	8006916 <__ieee754_pow+0x1de>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4610      	mov	r0, r2
 800690a:	4619      	mov	r1, r3
 800690c:	f7f9 fcd4 	bl	80002b8 <__aeabi_dsub>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	e78f      	b.n	8006836 <__ieee754_pow+0xfe>
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	2b01      	cmp	r3, #1
 800691a:	f47f af2c 	bne.w	8006776 <__ieee754_pow+0x3e>
 800691e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006922:	4619      	mov	r1, r3
 8006924:	e727      	b.n	8006776 <__ieee754_pow+0x3e>
 8006926:	0feb      	lsrs	r3, r5, #31
 8006928:	3b01      	subs	r3, #1
 800692a:	9306      	str	r3, [sp, #24]
 800692c:	9a06      	ldr	r2, [sp, #24]
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	d102      	bne.n	800693a <__ieee754_pow+0x202>
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	e7e6      	b.n	8006908 <__ieee754_pow+0x1d0>
 800693a:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <__ieee754_pow+0x268>)
 800693c:	4598      	cmp	r8, r3
 800693e:	f340 80fb 	ble.w	8006b38 <__ieee754_pow+0x400>
 8006942:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006946:	4598      	cmp	r8, r3
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <__ieee754_pow+0x260>)
 800694a:	dd0c      	ble.n	8006966 <__ieee754_pow+0x22e>
 800694c:	429c      	cmp	r4, r3
 800694e:	dc0f      	bgt.n	8006970 <__ieee754_pow+0x238>
 8006950:	f1b9 0f00 	cmp.w	r9, #0
 8006954:	da0f      	bge.n	8006976 <__ieee754_pow+0x23e>
 8006956:	2000      	movs	r0, #0
 8006958:	b009      	add	sp, #36	; 0x24
 800695a:	ecbd 8b06 	vpop	{d8-d10}
 800695e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006962:	f001 bbd6 	b.w	8008112 <__math_oflow>
 8006966:	429c      	cmp	r4, r3
 8006968:	dbf2      	blt.n	8006950 <__ieee754_pow+0x218>
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <__ieee754_pow+0x25c>)
 800696c:	429c      	cmp	r4, r3
 800696e:	dd19      	ble.n	80069a4 <__ieee754_pow+0x26c>
 8006970:	f1b9 0f00 	cmp.w	r9, #0
 8006974:	dcef      	bgt.n	8006956 <__ieee754_pow+0x21e>
 8006976:	2000      	movs	r0, #0
 8006978:	b009      	add	sp, #36	; 0x24
 800697a:	ecbd 8b06 	vpop	{d8-d10}
 800697e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006982:	f001 bbbd 	b.w	8008100 <__math_uflow>
 8006986:	bf00      	nop
 8006988:	fff00000 	.word	0xfff00000
 800698c:	7ff00000 	.word	0x7ff00000
 8006990:	433fffff 	.word	0x433fffff
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	3fefffff 	.word	0x3fefffff
 800699c:	3fe00000 	.word	0x3fe00000
 80069a0:	41e00000 	.word	0x41e00000
 80069a4:	4b60      	ldr	r3, [pc, #384]	; (8006b28 <__ieee754_pow+0x3f0>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	f7f9 fc86 	bl	80002b8 <__aeabi_dsub>
 80069ac:	a354      	add	r3, pc, #336	; (adr r3, 8006b00 <__ieee754_pow+0x3c8>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	4604      	mov	r4, r0
 80069b4:	460d      	mov	r5, r1
 80069b6:	f7f9 fe37 	bl	8000628 <__aeabi_dmul>
 80069ba:	a353      	add	r3, pc, #332	; (adr r3, 8006b08 <__ieee754_pow+0x3d0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	f7f9 fe2e 	bl	8000628 <__aeabi_dmul>
 80069cc:	4b57      	ldr	r3, [pc, #348]	; (8006b2c <__ieee754_pow+0x3f4>)
 80069ce:	4682      	mov	sl, r0
 80069d0:	468b      	mov	fp, r1
 80069d2:	2200      	movs	r2, #0
 80069d4:	4620      	mov	r0, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	f7f9 fe26 	bl	8000628 <__aeabi_dmul>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	a14b      	add	r1, pc, #300	; (adr r1, 8006b10 <__ieee754_pow+0x3d8>)
 80069e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e6:	f7f9 fc67 	bl	80002b8 <__aeabi_dsub>
 80069ea:	4622      	mov	r2, r4
 80069ec:	462b      	mov	r3, r5
 80069ee:	f7f9 fe1b 	bl	8000628 <__aeabi_dmul>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	2000      	movs	r0, #0
 80069f8:	494d      	ldr	r1, [pc, #308]	; (8006b30 <__ieee754_pow+0x3f8>)
 80069fa:	f7f9 fc5d 	bl	80002b8 <__aeabi_dsub>
 80069fe:	4622      	mov	r2, r4
 8006a00:	4680      	mov	r8, r0
 8006a02:	4689      	mov	r9, r1
 8006a04:	462b      	mov	r3, r5
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 fe0d 	bl	8000628 <__aeabi_dmul>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 fe07 	bl	8000628 <__aeabi_dmul>
 8006a1a:	a33f      	add	r3, pc, #252	; (adr r3, 8006b18 <__ieee754_pow+0x3e0>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fe02 	bl	8000628 <__aeabi_dmul>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4650      	mov	r0, sl
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	f7f9 fc44 	bl	80002b8 <__aeabi_dsub>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4639      	mov	r1, r7
 8006a3c:	f7f9 fc3e 	bl	80002bc <__adddf3>
 8006a40:	2000      	movs	r0, #0
 8006a42:	4632      	mov	r2, r6
 8006a44:	463b      	mov	r3, r7
 8006a46:	4604      	mov	r4, r0
 8006a48:	460d      	mov	r5, r1
 8006a4a:	f7f9 fc35 	bl	80002b8 <__aeabi_dsub>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fc2f 	bl	80002b8 <__aeabi_dsub>
 8006a5a:	9b04      	ldr	r3, [sp, #16]
 8006a5c:	9a06      	ldr	r2, [sp, #24]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	4682      	mov	sl, r0
 8006a64:	468b      	mov	fp, r1
 8006a66:	f040 81e7 	bne.w	8006e38 <__ieee754_pow+0x700>
 8006a6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006b20 <__ieee754_pow+0x3e8>
 8006a6e:	eeb0 8a47 	vmov.f32	s16, s14
 8006a72:	eef0 8a67 	vmov.f32	s17, s15
 8006a76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a84:	f7f9 fc18 	bl	80002b8 <__aeabi_dsub>
 8006a88:	4622      	mov	r2, r4
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	f7f9 fdcc 	bl	8000628 <__aeabi_dmul>
 8006a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a94:	4680      	mov	r8, r0
 8006a96:	4689      	mov	r9, r1
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	f7f9 fdc4 	bl	8000628 <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7f9 fc08 	bl	80002bc <__adddf3>
 8006aac:	4632      	mov	r2, r6
 8006aae:	463b      	mov	r3, r7
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	4689      	mov	r9, r1
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f7f9 fdb6 	bl	8000628 <__aeabi_dmul>
 8006abc:	460b      	mov	r3, r1
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	f7f9 fbf8 	bl	80002bc <__adddf3>
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <__ieee754_pow+0x3fc>)
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	ec45 4b19 	vmov	d9, r4, r5
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	468b      	mov	fp, r1
 8006ada:	f340 82f1 	ble.w	80070c0 <__ieee754_pow+0x988>
 8006ade:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006ae2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006ae6:	4303      	orrs	r3, r0
 8006ae8:	f000 81e4 	beq.w	8006eb4 <__ieee754_pow+0x77c>
 8006aec:	ec51 0b18 	vmov	r0, r1, d8
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	f7fa f80a 	bl	8000b0c <__aeabi_dcmplt>
 8006af8:	3800      	subs	r0, #0
 8006afa:	bf18      	it	ne
 8006afc:	2001      	movne	r0, #1
 8006afe:	e72b      	b.n	8006958 <__ieee754_pow+0x220>
 8006b00:	60000000 	.word	0x60000000
 8006b04:	3ff71547 	.word	0x3ff71547
 8006b08:	f85ddf44 	.word	0xf85ddf44
 8006b0c:	3e54ae0b 	.word	0x3e54ae0b
 8006b10:	55555555 	.word	0x55555555
 8006b14:	3fd55555 	.word	0x3fd55555
 8006b18:	652b82fe 	.word	0x652b82fe
 8006b1c:	3ff71547 	.word	0x3ff71547
 8006b20:	00000000 	.word	0x00000000
 8006b24:	bff00000 	.word	0xbff00000
 8006b28:	3ff00000 	.word	0x3ff00000
 8006b2c:	3fd00000 	.word	0x3fd00000
 8006b30:	3fe00000 	.word	0x3fe00000
 8006b34:	408fffff 	.word	0x408fffff
 8006b38:	4bd5      	ldr	r3, [pc, #852]	; (8006e90 <__ieee754_pow+0x758>)
 8006b3a:	402b      	ands	r3, r5
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	b92b      	cbnz	r3, 8006b4c <__ieee754_pow+0x414>
 8006b40:	4bd4      	ldr	r3, [pc, #848]	; (8006e94 <__ieee754_pow+0x75c>)
 8006b42:	f7f9 fd71 	bl	8000628 <__aeabi_dmul>
 8006b46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	1523      	asrs	r3, r4, #20
 8006b4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b52:	4413      	add	r3, r2
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	4bd0      	ldr	r3, [pc, #832]	; (8006e98 <__ieee754_pow+0x760>)
 8006b58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006b5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006b60:	429c      	cmp	r4, r3
 8006b62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b66:	dd08      	ble.n	8006b7a <__ieee754_pow+0x442>
 8006b68:	4bcc      	ldr	r3, [pc, #816]	; (8006e9c <__ieee754_pow+0x764>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	f340 8162 	ble.w	8006e34 <__ieee754_pow+0x6fc>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	3301      	adds	r3, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	00e3      	lsls	r3, r4, #3
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	4bc7      	ldr	r3, [pc, #796]	; (8006ea0 <__ieee754_pow+0x768>)
 8006b82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b86:	ed93 7b00 	vldr	d7, [r3]
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	ec53 2b17 	vmov	r2, r3, d7
 8006b90:	eeb0 9a47 	vmov.f32	s18, s14
 8006b94:	eef0 9a67 	vmov.f32	s19, s15
 8006b98:	4682      	mov	sl, r0
 8006b9a:	f7f9 fb8d 	bl	80002b8 <__aeabi_dsub>
 8006b9e:	4652      	mov	r2, sl
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	ec51 0b19 	vmov	r0, r1, d9
 8006baa:	f7f9 fb87 	bl	80002bc <__adddf3>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	49bb      	ldr	r1, [pc, #748]	; (8006ea4 <__ieee754_pow+0x76c>)
 8006bb6:	f7f9 fe61 	bl	800087c <__aeabi_ddiv>
 8006bba:	ec41 0b1a 	vmov	d10, r0, r1
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7f9 fd2f 	bl	8000628 <__aeabi_dmul>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bd0:	9302      	str	r3, [sp, #8]
 8006bd2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006bd6:	46ab      	mov	fp, r5
 8006bd8:	106d      	asrs	r5, r5, #1
 8006bda:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006bde:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006be2:	ec41 0b18 	vmov	d8, r0, r1
 8006be6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006bea:	2200      	movs	r2, #0
 8006bec:	4640      	mov	r0, r8
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	f7f9 fd18 	bl	8000628 <__aeabi_dmul>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f7f9 fb5a 	bl	80002b8 <__aeabi_dsub>
 8006c04:	ec53 2b19 	vmov	r2, r3, d9
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 fb52 	bl	80002b8 <__aeabi_dsub>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4650      	mov	r0, sl
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	f7f9 fb4c 	bl	80002b8 <__aeabi_dsub>
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	f7f9 fd00 	bl	8000628 <__aeabi_dmul>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 fb42 	bl	80002b8 <__aeabi_dsub>
 8006c34:	ec53 2b1a 	vmov	r2, r3, d10
 8006c38:	f7f9 fcf6 	bl	8000628 <__aeabi_dmul>
 8006c3c:	ec53 2b18 	vmov	r2, r3, d8
 8006c40:	ec41 0b19 	vmov	d9, r0, r1
 8006c44:	ec51 0b18 	vmov	r0, r1, d8
 8006c48:	f7f9 fcee 	bl	8000628 <__aeabi_dmul>
 8006c4c:	a37c      	add	r3, pc, #496	; (adr r3, 8006e40 <__ieee754_pow+0x708>)
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	4604      	mov	r4, r0
 8006c54:	460d      	mov	r5, r1
 8006c56:	f7f9 fce7 	bl	8000628 <__aeabi_dmul>
 8006c5a:	a37b      	add	r3, pc, #492	; (adr r3, 8006e48 <__ieee754_pow+0x710>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fb2c 	bl	80002bc <__adddf3>
 8006c64:	4622      	mov	r2, r4
 8006c66:	462b      	mov	r3, r5
 8006c68:	f7f9 fcde 	bl	8000628 <__aeabi_dmul>
 8006c6c:	a378      	add	r3, pc, #480	; (adr r3, 8006e50 <__ieee754_pow+0x718>)
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f7f9 fb23 	bl	80002bc <__adddf3>
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	f7f9 fcd5 	bl	8000628 <__aeabi_dmul>
 8006c7e:	a376      	add	r3, pc, #472	; (adr r3, 8006e58 <__ieee754_pow+0x720>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fb1a 	bl	80002bc <__adddf3>
 8006c88:	4622      	mov	r2, r4
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	f7f9 fccc 	bl	8000628 <__aeabi_dmul>
 8006c90:	a373      	add	r3, pc, #460	; (adr r3, 8006e60 <__ieee754_pow+0x728>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fb11 	bl	80002bc <__adddf3>
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	f7f9 fcc3 	bl	8000628 <__aeabi_dmul>
 8006ca2:	a371      	add	r3, pc, #452	; (adr r3, 8006e68 <__ieee754_pow+0x730>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fb08 	bl	80002bc <__adddf3>
 8006cac:	4622      	mov	r2, r4
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	f7f9 fcb6 	bl	8000628 <__aeabi_dmul>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fcb0 	bl	8000628 <__aeabi_dmul>
 8006cc8:	4642      	mov	r2, r8
 8006cca:	4604      	mov	r4, r0
 8006ccc:	460d      	mov	r5, r1
 8006cce:	464b      	mov	r3, r9
 8006cd0:	ec51 0b18 	vmov	r0, r1, d8
 8006cd4:	f7f9 faf2 	bl	80002bc <__adddf3>
 8006cd8:	ec53 2b19 	vmov	r2, r3, d9
 8006cdc:	f7f9 fca4 	bl	8000628 <__aeabi_dmul>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f7f9 faea 	bl	80002bc <__adddf3>
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4682      	mov	sl, r0
 8006cec:	468b      	mov	fp, r1
 8006cee:	464b      	mov	r3, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	f7f9 fc98 	bl	8000628 <__aeabi_dmul>
 8006cf8:	4b6b      	ldr	r3, [pc, #428]	; (8006ea8 <__ieee754_pow+0x770>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	f7f9 fadc 	bl	80002bc <__adddf3>
 8006d04:	4652      	mov	r2, sl
 8006d06:	465b      	mov	r3, fp
 8006d08:	f7f9 fad8 	bl	80002bc <__adddf3>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4640      	mov	r0, r8
 8006d18:	4649      	mov	r1, r9
 8006d1a:	f7f9 fc85 	bl	8000628 <__aeabi_dmul>
 8006d1e:	4b62      	ldr	r3, [pc, #392]	; (8006ea8 <__ieee754_pow+0x770>)
 8006d20:	4680      	mov	r8, r0
 8006d22:	4689      	mov	r9, r1
 8006d24:	2200      	movs	r2, #0
 8006d26:	4620      	mov	r0, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7f9 fac5 	bl	80002b8 <__aeabi_dsub>
 8006d2e:	4632      	mov	r2, r6
 8006d30:	463b      	mov	r3, r7
 8006d32:	f7f9 fac1 	bl	80002b8 <__aeabi_dsub>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	f7f9 fabb 	bl	80002b8 <__aeabi_dsub>
 8006d42:	ec53 2b18 	vmov	r2, r3, d8
 8006d46:	f7f9 fc6f 	bl	8000628 <__aeabi_dmul>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	460f      	mov	r7, r1
 8006d50:	462b      	mov	r3, r5
 8006d52:	ec51 0b19 	vmov	r0, r1, d9
 8006d56:	f7f9 fc67 	bl	8000628 <__aeabi_dmul>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4630      	mov	r0, r6
 8006d60:	4639      	mov	r1, r7
 8006d62:	f7f9 faab 	bl	80002bc <__adddf3>
 8006d66:	4606      	mov	r6, r0
 8006d68:	460f      	mov	r7, r1
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 faa3 	bl	80002bc <__adddf3>
 8006d76:	a33e      	add	r3, pc, #248	; (adr r3, 8006e70 <__ieee754_pow+0x738>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	f7f9 fc51 	bl	8000628 <__aeabi_dmul>
 8006d86:	4642      	mov	r2, r8
 8006d88:	ec41 0b18 	vmov	d8, r0, r1
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	4620      	mov	r0, r4
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7f9 fa91 	bl	80002b8 <__aeabi_dsub>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fa8b 	bl	80002b8 <__aeabi_dsub>
 8006da2:	a335      	add	r3, pc, #212	; (adr r3, 8006e78 <__ieee754_pow+0x740>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fc3e 	bl	8000628 <__aeabi_dmul>
 8006dac:	a334      	add	r3, pc, #208	; (adr r3, 8006e80 <__ieee754_pow+0x748>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fc35 	bl	8000628 <__aeabi_dmul>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 fa79 	bl	80002bc <__adddf3>
 8006dca:	9a07      	ldr	r2, [sp, #28]
 8006dcc:	4b37      	ldr	r3, [pc, #220]	; (8006eac <__ieee754_pow+0x774>)
 8006dce:	4413      	add	r3, r2
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 fa72 	bl	80002bc <__adddf3>
 8006dd8:	4682      	mov	sl, r0
 8006dda:	9805      	ldr	r0, [sp, #20]
 8006ddc:	468b      	mov	fp, r1
 8006dde:	f7f9 fbb9 	bl	8000554 <__aeabi_i2d>
 8006de2:	9a07      	ldr	r2, [sp, #28]
 8006de4:	4b32      	ldr	r3, [pc, #200]	; (8006eb0 <__ieee754_pow+0x778>)
 8006de6:	4413      	add	r3, r2
 8006de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	4652      	mov	r2, sl
 8006df2:	465b      	mov	r3, fp
 8006df4:	ec51 0b18 	vmov	r0, r1, d8
 8006df8:	f7f9 fa60 	bl	80002bc <__adddf3>
 8006dfc:	4642      	mov	r2, r8
 8006dfe:	464b      	mov	r3, r9
 8006e00:	f7f9 fa5c 	bl	80002bc <__adddf3>
 8006e04:	4632      	mov	r2, r6
 8006e06:	463b      	mov	r3, r7
 8006e08:	f7f9 fa58 	bl	80002bc <__adddf3>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	4632      	mov	r2, r6
 8006e10:	463b      	mov	r3, r7
 8006e12:	4604      	mov	r4, r0
 8006e14:	460d      	mov	r5, r1
 8006e16:	f7f9 fa4f 	bl	80002b8 <__aeabi_dsub>
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	f7f9 fa4b 	bl	80002b8 <__aeabi_dsub>
 8006e22:	ec53 2b18 	vmov	r2, r3, d8
 8006e26:	f7f9 fa47 	bl	80002b8 <__aeabi_dsub>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4650      	mov	r0, sl
 8006e30:	4659      	mov	r1, fp
 8006e32:	e610      	b.n	8006a56 <__ieee754_pow+0x31e>
 8006e34:	2401      	movs	r4, #1
 8006e36:	e6a1      	b.n	8006b7c <__ieee754_pow+0x444>
 8006e38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006e88 <__ieee754_pow+0x750>
 8006e3c:	e617      	b.n	8006a6e <__ieee754_pow+0x336>
 8006e3e:	bf00      	nop
 8006e40:	4a454eef 	.word	0x4a454eef
 8006e44:	3fca7e28 	.word	0x3fca7e28
 8006e48:	93c9db65 	.word	0x93c9db65
 8006e4c:	3fcd864a 	.word	0x3fcd864a
 8006e50:	a91d4101 	.word	0xa91d4101
 8006e54:	3fd17460 	.word	0x3fd17460
 8006e58:	518f264d 	.word	0x518f264d
 8006e5c:	3fd55555 	.word	0x3fd55555
 8006e60:	db6fabff 	.word	0xdb6fabff
 8006e64:	3fdb6db6 	.word	0x3fdb6db6
 8006e68:	33333303 	.word	0x33333303
 8006e6c:	3fe33333 	.word	0x3fe33333
 8006e70:	e0000000 	.word	0xe0000000
 8006e74:	3feec709 	.word	0x3feec709
 8006e78:	dc3a03fd 	.word	0xdc3a03fd
 8006e7c:	3feec709 	.word	0x3feec709
 8006e80:	145b01f5 	.word	0x145b01f5
 8006e84:	be3e2fe0 	.word	0xbe3e2fe0
 8006e88:	00000000 	.word	0x00000000
 8006e8c:	3ff00000 	.word	0x3ff00000
 8006e90:	7ff00000 	.word	0x7ff00000
 8006e94:	43400000 	.word	0x43400000
 8006e98:	0003988e 	.word	0x0003988e
 8006e9c:	000bb679 	.word	0x000bb679
 8006ea0:	08008500 	.word	0x08008500
 8006ea4:	3ff00000 	.word	0x3ff00000
 8006ea8:	40080000 	.word	0x40080000
 8006eac:	08008520 	.word	0x08008520
 8006eb0:	08008510 	.word	0x08008510
 8006eb4:	a3b5      	add	r3, pc, #724	; (adr r3, 800718c <__ieee754_pow+0xa54>)
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 f9fd 	bl	80002bc <__adddf3>
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	ec41 0b1a 	vmov	d10, r0, r1
 8006ec8:	462b      	mov	r3, r5
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 f9f3 	bl	80002b8 <__aeabi_dsub>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	ec51 0b1a 	vmov	r0, r1, d10
 8006eda:	f7f9 fe35 	bl	8000b48 <__aeabi_dcmpgt>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	f47f ae04 	bne.w	8006aec <__ieee754_pow+0x3b4>
 8006ee4:	4aa4      	ldr	r2, [pc, #656]	; (8007178 <__ieee754_pow+0xa40>)
 8006ee6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006eea:	4293      	cmp	r3, r2
 8006eec:	f340 8108 	ble.w	8007100 <__ieee754_pow+0x9c8>
 8006ef0:	151b      	asrs	r3, r3, #20
 8006ef2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ef6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006efa:	fa4a f303 	asr.w	r3, sl, r3
 8006efe:	445b      	add	r3, fp
 8006f00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f04:	4e9d      	ldr	r6, [pc, #628]	; (800717c <__ieee754_pow+0xa44>)
 8006f06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f0a:	4116      	asrs	r6, r2
 8006f0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f10:	2000      	movs	r0, #0
 8006f12:	ea23 0106 	bic.w	r1, r3, r6
 8006f16:	f1c2 0214 	rsb	r2, r2, #20
 8006f1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006f1e:	fa4a fa02 	asr.w	sl, sl, r2
 8006f22:	f1bb 0f00 	cmp.w	fp, #0
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	bfb8      	it	lt
 8006f30:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f34:	f7f9 f9c0 	bl	80002b8 <__aeabi_dsub>
 8006f38:	ec41 0b19 	vmov	d9, r0, r1
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	ec51 0b19 	vmov	r0, r1, d9
 8006f44:	f7f9 f9ba 	bl	80002bc <__adddf3>
 8006f48:	a37b      	add	r3, pc, #492	; (adr r3, 8007138 <__ieee754_pow+0xa00>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4604      	mov	r4, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	f7f9 fb68 	bl	8000628 <__aeabi_dmul>
 8006f58:	ec53 2b19 	vmov	r2, r3, d9
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	460f      	mov	r7, r1
 8006f60:	4620      	mov	r0, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7f9 f9a8 	bl	80002b8 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 f9a2 	bl	80002b8 <__aeabi_dsub>
 8006f74:	a372      	add	r3, pc, #456	; (adr r3, 8007140 <__ieee754_pow+0xa08>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 fb55 	bl	8000628 <__aeabi_dmul>
 8006f7e:	a372      	add	r3, pc, #456	; (adr r3, 8007148 <__ieee754_pow+0xa10>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	4680      	mov	r8, r0
 8006f86:	4689      	mov	r9, r1
 8006f88:	4620      	mov	r0, r4
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	f7f9 fb4c 	bl	8000628 <__aeabi_dmul>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4640      	mov	r0, r8
 8006f96:	4649      	mov	r1, r9
 8006f98:	f7f9 f990 	bl	80002bc <__adddf3>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 f988 	bl	80002bc <__adddf3>
 8006fac:	4632      	mov	r2, r6
 8006fae:	463b      	mov	r3, r7
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4689      	mov	r9, r1
 8006fb4:	f7f9 f980 	bl	80002b8 <__aeabi_dsub>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 f97a 	bl	80002b8 <__aeabi_dsub>
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	464b      	mov	r3, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 fb2a 	bl	8000628 <__aeabi_dmul>
 8006fd4:	a35e      	add	r3, pc, #376	; (adr r3, 8007150 <__ieee754_pow+0xa18>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	4604      	mov	r4, r0
 8006fdc:	460d      	mov	r5, r1
 8006fde:	f7f9 fb23 	bl	8000628 <__aeabi_dmul>
 8006fe2:	a35d      	add	r3, pc, #372	; (adr r3, 8007158 <__ieee754_pow+0xa20>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f966 	bl	80002b8 <__aeabi_dsub>
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fb1a 	bl	8000628 <__aeabi_dmul>
 8006ff4:	a35a      	add	r3, pc, #360	; (adr r3, 8007160 <__ieee754_pow+0xa28>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f95f 	bl	80002bc <__adddf3>
 8006ffe:	4622      	mov	r2, r4
 8007000:	462b      	mov	r3, r5
 8007002:	f7f9 fb11 	bl	8000628 <__aeabi_dmul>
 8007006:	a358      	add	r3, pc, #352	; (adr r3, 8007168 <__ieee754_pow+0xa30>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f7f9 f954 	bl	80002b8 <__aeabi_dsub>
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	f7f9 fb08 	bl	8000628 <__aeabi_dmul>
 8007018:	a355      	add	r3, pc, #340	; (adr r3, 8007170 <__ieee754_pow+0xa38>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 f94d 	bl	80002bc <__adddf3>
 8007022:	4622      	mov	r2, r4
 8007024:	462b      	mov	r3, r5
 8007026:	f7f9 faff 	bl	8000628 <__aeabi_dmul>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	f7f9 f941 	bl	80002b8 <__aeabi_dsub>
 8007036:	4604      	mov	r4, r0
 8007038:	460d      	mov	r5, r1
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	f7f9 faf1 	bl	8000628 <__aeabi_dmul>
 8007046:	2200      	movs	r2, #0
 8007048:	ec41 0b19 	vmov	d9, r0, r1
 800704c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007050:	4620      	mov	r0, r4
 8007052:	4629      	mov	r1, r5
 8007054:	f7f9 f930 	bl	80002b8 <__aeabi_dsub>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	ec51 0b19 	vmov	r0, r1, d9
 8007060:	f7f9 fc0c 	bl	800087c <__aeabi_ddiv>
 8007064:	4632      	mov	r2, r6
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
 800706a:	463b      	mov	r3, r7
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 fada 	bl	8000628 <__aeabi_dmul>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	f7f9 f920 	bl	80002bc <__adddf3>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f918 	bl	80002b8 <__aeabi_dsub>
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	f7f9 f914 	bl	80002b8 <__aeabi_dsub>
 8007090:	460b      	mov	r3, r1
 8007092:	4602      	mov	r2, r0
 8007094:	493a      	ldr	r1, [pc, #232]	; (8007180 <__ieee754_pow+0xa48>)
 8007096:	2000      	movs	r0, #0
 8007098:	f7f9 f90e 	bl	80002b8 <__aeabi_dsub>
 800709c:	ec41 0b10 	vmov	d0, r0, r1
 80070a0:	ee10 3a90 	vmov	r3, s1
 80070a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80070a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ac:	da2b      	bge.n	8007106 <__ieee754_pow+0x9ce>
 80070ae:	4650      	mov	r0, sl
 80070b0:	f001 f8ce 	bl	8008250 <scalbn>
 80070b4:	ec51 0b10 	vmov	r0, r1, d0
 80070b8:	ec53 2b18 	vmov	r2, r3, d8
 80070bc:	f7ff bbed 	b.w	800689a <__ieee754_pow+0x162>
 80070c0:	4b30      	ldr	r3, [pc, #192]	; (8007184 <__ieee754_pow+0xa4c>)
 80070c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070c6:	429e      	cmp	r6, r3
 80070c8:	f77f af0c 	ble.w	8006ee4 <__ieee754_pow+0x7ac>
 80070cc:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <__ieee754_pow+0xa50>)
 80070ce:	440b      	add	r3, r1
 80070d0:	4303      	orrs	r3, r0
 80070d2:	d009      	beq.n	80070e8 <__ieee754_pow+0x9b0>
 80070d4:	ec51 0b18 	vmov	r0, r1, d8
 80070d8:	2200      	movs	r2, #0
 80070da:	2300      	movs	r3, #0
 80070dc:	f7f9 fd16 	bl	8000b0c <__aeabi_dcmplt>
 80070e0:	3800      	subs	r0, #0
 80070e2:	bf18      	it	ne
 80070e4:	2001      	movne	r0, #1
 80070e6:	e447      	b.n	8006978 <__ieee754_pow+0x240>
 80070e8:	4622      	mov	r2, r4
 80070ea:	462b      	mov	r3, r5
 80070ec:	f7f9 f8e4 	bl	80002b8 <__aeabi_dsub>
 80070f0:	4642      	mov	r2, r8
 80070f2:	464b      	mov	r3, r9
 80070f4:	f7f9 fd1e 	bl	8000b34 <__aeabi_dcmpge>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f43f aef3 	beq.w	8006ee4 <__ieee754_pow+0x7ac>
 80070fe:	e7e9      	b.n	80070d4 <__ieee754_pow+0x99c>
 8007100:	f04f 0a00 	mov.w	sl, #0
 8007104:	e71a      	b.n	8006f3c <__ieee754_pow+0x804>
 8007106:	ec51 0b10 	vmov	r0, r1, d0
 800710a:	4619      	mov	r1, r3
 800710c:	e7d4      	b.n	80070b8 <__ieee754_pow+0x980>
 800710e:	491c      	ldr	r1, [pc, #112]	; (8007180 <__ieee754_pow+0xa48>)
 8007110:	2000      	movs	r0, #0
 8007112:	f7ff bb30 	b.w	8006776 <__ieee754_pow+0x3e>
 8007116:	2000      	movs	r0, #0
 8007118:	2100      	movs	r1, #0
 800711a:	f7ff bb2c 	b.w	8006776 <__ieee754_pow+0x3e>
 800711e:	4630      	mov	r0, r6
 8007120:	4639      	mov	r1, r7
 8007122:	f7ff bb28 	b.w	8006776 <__ieee754_pow+0x3e>
 8007126:	9204      	str	r2, [sp, #16]
 8007128:	f7ff bb7a 	b.w	8006820 <__ieee754_pow+0xe8>
 800712c:	2300      	movs	r3, #0
 800712e:	f7ff bb64 	b.w	80067fa <__ieee754_pow+0xc2>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	00000000 	.word	0x00000000
 800713c:	3fe62e43 	.word	0x3fe62e43
 8007140:	fefa39ef 	.word	0xfefa39ef
 8007144:	3fe62e42 	.word	0x3fe62e42
 8007148:	0ca86c39 	.word	0x0ca86c39
 800714c:	be205c61 	.word	0xbe205c61
 8007150:	72bea4d0 	.word	0x72bea4d0
 8007154:	3e663769 	.word	0x3e663769
 8007158:	c5d26bf1 	.word	0xc5d26bf1
 800715c:	3ebbbd41 	.word	0x3ebbbd41
 8007160:	af25de2c 	.word	0xaf25de2c
 8007164:	3f11566a 	.word	0x3f11566a
 8007168:	16bebd93 	.word	0x16bebd93
 800716c:	3f66c16c 	.word	0x3f66c16c
 8007170:	5555553e 	.word	0x5555553e
 8007174:	3fc55555 	.word	0x3fc55555
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	000fffff 	.word	0x000fffff
 8007180:	3ff00000 	.word	0x3ff00000
 8007184:	4090cbff 	.word	0x4090cbff
 8007188:	3f6f3400 	.word	0x3f6f3400
 800718c:	652b82fe 	.word	0x652b82fe
 8007190:	3c971547 	.word	0x3c971547
 8007194:	00000000 	.word	0x00000000

08007198 <__ieee754_rem_pio2>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	ed2d 8b02 	vpush	{d8}
 80071a0:	ec55 4b10 	vmov	r4, r5, d0
 80071a4:	4bca      	ldr	r3, [pc, #808]	; (80074d0 <__ieee754_rem_pio2+0x338>)
 80071a6:	b08b      	sub	sp, #44	; 0x2c
 80071a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80071ac:	4598      	cmp	r8, r3
 80071ae:	4682      	mov	sl, r0
 80071b0:	9502      	str	r5, [sp, #8]
 80071b2:	dc08      	bgt.n	80071c6 <__ieee754_rem_pio2+0x2e>
 80071b4:	2200      	movs	r2, #0
 80071b6:	2300      	movs	r3, #0
 80071b8:	ed80 0b00 	vstr	d0, [r0]
 80071bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80071c0:	f04f 0b00 	mov.w	fp, #0
 80071c4:	e028      	b.n	8007218 <__ieee754_rem_pio2+0x80>
 80071c6:	4bc3      	ldr	r3, [pc, #780]	; (80074d4 <__ieee754_rem_pio2+0x33c>)
 80071c8:	4598      	cmp	r8, r3
 80071ca:	dc78      	bgt.n	80072be <__ieee754_rem_pio2+0x126>
 80071cc:	9b02      	ldr	r3, [sp, #8]
 80071ce:	4ec2      	ldr	r6, [pc, #776]	; (80074d8 <__ieee754_rem_pio2+0x340>)
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	ee10 0a10 	vmov	r0, s0
 80071d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007498 <__ieee754_rem_pio2+0x300>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4629      	mov	r1, r5
 80071de:	dd39      	ble.n	8007254 <__ieee754_rem_pio2+0xbc>
 80071e0:	f7f9 f86a 	bl	80002b8 <__aeabi_dsub>
 80071e4:	45b0      	cmp	r8, r6
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	d01b      	beq.n	8007224 <__ieee754_rem_pio2+0x8c>
 80071ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x308>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f861 	bl	80002b8 <__aeabi_dsub>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	e9ca 2300 	strd	r2, r3, [sl]
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f859 	bl	80002b8 <__aeabi_dsub>
 8007206:	a3a6      	add	r3, pc, #664	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x308>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f854 	bl	80002b8 <__aeabi_dsub>
 8007210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007214:	f04f 0b01 	mov.w	fp, #1
 8007218:	4658      	mov	r0, fp
 800721a:	b00b      	add	sp, #44	; 0x2c
 800721c:	ecbd 8b02 	vpop	{d8}
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	a3a0      	add	r3, pc, #640	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x310>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f845 	bl	80002b8 <__aeabi_dsub>
 800722e:	a3a0      	add	r3, pc, #640	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x318>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	f7f9 f83e 	bl	80002b8 <__aeabi_dsub>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	e9ca 2300 	strd	r2, r3, [sl]
 8007244:	4620      	mov	r0, r4
 8007246:	4629      	mov	r1, r5
 8007248:	f7f9 f836 	bl	80002b8 <__aeabi_dsub>
 800724c:	a398      	add	r3, pc, #608	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x318>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e7db      	b.n	800720c <__ieee754_rem_pio2+0x74>
 8007254:	f7f9 f832 	bl	80002bc <__adddf3>
 8007258:	45b0      	cmp	r8, r6
 800725a:	4604      	mov	r4, r0
 800725c:	460d      	mov	r5, r1
 800725e:	d016      	beq.n	800728e <__ieee754_rem_pio2+0xf6>
 8007260:	a38f      	add	r3, pc, #572	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x308>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 f829 	bl	80002bc <__adddf3>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	e9ca 2300 	strd	r2, r3, [sl]
 8007272:	4620      	mov	r0, r4
 8007274:	4629      	mov	r1, r5
 8007276:	f7f9 f81f 	bl	80002b8 <__aeabi_dsub>
 800727a:	a389      	add	r3, pc, #548	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x308>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f9 f81c 	bl	80002bc <__adddf3>
 8007284:	f04f 3bff 	mov.w	fp, #4294967295
 8007288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800728c:	e7c4      	b.n	8007218 <__ieee754_rem_pio2+0x80>
 800728e:	a386      	add	r3, pc, #536	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x310>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f9 f812 	bl	80002bc <__adddf3>
 8007298:	a385      	add	r3, pc, #532	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x318>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	f7f9 f80b 	bl	80002bc <__adddf3>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	e9ca 2300 	strd	r2, r3, [sl]
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 f801 	bl	80002b8 <__aeabi_dsub>
 80072b6:	a37e      	add	r3, pc, #504	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x318>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	e7e0      	b.n	8007280 <__ieee754_rem_pio2+0xe8>
 80072be:	4b87      	ldr	r3, [pc, #540]	; (80074dc <__ieee754_rem_pio2+0x344>)
 80072c0:	4598      	cmp	r8, r3
 80072c2:	f300 80d9 	bgt.w	8007478 <__ieee754_rem_pio2+0x2e0>
 80072c6:	f000 ff2d 	bl	8008124 <fabs>
 80072ca:	ec55 4b10 	vmov	r4, r5, d0
 80072ce:	ee10 0a10 	vmov	r0, s0
 80072d2:	a379      	add	r3, pc, #484	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x320>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	4629      	mov	r1, r5
 80072da:	f7f9 f9a5 	bl	8000628 <__aeabi_dmul>
 80072de:	4b80      	ldr	r3, [pc, #512]	; (80074e0 <__ieee754_rem_pio2+0x348>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	f7f8 ffeb 	bl	80002bc <__adddf3>
 80072e6:	f7f9 fc4f 	bl	8000b88 <__aeabi_d2iz>
 80072ea:	4683      	mov	fp, r0
 80072ec:	f7f9 f932 	bl	8000554 <__aeabi_i2d>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	ec43 2b18 	vmov	d8, r2, r3
 80072f8:	a367      	add	r3, pc, #412	; (adr r3, 8007498 <__ieee754_rem_pio2+0x300>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f9 f993 	bl	8000628 <__aeabi_dmul>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f8 ffd5 	bl	80002b8 <__aeabi_dsub>
 800730e:	a364      	add	r3, pc, #400	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x308>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	ec51 0b18 	vmov	r0, r1, d8
 800731c:	f7f9 f984 	bl	8000628 <__aeabi_dmul>
 8007320:	f1bb 0f1f 	cmp.w	fp, #31
 8007324:	4604      	mov	r4, r0
 8007326:	460d      	mov	r5, r1
 8007328:	dc0d      	bgt.n	8007346 <__ieee754_rem_pio2+0x1ae>
 800732a:	4b6e      	ldr	r3, [pc, #440]	; (80074e4 <__ieee754_rem_pio2+0x34c>)
 800732c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	4543      	cmp	r3, r8
 8007336:	d006      	beq.n	8007346 <__ieee754_rem_pio2+0x1ae>
 8007338:	4622      	mov	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	4630      	mov	r0, r6
 800733e:	4639      	mov	r1, r7
 8007340:	f7f8 ffba 	bl	80002b8 <__aeabi_dsub>
 8007344:	e00f      	b.n	8007366 <__ieee754_rem_pio2+0x1ce>
 8007346:	462b      	mov	r3, r5
 8007348:	4622      	mov	r2, r4
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f8 ffb3 	bl	80002b8 <__aeabi_dsub>
 8007352:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800735c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007360:	f1b8 0f10 	cmp.w	r8, #16
 8007364:	dc02      	bgt.n	800736c <__ieee754_rem_pio2+0x1d4>
 8007366:	e9ca 0100 	strd	r0, r1, [sl]
 800736a:	e039      	b.n	80073e0 <__ieee754_rem_pio2+0x248>
 800736c:	a34e      	add	r3, pc, #312	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x310>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	ec51 0b18 	vmov	r0, r1, d8
 8007376:	f7f9 f957 	bl	8000628 <__aeabi_dmul>
 800737a:	4604      	mov	r4, r0
 800737c:	460d      	mov	r5, r1
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4630      	mov	r0, r6
 8007384:	4639      	mov	r1, r7
 8007386:	f7f8 ff97 	bl	80002b8 <__aeabi_dsub>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4680      	mov	r8, r0
 8007390:	4689      	mov	r9, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f8 ff8f 	bl	80002b8 <__aeabi_dsub>
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	f7f8 ff8b 	bl	80002b8 <__aeabi_dsub>
 80073a2:	a343      	add	r3, pc, #268	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x318>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	ec51 0b18 	vmov	r0, r1, d8
 80073b0:	f7f9 f93a 	bl	8000628 <__aeabi_dmul>
 80073b4:	4622      	mov	r2, r4
 80073b6:	462b      	mov	r3, r5
 80073b8:	f7f8 ff7e 	bl	80002b8 <__aeabi_dsub>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f8 ff76 	bl	80002b8 <__aeabi_dsub>
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b31      	cmp	r3, #49	; 0x31
 80073d6:	dc24      	bgt.n	8007422 <__ieee754_rem_pio2+0x28a>
 80073d8:	e9ca 0100 	strd	r0, r1, [sl]
 80073dc:	4646      	mov	r6, r8
 80073de:	464f      	mov	r7, r9
 80073e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80073e4:	4630      	mov	r0, r6
 80073e6:	4642      	mov	r2, r8
 80073e8:	464b      	mov	r3, r9
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f8 ff64 	bl	80002b8 <__aeabi_dsub>
 80073f0:	462b      	mov	r3, r5
 80073f2:	4622      	mov	r2, r4
 80073f4:	f7f8 ff60 	bl	80002b8 <__aeabi_dsub>
 80073f8:	9b02      	ldr	r3, [sp, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007400:	f6bf af0a 	bge.w	8007218 <__ieee754_rem_pio2+0x80>
 8007404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007408:	f8ca 3004 	str.w	r3, [sl, #4]
 800740c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007410:	f8ca 8000 	str.w	r8, [sl]
 8007414:	f8ca 0008 	str.w	r0, [sl, #8]
 8007418:	f8ca 300c 	str.w	r3, [sl, #12]
 800741c:	f1cb 0b00 	rsb	fp, fp, #0
 8007420:	e6fa      	b.n	8007218 <__ieee754_rem_pio2+0x80>
 8007422:	a327      	add	r3, pc, #156	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x328>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	ec51 0b18 	vmov	r0, r1, d8
 800742c:	f7f9 f8fc 	bl	8000628 <__aeabi_dmul>
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f8 ff3c 	bl	80002b8 <__aeabi_dsub>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f8 ff34 	bl	80002b8 <__aeabi_dsub>
 8007450:	4622      	mov	r2, r4
 8007452:	462b      	mov	r3, r5
 8007454:	f7f8 ff30 	bl	80002b8 <__aeabi_dsub>
 8007458:	a31b      	add	r3, pc, #108	; (adr r3, 80074c8 <__ieee754_rem_pio2+0x330>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	ec51 0b18 	vmov	r0, r1, d8
 8007466:	f7f9 f8df 	bl	8000628 <__aeabi_dmul>
 800746a:	4622      	mov	r2, r4
 800746c:	462b      	mov	r3, r5
 800746e:	f7f8 ff23 	bl	80002b8 <__aeabi_dsub>
 8007472:	4604      	mov	r4, r0
 8007474:	460d      	mov	r5, r1
 8007476:	e75f      	b.n	8007338 <__ieee754_rem_pio2+0x1a0>
 8007478:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <__ieee754_rem_pio2+0x350>)
 800747a:	4598      	cmp	r8, r3
 800747c:	dd36      	ble.n	80074ec <__ieee754_rem_pio2+0x354>
 800747e:	ee10 2a10 	vmov	r2, s0
 8007482:	462b      	mov	r3, r5
 8007484:	4620      	mov	r0, r4
 8007486:	4629      	mov	r1, r5
 8007488:	f7f8 ff16 	bl	80002b8 <__aeabi_dsub>
 800748c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007490:	e9ca 0100 	strd	r0, r1, [sl]
 8007494:	e694      	b.n	80071c0 <__ieee754_rem_pio2+0x28>
 8007496:	bf00      	nop
 8007498:	54400000 	.word	0x54400000
 800749c:	3ff921fb 	.word	0x3ff921fb
 80074a0:	1a626331 	.word	0x1a626331
 80074a4:	3dd0b461 	.word	0x3dd0b461
 80074a8:	1a600000 	.word	0x1a600000
 80074ac:	3dd0b461 	.word	0x3dd0b461
 80074b0:	2e037073 	.word	0x2e037073
 80074b4:	3ba3198a 	.word	0x3ba3198a
 80074b8:	6dc9c883 	.word	0x6dc9c883
 80074bc:	3fe45f30 	.word	0x3fe45f30
 80074c0:	2e000000 	.word	0x2e000000
 80074c4:	3ba3198a 	.word	0x3ba3198a
 80074c8:	252049c1 	.word	0x252049c1
 80074cc:	397b839a 	.word	0x397b839a
 80074d0:	3fe921fb 	.word	0x3fe921fb
 80074d4:	4002d97b 	.word	0x4002d97b
 80074d8:	3ff921fb 	.word	0x3ff921fb
 80074dc:	413921fb 	.word	0x413921fb
 80074e0:	3fe00000 	.word	0x3fe00000
 80074e4:	08008530 	.word	0x08008530
 80074e8:	7fefffff 	.word	0x7fefffff
 80074ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80074f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80074f4:	ee10 0a10 	vmov	r0, s0
 80074f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80074fc:	ee10 6a10 	vmov	r6, s0
 8007500:	460f      	mov	r7, r1
 8007502:	f7f9 fb41 	bl	8000b88 <__aeabi_d2iz>
 8007506:	f7f9 f825 	bl	8000554 <__aeabi_i2d>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007516:	f7f8 fecf 	bl	80002b8 <__aeabi_dsub>
 800751a:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <__ieee754_rem_pio2+0x410>)
 800751c:	2200      	movs	r2, #0
 800751e:	f7f9 f883 	bl	8000628 <__aeabi_dmul>
 8007522:	460f      	mov	r7, r1
 8007524:	4606      	mov	r6, r0
 8007526:	f7f9 fb2f 	bl	8000b88 <__aeabi_d2iz>
 800752a:	f7f9 f813 	bl	8000554 <__aeabi_i2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800753a:	f7f8 febd 	bl	80002b8 <__aeabi_dsub>
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <__ieee754_rem_pio2+0x410>)
 8007540:	2200      	movs	r2, #0
 8007542:	f7f9 f871 	bl	8000628 <__aeabi_dmul>
 8007546:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800754a:	ad04      	add	r5, sp, #16
 800754c:	f04f 0803 	mov.w	r8, #3
 8007550:	46a9      	mov	r9, r5
 8007552:	2600      	movs	r6, #0
 8007554:	2700      	movs	r7, #0
 8007556:	4632      	mov	r2, r6
 8007558:	463b      	mov	r3, r7
 800755a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800755e:	46c3      	mov	fp, r8
 8007560:	3d08      	subs	r5, #8
 8007562:	f108 38ff 	add.w	r8, r8, #4294967295
 8007566:	f7f9 fac7 	bl	8000af8 <__aeabi_dcmpeq>
 800756a:	2800      	cmp	r0, #0
 800756c:	d1f3      	bne.n	8007556 <__ieee754_rem_pio2+0x3be>
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <__ieee754_rem_pio2+0x414>)
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	2302      	movs	r3, #2
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	4622      	mov	r2, r4
 8007578:	465b      	mov	r3, fp
 800757a:	4651      	mov	r1, sl
 800757c:	4648      	mov	r0, r9
 800757e:	f000 f993 	bl	80078a8 <__kernel_rem_pio2>
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	4683      	mov	fp, r0
 8007588:	f6bf ae46 	bge.w	8007218 <__ieee754_rem_pio2+0x80>
 800758c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007594:	e9ca 2300 	strd	r2, r3, [sl]
 8007598:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800759c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80075a4:	e73a      	b.n	800741c <__ieee754_rem_pio2+0x284>
 80075a6:	bf00      	nop
 80075a8:	41700000 	.word	0x41700000
 80075ac:	080085b0 	.word	0x080085b0

080075b0 <__ieee754_sqrt>:
 80075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	ec55 4b10 	vmov	r4, r5, d0
 80075b8:	4e55      	ldr	r6, [pc, #340]	; (8007710 <__ieee754_sqrt+0x160>)
 80075ba:	43ae      	bics	r6, r5
 80075bc:	ee10 0a10 	vmov	r0, s0
 80075c0:	ee10 3a10 	vmov	r3, s0
 80075c4:	462a      	mov	r2, r5
 80075c6:	4629      	mov	r1, r5
 80075c8:	d110      	bne.n	80075ec <__ieee754_sqrt+0x3c>
 80075ca:	ee10 2a10 	vmov	r2, s0
 80075ce:	462b      	mov	r3, r5
 80075d0:	f7f9 f82a 	bl	8000628 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4620      	mov	r0, r4
 80075da:	4629      	mov	r1, r5
 80075dc:	f7f8 fe6e 	bl	80002bc <__adddf3>
 80075e0:	4604      	mov	r4, r0
 80075e2:	460d      	mov	r5, r1
 80075e4:	ec45 4b10 	vmov	d0, r4, r5
 80075e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	dc10      	bgt.n	8007612 <__ieee754_sqrt+0x62>
 80075f0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80075f4:	4330      	orrs	r0, r6
 80075f6:	d0f5      	beq.n	80075e4 <__ieee754_sqrt+0x34>
 80075f8:	b15d      	cbz	r5, 8007612 <__ieee754_sqrt+0x62>
 80075fa:	ee10 2a10 	vmov	r2, s0
 80075fe:	462b      	mov	r3, r5
 8007600:	ee10 0a10 	vmov	r0, s0
 8007604:	f7f8 fe58 	bl	80002b8 <__aeabi_dsub>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	f7f9 f936 	bl	800087c <__aeabi_ddiv>
 8007610:	e7e6      	b.n	80075e0 <__ieee754_sqrt+0x30>
 8007612:	1512      	asrs	r2, r2, #20
 8007614:	d074      	beq.n	8007700 <__ieee754_sqrt+0x150>
 8007616:	07d4      	lsls	r4, r2, #31
 8007618:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800761c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007624:	bf5e      	ittt	pl
 8007626:	0fda      	lsrpl	r2, r3, #31
 8007628:	005b      	lslpl	r3, r3, #1
 800762a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800762e:	2400      	movs	r4, #0
 8007630:	0fda      	lsrs	r2, r3, #31
 8007632:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007636:	107f      	asrs	r7, r7, #1
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	2516      	movs	r5, #22
 800763c:	4620      	mov	r0, r4
 800763e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007642:	1886      	adds	r6, r0, r2
 8007644:	428e      	cmp	r6, r1
 8007646:	bfde      	ittt	le
 8007648:	1b89      	suble	r1, r1, r6
 800764a:	18b0      	addle	r0, r6, r2
 800764c:	18a4      	addle	r4, r4, r2
 800764e:	0049      	lsls	r1, r1, #1
 8007650:	3d01      	subs	r5, #1
 8007652:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007656:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800765a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800765e:	d1f0      	bne.n	8007642 <__ieee754_sqrt+0x92>
 8007660:	462a      	mov	r2, r5
 8007662:	f04f 0e20 	mov.w	lr, #32
 8007666:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800766a:	4281      	cmp	r1, r0
 800766c:	eb06 0c05 	add.w	ip, r6, r5
 8007670:	dc02      	bgt.n	8007678 <__ieee754_sqrt+0xc8>
 8007672:	d113      	bne.n	800769c <__ieee754_sqrt+0xec>
 8007674:	459c      	cmp	ip, r3
 8007676:	d811      	bhi.n	800769c <__ieee754_sqrt+0xec>
 8007678:	f1bc 0f00 	cmp.w	ip, #0
 800767c:	eb0c 0506 	add.w	r5, ip, r6
 8007680:	da43      	bge.n	800770a <__ieee754_sqrt+0x15a>
 8007682:	2d00      	cmp	r5, #0
 8007684:	db41      	blt.n	800770a <__ieee754_sqrt+0x15a>
 8007686:	f100 0801 	add.w	r8, r0, #1
 800768a:	1a09      	subs	r1, r1, r0
 800768c:	459c      	cmp	ip, r3
 800768e:	bf88      	it	hi
 8007690:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007694:	eba3 030c 	sub.w	r3, r3, ip
 8007698:	4432      	add	r2, r6
 800769a:	4640      	mov	r0, r8
 800769c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80076a0:	f1be 0e01 	subs.w	lr, lr, #1
 80076a4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80076a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076b0:	d1db      	bne.n	800766a <__ieee754_sqrt+0xba>
 80076b2:	430b      	orrs	r3, r1
 80076b4:	d006      	beq.n	80076c4 <__ieee754_sqrt+0x114>
 80076b6:	1c50      	adds	r0, r2, #1
 80076b8:	bf13      	iteet	ne
 80076ba:	3201      	addne	r2, #1
 80076bc:	3401      	addeq	r4, #1
 80076be:	4672      	moveq	r2, lr
 80076c0:	f022 0201 	bicne.w	r2, r2, #1
 80076c4:	1063      	asrs	r3, r4, #1
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	07e1      	lsls	r1, r4, #31
 80076ca:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076d2:	bf48      	it	mi
 80076d4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80076d8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80076dc:	4614      	mov	r4, r2
 80076de:	e781      	b.n	80075e4 <__ieee754_sqrt+0x34>
 80076e0:	0ad9      	lsrs	r1, r3, #11
 80076e2:	3815      	subs	r0, #21
 80076e4:	055b      	lsls	r3, r3, #21
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d0fa      	beq.n	80076e0 <__ieee754_sqrt+0x130>
 80076ea:	02cd      	lsls	r5, r1, #11
 80076ec:	d50a      	bpl.n	8007704 <__ieee754_sqrt+0x154>
 80076ee:	f1c2 0420 	rsb	r4, r2, #32
 80076f2:	fa23 f404 	lsr.w	r4, r3, r4
 80076f6:	1e55      	subs	r5, r2, #1
 80076f8:	4093      	lsls	r3, r2
 80076fa:	4321      	orrs	r1, r4
 80076fc:	1b42      	subs	r2, r0, r5
 80076fe:	e78a      	b.n	8007616 <__ieee754_sqrt+0x66>
 8007700:	4610      	mov	r0, r2
 8007702:	e7f0      	b.n	80076e6 <__ieee754_sqrt+0x136>
 8007704:	0049      	lsls	r1, r1, #1
 8007706:	3201      	adds	r2, #1
 8007708:	e7ef      	b.n	80076ea <__ieee754_sqrt+0x13a>
 800770a:	4680      	mov	r8, r0
 800770c:	e7bd      	b.n	800768a <__ieee754_sqrt+0xda>
 800770e:	bf00      	nop
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	00000000 	.word	0x00000000

08007718 <__kernel_cos>:
 8007718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ec57 6b10 	vmov	r6, r7, d0
 8007720:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007724:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007728:	ed8d 1b00 	vstr	d1, [sp]
 800772c:	da07      	bge.n	800773e <__kernel_cos+0x26>
 800772e:	ee10 0a10 	vmov	r0, s0
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 fa28 	bl	8000b88 <__aeabi_d2iz>
 8007738:	2800      	cmp	r0, #0
 800773a:	f000 8088 	beq.w	800784e <__kernel_cos+0x136>
 800773e:	4632      	mov	r2, r6
 8007740:	463b      	mov	r3, r7
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f8 ff6f 	bl	8000628 <__aeabi_dmul>
 800774a:	4b51      	ldr	r3, [pc, #324]	; (8007890 <__kernel_cos+0x178>)
 800774c:	2200      	movs	r2, #0
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	f7f8 ff69 	bl	8000628 <__aeabi_dmul>
 8007756:	a340      	add	r3, pc, #256	; (adr r3, 8007858 <__kernel_cos+0x140>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f8 ff60 	bl	8000628 <__aeabi_dmul>
 8007768:	a33d      	add	r3, pc, #244	; (adr r3, 8007860 <__kernel_cos+0x148>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fda5 	bl	80002bc <__adddf3>
 8007772:	4622      	mov	r2, r4
 8007774:	462b      	mov	r3, r5
 8007776:	f7f8 ff57 	bl	8000628 <__aeabi_dmul>
 800777a:	a33b      	add	r3, pc, #236	; (adr r3, 8007868 <__kernel_cos+0x150>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd9a 	bl	80002b8 <__aeabi_dsub>
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	f7f8 ff4e 	bl	8000628 <__aeabi_dmul>
 800778c:	a338      	add	r3, pc, #224	; (adr r3, 8007870 <__kernel_cos+0x158>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd93 	bl	80002bc <__adddf3>
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f7f8 ff45 	bl	8000628 <__aeabi_dmul>
 800779e:	a336      	add	r3, pc, #216	; (adr r3, 8007878 <__kernel_cos+0x160>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 fd88 	bl	80002b8 <__aeabi_dsub>
 80077a8:	4622      	mov	r2, r4
 80077aa:	462b      	mov	r3, r5
 80077ac:	f7f8 ff3c 	bl	8000628 <__aeabi_dmul>
 80077b0:	a333      	add	r3, pc, #204	; (adr r3, 8007880 <__kernel_cos+0x168>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fd81 	bl	80002bc <__adddf3>
 80077ba:	4622      	mov	r2, r4
 80077bc:	462b      	mov	r3, r5
 80077be:	f7f8 ff33 	bl	8000628 <__aeabi_dmul>
 80077c2:	4622      	mov	r2, r4
 80077c4:	462b      	mov	r3, r5
 80077c6:	f7f8 ff2f 	bl	8000628 <__aeabi_dmul>
 80077ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 ff27 	bl	8000628 <__aeabi_dmul>
 80077da:	460b      	mov	r3, r1
 80077dc:	4602      	mov	r2, r0
 80077de:	4629      	mov	r1, r5
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7f8 fd69 	bl	80002b8 <__aeabi_dsub>
 80077e6:	4b2b      	ldr	r3, [pc, #172]	; (8007894 <__kernel_cos+0x17c>)
 80077e8:	4598      	cmp	r8, r3
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	dc10      	bgt.n	8007812 <__kernel_cos+0xfa>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4650      	mov	r0, sl
 80077f6:	4659      	mov	r1, fp
 80077f8:	f7f8 fd5e 	bl	80002b8 <__aeabi_dsub>
 80077fc:	460b      	mov	r3, r1
 80077fe:	4926      	ldr	r1, [pc, #152]	; (8007898 <__kernel_cos+0x180>)
 8007800:	4602      	mov	r2, r0
 8007802:	2000      	movs	r0, #0
 8007804:	f7f8 fd58 	bl	80002b8 <__aeabi_dsub>
 8007808:	ec41 0b10 	vmov	d0, r0, r1
 800780c:	b003      	add	sp, #12
 800780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007812:	4b22      	ldr	r3, [pc, #136]	; (800789c <__kernel_cos+0x184>)
 8007814:	4920      	ldr	r1, [pc, #128]	; (8007898 <__kernel_cos+0x180>)
 8007816:	4598      	cmp	r8, r3
 8007818:	bfcc      	ite	gt
 800781a:	4d21      	ldrgt	r5, [pc, #132]	; (80078a0 <__kernel_cos+0x188>)
 800781c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007820:	2400      	movs	r4, #0
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	2000      	movs	r0, #0
 8007828:	f7f8 fd46 	bl	80002b8 <__aeabi_dsub>
 800782c:	4622      	mov	r2, r4
 800782e:	4680      	mov	r8, r0
 8007830:	4689      	mov	r9, r1
 8007832:	462b      	mov	r3, r5
 8007834:	4650      	mov	r0, sl
 8007836:	4659      	mov	r1, fp
 8007838:	f7f8 fd3e 	bl	80002b8 <__aeabi_dsub>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f8 fd3a 	bl	80002b8 <__aeabi_dsub>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	e7da      	b.n	8007804 <__kernel_cos+0xec>
 800784e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007888 <__kernel_cos+0x170>
 8007852:	e7db      	b.n	800780c <__kernel_cos+0xf4>
 8007854:	f3af 8000 	nop.w
 8007858:	be8838d4 	.word	0xbe8838d4
 800785c:	bda8fae9 	.word	0xbda8fae9
 8007860:	bdb4b1c4 	.word	0xbdb4b1c4
 8007864:	3e21ee9e 	.word	0x3e21ee9e
 8007868:	809c52ad 	.word	0x809c52ad
 800786c:	3e927e4f 	.word	0x3e927e4f
 8007870:	19cb1590 	.word	0x19cb1590
 8007874:	3efa01a0 	.word	0x3efa01a0
 8007878:	16c15177 	.word	0x16c15177
 800787c:	3f56c16c 	.word	0x3f56c16c
 8007880:	5555554c 	.word	0x5555554c
 8007884:	3fa55555 	.word	0x3fa55555
 8007888:	00000000 	.word	0x00000000
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	3fd33332 	.word	0x3fd33332
 8007898:	3ff00000 	.word	0x3ff00000
 800789c:	3fe90000 	.word	0x3fe90000
 80078a0:	3fd20000 	.word	0x3fd20000
 80078a4:	00000000 	.word	0x00000000

080078a8 <__kernel_rem_pio2>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	ed2d 8b02 	vpush	{d8}
 80078b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80078b4:	f112 0f14 	cmn.w	r2, #20
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	9101      	str	r1, [sp, #4]
 80078bc:	4bc4      	ldr	r3, [pc, #784]	; (8007bd0 <__kernel_rem_pio2+0x328>)
 80078be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80078c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80078c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ce:	bfa8      	it	ge
 80078d0:	1ed4      	subge	r4, r2, #3
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	bfb2      	itee	lt
 80078d6:	2400      	movlt	r4, #0
 80078d8:	2318      	movge	r3, #24
 80078da:	fb94 f4f3 	sdivge	r4, r4, r3
 80078de:	f06f 0317 	mvn.w	r3, #23
 80078e2:	fb04 3303 	mla	r3, r4, r3, r3
 80078e6:	eb03 0a02 	add.w	sl, r3, r2
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	9a06      	ldr	r2, [sp, #24]
 80078ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007bc0 <__kernel_rem_pio2+0x318>
 80078f2:	eb03 0802 	add.w	r8, r3, r2
 80078f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80078f8:	1aa7      	subs	r7, r4, r2
 80078fa:	ae22      	add	r6, sp, #136	; 0x88
 80078fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007900:	2500      	movs	r5, #0
 8007902:	4545      	cmp	r5, r8
 8007904:	dd13      	ble.n	800792e <__kernel_rem_pio2+0x86>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007bc0 <__kernel_rem_pio2+0x318>
 800790c:	aa22      	add	r2, sp, #136	; 0x88
 800790e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007912:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007916:	f04f 0800 	mov.w	r8, #0
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	4598      	cmp	r8, r3
 800791e:	dc2f      	bgt.n	8007980 <__kernel_rem_pio2+0xd8>
 8007920:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007924:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007928:	462f      	mov	r7, r5
 800792a:	2600      	movs	r6, #0
 800792c:	e01b      	b.n	8007966 <__kernel_rem_pio2+0xbe>
 800792e:	42ef      	cmn	r7, r5
 8007930:	d407      	bmi.n	8007942 <__kernel_rem_pio2+0x9a>
 8007932:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007936:	f7f8 fe0d 	bl	8000554 <__aeabi_i2d>
 800793a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800793e:	3501      	adds	r5, #1
 8007940:	e7df      	b.n	8007902 <__kernel_rem_pio2+0x5a>
 8007942:	ec51 0b18 	vmov	r0, r1, d8
 8007946:	e7f8      	b.n	800793a <__kernel_rem_pio2+0x92>
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007950:	f7f8 fe6a 	bl	8000628 <__aeabi_dmul>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800795c:	f7f8 fcae 	bl	80002bc <__adddf3>
 8007960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007964:	3601      	adds	r6, #1
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	429e      	cmp	r6, r3
 800796a:	f1a7 0708 	sub.w	r7, r7, #8
 800796e:	ddeb      	ble.n	8007948 <__kernel_rem_pio2+0xa0>
 8007970:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007974:	f108 0801 	add.w	r8, r8, #1
 8007978:	ecab 7b02 	vstmia	fp!, {d7}
 800797c:	3508      	adds	r5, #8
 800797e:	e7cc      	b.n	800791a <__kernel_rem_pio2+0x72>
 8007980:	9b02      	ldr	r3, [sp, #8]
 8007982:	aa0e      	add	r2, sp, #56	; 0x38
 8007984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007988:	930d      	str	r3, [sp, #52]	; 0x34
 800798a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800798c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007990:	9c02      	ldr	r4, [sp, #8]
 8007992:	930c      	str	r3, [sp, #48]	; 0x30
 8007994:	00e3      	lsls	r3, r4, #3
 8007996:	930a      	str	r3, [sp, #40]	; 0x28
 8007998:	ab9a      	add	r3, sp, #616	; 0x268
 800799a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800799e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80079a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80079a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80079a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80079ac:	46c3      	mov	fp, r8
 80079ae:	46a1      	mov	r9, r4
 80079b0:	f1b9 0f00 	cmp.w	r9, #0
 80079b4:	f1a5 0508 	sub.w	r5, r5, #8
 80079b8:	dc77      	bgt.n	8007aaa <__kernel_rem_pio2+0x202>
 80079ba:	ec47 6b10 	vmov	d0, r6, r7
 80079be:	4650      	mov	r0, sl
 80079c0:	f000 fc46 	bl	8008250 <scalbn>
 80079c4:	ec57 6b10 	vmov	r6, r7, d0
 80079c8:	2200      	movs	r2, #0
 80079ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079ce:	ee10 0a10 	vmov	r0, s0
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f8 fe28 	bl	8000628 <__aeabi_dmul>
 80079d8:	ec41 0b10 	vmov	d0, r0, r1
 80079dc:	f000 fbb8 	bl	8008150 <floor>
 80079e0:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <__kernel_rem_pio2+0x32c>)
 80079e2:	ec51 0b10 	vmov	r0, r1, d0
 80079e6:	2200      	movs	r2, #0
 80079e8:	f7f8 fe1e 	bl	8000628 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fc60 	bl	80002b8 <__aeabi_dsub>
 80079f8:	460f      	mov	r7, r1
 80079fa:	4606      	mov	r6, r0
 80079fc:	f7f9 f8c4 	bl	8000b88 <__aeabi_d2iz>
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	f7f8 fda7 	bl	8000554 <__aeabi_i2d>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 fc53 	bl	80002b8 <__aeabi_dsub>
 8007a12:	f1ba 0f00 	cmp.w	sl, #0
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	dd6d      	ble.n	8007af8 <__kernel_rem_pio2+0x250>
 8007a1c:	1e62      	subs	r2, r4, #1
 8007a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8007a20:	9d04      	ldr	r5, [sp, #16]
 8007a22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a26:	f1ca 0118 	rsb	r1, sl, #24
 8007a2a:	fa40 f301 	asr.w	r3, r0, r1
 8007a2e:	441d      	add	r5, r3
 8007a30:	408b      	lsls	r3, r1
 8007a32:	1ac0      	subs	r0, r0, r3
 8007a34:	ab0e      	add	r3, sp, #56	; 0x38
 8007a36:	9504      	str	r5, [sp, #16]
 8007a38:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a3c:	f1ca 0317 	rsb	r3, sl, #23
 8007a40:	fa40 fb03 	asr.w	fp, r0, r3
 8007a44:	f1bb 0f00 	cmp.w	fp, #0
 8007a48:	dd65      	ble.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	3301      	adds	r3, #1
 8007a50:	9304      	str	r3, [sp, #16]
 8007a52:	4615      	mov	r5, r2
 8007a54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a58:	4294      	cmp	r4, r2
 8007a5a:	f300 809c 	bgt.w	8007b96 <__kernel_rem_pio2+0x2ee>
 8007a5e:	f1ba 0f00 	cmp.w	sl, #0
 8007a62:	dd07      	ble.n	8007a74 <__kernel_rem_pio2+0x1cc>
 8007a64:	f1ba 0f01 	cmp.w	sl, #1
 8007a68:	f000 80c0 	beq.w	8007bec <__kernel_rem_pio2+0x344>
 8007a6c:	f1ba 0f02 	cmp.w	sl, #2
 8007a70:	f000 80c6 	beq.w	8007c00 <__kernel_rem_pio2+0x358>
 8007a74:	f1bb 0f02 	cmp.w	fp, #2
 8007a78:	d14d      	bne.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a7a:	4632      	mov	r2, r6
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	4956      	ldr	r1, [pc, #344]	; (8007bd8 <__kernel_rem_pio2+0x330>)
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7f8 fc19 	bl	80002b8 <__aeabi_dsub>
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	2d00      	cmp	r5, #0
 8007a8c:	d043      	beq.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a8e:	4650      	mov	r0, sl
 8007a90:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007bc8 <__kernel_rem_pio2+0x320>
 8007a94:	f000 fbdc 	bl	8008250 <scalbn>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	ec53 2b10 	vmov	r2, r3, d0
 8007aa0:	f7f8 fc0a 	bl	80002b8 <__aeabi_dsub>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	e035      	b.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007aaa:	4b4c      	ldr	r3, [pc, #304]	; (8007bdc <__kernel_rem_pio2+0x334>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fdb9 	bl	8000628 <__aeabi_dmul>
 8007ab6:	f7f9 f867 	bl	8000b88 <__aeabi_d2iz>
 8007aba:	f7f8 fd4b 	bl	8000554 <__aeabi_i2d>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	ec43 2b18 	vmov	d8, r2, r3
 8007ac6:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <__kernel_rem_pio2+0x338>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f7f8 fdad 	bl	8000628 <__aeabi_dmul>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	f7f8 fbef 	bl	80002b8 <__aeabi_dsub>
 8007ada:	f7f9 f855 	bl	8000b88 <__aeabi_d2iz>
 8007ade:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ae2:	f84b 0b04 	str.w	r0, [fp], #4
 8007ae6:	ec51 0b18 	vmov	r0, r1, d8
 8007aea:	f7f8 fbe7 	bl	80002bc <__adddf3>
 8007aee:	f109 39ff 	add.w	r9, r9, #4294967295
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	e75b      	b.n	80079b0 <__kernel_rem_pio2+0x108>
 8007af8:	d106      	bne.n	8007b08 <__kernel_rem_pio2+0x260>
 8007afa:	1e63      	subs	r3, r4, #1
 8007afc:	aa0e      	add	r2, sp, #56	; 0x38
 8007afe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007b06:	e79d      	b.n	8007a44 <__kernel_rem_pio2+0x19c>
 8007b08:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <__kernel_rem_pio2+0x33c>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f9 f812 	bl	8000b34 <__aeabi_dcmpge>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d13d      	bne.n	8007b90 <__kernel_rem_pio2+0x2e8>
 8007b14:	4683      	mov	fp, r0
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 ffeb 	bl	8000af8 <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f000 80c0 	beq.w	8007ca8 <__kernel_rem_pio2+0x400>
 8007b28:	1e65      	subs	r5, r4, #1
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	9902      	ldr	r1, [sp, #8]
 8007b30:	428b      	cmp	r3, r1
 8007b32:	da6c      	bge.n	8007c0e <__kernel_rem_pio2+0x366>
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	f000 8089 	beq.w	8007c4c <__kernel_rem_pio2+0x3a4>
 8007b3a:	ab0e      	add	r3, sp, #56	; 0x38
 8007b3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80ad 	beq.w	8007ca4 <__kernel_rem_pio2+0x3fc>
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007bc8 <__kernel_rem_pio2+0x320>
 8007b50:	f000 fb7e 	bl	8008250 <scalbn>
 8007b54:	ab9a      	add	r3, sp, #616	; 0x268
 8007b56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b5a:	ec57 6b10 	vmov	r6, r7, d0
 8007b5e:	00ec      	lsls	r4, r5, #3
 8007b60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007b64:	46aa      	mov	sl, r5
 8007b66:	f1ba 0f00 	cmp.w	sl, #0
 8007b6a:	f280 80d6 	bge.w	8007d1a <__kernel_rem_pio2+0x472>
 8007b6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007bc0 <__kernel_rem_pio2+0x318>
 8007b72:	462e      	mov	r6, r5
 8007b74:	2e00      	cmp	r6, #0
 8007b76:	f2c0 8104 	blt.w	8007d82 <__kernel_rem_pio2+0x4da>
 8007b7a:	ab72      	add	r3, sp, #456	; 0x1c8
 8007b7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007b80:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007be8 <__kernel_rem_pio2+0x340>
 8007b84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007b88:	f04f 0800 	mov.w	r8, #0
 8007b8c:	1baf      	subs	r7, r5, r6
 8007b8e:	e0ea      	b.n	8007d66 <__kernel_rem_pio2+0x4be>
 8007b90:	f04f 0b02 	mov.w	fp, #2
 8007b94:	e759      	b.n	8007a4a <__kernel_rem_pio2+0x1a2>
 8007b96:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9a:	b955      	cbnz	r5, 8007bb2 <__kernel_rem_pio2+0x30a>
 8007b9c:	b123      	cbz	r3, 8007ba8 <__kernel_rem_pio2+0x300>
 8007b9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007ba2:	f8c8 3000 	str.w	r3, [r8]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	3201      	adds	r2, #1
 8007baa:	f108 0804 	add.w	r8, r8, #4
 8007bae:	461d      	mov	r5, r3
 8007bb0:	e752      	b.n	8007a58 <__kernel_rem_pio2+0x1b0>
 8007bb2:	1acb      	subs	r3, r1, r3
 8007bb4:	f8c8 3000 	str.w	r3, [r8]
 8007bb8:	462b      	mov	r3, r5
 8007bba:	e7f5      	b.n	8007ba8 <__kernel_rem_pio2+0x300>
 8007bbc:	f3af 8000 	nop.w
	...
 8007bcc:	3ff00000 	.word	0x3ff00000
 8007bd0:	080086f8 	.word	0x080086f8
 8007bd4:	40200000 	.word	0x40200000
 8007bd8:	3ff00000 	.word	0x3ff00000
 8007bdc:	3e700000 	.word	0x3e700000
 8007be0:	41700000 	.word	0x41700000
 8007be4:	3fe00000 	.word	0x3fe00000
 8007be8:	080086b8 	.word	0x080086b8
 8007bec:	1e62      	subs	r2, r4, #1
 8007bee:	ab0e      	add	r3, sp, #56	; 0x38
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bf8:	a90e      	add	r1, sp, #56	; 0x38
 8007bfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bfe:	e739      	b.n	8007a74 <__kernel_rem_pio2+0x1cc>
 8007c00:	1e62      	subs	r2, r4, #1
 8007c02:	ab0e      	add	r3, sp, #56	; 0x38
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c0c:	e7f4      	b.n	8007bf8 <__kernel_rem_pio2+0x350>
 8007c0e:	a90e      	add	r1, sp, #56	; 0x38
 8007c10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c14:	3b01      	subs	r3, #1
 8007c16:	430a      	orrs	r2, r1
 8007c18:	e789      	b.n	8007b2e <__kernel_rem_pio2+0x286>
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d0fa      	beq.n	8007c1a <__kernel_rem_pio2+0x372>
 8007c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c26:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007c2a:	446a      	add	r2, sp
 8007c2c:	3a98      	subs	r2, #152	; 0x98
 8007c2e:	920a      	str	r2, [sp, #40]	; 0x28
 8007c30:	9a08      	ldr	r2, [sp, #32]
 8007c32:	18e3      	adds	r3, r4, r3
 8007c34:	18a5      	adds	r5, r4, r2
 8007c36:	aa22      	add	r2, sp, #136	; 0x88
 8007c38:	f104 0801 	add.w	r8, r4, #1
 8007c3c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	9b04      	ldr	r3, [sp, #16]
 8007c44:	4543      	cmp	r3, r8
 8007c46:	da04      	bge.n	8007c52 <__kernel_rem_pio2+0x3aa>
 8007c48:	461c      	mov	r4, r3
 8007c4a:	e6a3      	b.n	8007994 <__kernel_rem_pio2+0xec>
 8007c4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e7e4      	b.n	8007c1c <__kernel_rem_pio2+0x374>
 8007c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c58:	f7f8 fc7c 	bl	8000554 <__aeabi_i2d>
 8007c5c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	46ab      	mov	fp, r5
 8007c64:	461c      	mov	r4, r3
 8007c66:	f04f 0900 	mov.w	r9, #0
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	2700      	movs	r7, #0
 8007c6e:	9b06      	ldr	r3, [sp, #24]
 8007c70:	4599      	cmp	r9, r3
 8007c72:	dd06      	ble.n	8007c82 <__kernel_rem_pio2+0x3da>
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007c7a:	f108 0801 	add.w	r8, r8, #1
 8007c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c80:	e7df      	b.n	8007c42 <__kernel_rem_pio2+0x39a>
 8007c82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007c86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007c8a:	f7f8 fccd 	bl	8000628 <__aeabi_dmul>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fb11 	bl	80002bc <__adddf3>
 8007c9a:	f109 0901 	add.w	r9, r9, #1
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	460f      	mov	r7, r1
 8007ca2:	e7e4      	b.n	8007c6e <__kernel_rem_pio2+0x3c6>
 8007ca4:	3d01      	subs	r5, #1
 8007ca6:	e748      	b.n	8007b3a <__kernel_rem_pio2+0x292>
 8007ca8:	ec47 6b10 	vmov	d0, r6, r7
 8007cac:	f1ca 0000 	rsb	r0, sl, #0
 8007cb0:	f000 face 	bl	8008250 <scalbn>
 8007cb4:	ec57 6b10 	vmov	r6, r7, d0
 8007cb8:	4ba0      	ldr	r3, [pc, #640]	; (8007f3c <__kernel_rem_pio2+0x694>)
 8007cba:	ee10 0a10 	vmov	r0, s0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 ff37 	bl	8000b34 <__aeabi_dcmpge>
 8007cc6:	b1f8      	cbz	r0, 8007d08 <__kernel_rem_pio2+0x460>
 8007cc8:	4b9d      	ldr	r3, [pc, #628]	; (8007f40 <__kernel_rem_pio2+0x698>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7f8 fcaa 	bl	8000628 <__aeabi_dmul>
 8007cd4:	f7f8 ff58 	bl	8000b88 <__aeabi_d2iz>
 8007cd8:	4680      	mov	r8, r0
 8007cda:	f7f8 fc3b 	bl	8000554 <__aeabi_i2d>
 8007cde:	4b97      	ldr	r3, [pc, #604]	; (8007f3c <__kernel_rem_pio2+0x694>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fca1 	bl	8000628 <__aeabi_dmul>
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4639      	mov	r1, r7
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7f8 fae3 	bl	80002b8 <__aeabi_dsub>
 8007cf2:	f7f8 ff49 	bl	8000b88 <__aeabi_d2iz>
 8007cf6:	1c65      	adds	r5, r4, #1
 8007cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8007cfa:	f10a 0a18 	add.w	sl, sl, #24
 8007cfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d02:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007d06:	e720      	b.n	8007b4a <__kernel_rem_pio2+0x2a2>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 ff3c 	bl	8000b88 <__aeabi_d2iz>
 8007d10:	ab0e      	add	r3, sp, #56	; 0x38
 8007d12:	4625      	mov	r5, r4
 8007d14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d18:	e717      	b.n	8007b4a <__kernel_rem_pio2+0x2a2>
 8007d1a:	ab0e      	add	r3, sp, #56	; 0x38
 8007d1c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007d20:	f7f8 fc18 	bl	8000554 <__aeabi_i2d>
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	f7f8 fc7e 	bl	8000628 <__aeabi_dmul>
 8007d2c:	4b84      	ldr	r3, [pc, #528]	; (8007f40 <__kernel_rem_pio2+0x698>)
 8007d2e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007d32:	2200      	movs	r2, #0
 8007d34:	4630      	mov	r0, r6
 8007d36:	4639      	mov	r1, r7
 8007d38:	f7f8 fc76 	bl	8000628 <__aeabi_dmul>
 8007d3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d40:	4606      	mov	r6, r0
 8007d42:	460f      	mov	r7, r1
 8007d44:	e70f      	b.n	8007b66 <__kernel_rem_pio2+0x2be>
 8007d46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007d4e:	f7f8 fc6b 	bl	8000628 <__aeabi_dmul>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5a:	f7f8 faaf 	bl	80002bc <__adddf3>
 8007d5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d62:	f108 0801 	add.w	r8, r8, #1
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	4598      	cmp	r8, r3
 8007d6a:	dc01      	bgt.n	8007d70 <__kernel_rem_pio2+0x4c8>
 8007d6c:	45b8      	cmp	r8, r7
 8007d6e:	ddea      	ble.n	8007d46 <__kernel_rem_pio2+0x49e>
 8007d70:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007d74:	ab4a      	add	r3, sp, #296	; 0x128
 8007d76:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d7a:	ed87 7b00 	vstr	d7, [r7]
 8007d7e:	3e01      	subs	r6, #1
 8007d80:	e6f8      	b.n	8007b74 <__kernel_rem_pio2+0x2cc>
 8007d82:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	dc0b      	bgt.n	8007da0 <__kernel_rem_pio2+0x4f8>
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dc35      	bgt.n	8007df8 <__kernel_rem_pio2+0x550>
 8007d8c:	d059      	beq.n	8007e42 <__kernel_rem_pio2+0x59a>
 8007d8e:	9b04      	ldr	r3, [sp, #16]
 8007d90:	f003 0007 	and.w	r0, r3, #7
 8007d94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007d98:	ecbd 8b02 	vpop	{d8}
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d1f3      	bne.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007da6:	ab4a      	add	r3, sp, #296	; 0x128
 8007da8:	4423      	add	r3, r4
 8007daa:	9306      	str	r3, [sp, #24]
 8007dac:	461c      	mov	r4, r3
 8007dae:	469a      	mov	sl, r3
 8007db0:	9502      	str	r5, [sp, #8]
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007dba:	dc6b      	bgt.n	8007e94 <__kernel_rem_pio2+0x5ec>
 8007dbc:	46aa      	mov	sl, r5
 8007dbe:	f1ba 0f01 	cmp.w	sl, #1
 8007dc2:	f1a4 0408 	sub.w	r4, r4, #8
 8007dc6:	f300 8085 	bgt.w	8007ed4 <__kernel_rem_pio2+0x62c>
 8007dca:	9c06      	ldr	r4, [sp, #24]
 8007dcc:	2000      	movs	r0, #0
 8007dce:	3408      	adds	r4, #8
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	2d01      	cmp	r5, #1
 8007dd4:	f300 809d 	bgt.w	8007f12 <__kernel_rem_pio2+0x66a>
 8007dd8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007ddc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007de0:	f1bb 0f00 	cmp.w	fp, #0
 8007de4:	f040 809b 	bne.w	8007f1e <__kernel_rem_pio2+0x676>
 8007de8:	9b01      	ldr	r3, [sp, #4]
 8007dea:	e9c3 5600 	strd	r5, r6, [r3]
 8007dee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007df2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007df6:	e7ca      	b.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007df8:	3408      	adds	r4, #8
 8007dfa:	ab4a      	add	r3, sp, #296	; 0x128
 8007dfc:	441c      	add	r4, r3
 8007dfe:	462e      	mov	r6, r5
 8007e00:	2000      	movs	r0, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	2e00      	cmp	r6, #0
 8007e06:	da36      	bge.n	8007e76 <__kernel_rem_pio2+0x5ce>
 8007e08:	f1bb 0f00 	cmp.w	fp, #0
 8007e0c:	d039      	beq.n	8007e82 <__kernel_rem_pio2+0x5da>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e14:	9c01      	ldr	r4, [sp, #4]
 8007e16:	e9c4 2300 	strd	r2, r3, [r4]
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007e22:	f7f8 fa49 	bl	80002b8 <__aeabi_dsub>
 8007e26:	ae4c      	add	r6, sp, #304	; 0x130
 8007e28:	2401      	movs	r4, #1
 8007e2a:	42a5      	cmp	r5, r4
 8007e2c:	da2c      	bge.n	8007e88 <__kernel_rem_pio2+0x5e0>
 8007e2e:	f1bb 0f00 	cmp.w	fp, #0
 8007e32:	d002      	beq.n	8007e3a <__kernel_rem_pio2+0x592>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e38:	4619      	mov	r1, r3
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e40:	e7a5      	b.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007e42:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007e46:	eb0d 0403 	add.w	r4, sp, r3
 8007e4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007e4e:	2000      	movs	r0, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	da09      	bge.n	8007e6a <__kernel_rem_pio2+0x5c2>
 8007e56:	f1bb 0f00 	cmp.w	fp, #0
 8007e5a:	d002      	beq.n	8007e62 <__kernel_rem_pio2+0x5ba>
 8007e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e60:	4619      	mov	r1, r3
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	e9c3 0100 	strd	r0, r1, [r3]
 8007e68:	e791      	b.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007e6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e6e:	f7f8 fa25 	bl	80002bc <__adddf3>
 8007e72:	3d01      	subs	r5, #1
 8007e74:	e7ed      	b.n	8007e52 <__kernel_rem_pio2+0x5aa>
 8007e76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e7a:	f7f8 fa1f 	bl	80002bc <__adddf3>
 8007e7e:	3e01      	subs	r6, #1
 8007e80:	e7c0      	b.n	8007e04 <__kernel_rem_pio2+0x55c>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	e7c5      	b.n	8007e14 <__kernel_rem_pio2+0x56c>
 8007e88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007e8c:	f7f8 fa16 	bl	80002bc <__adddf3>
 8007e90:	3401      	adds	r4, #1
 8007e92:	e7ca      	b.n	8007e2a <__kernel_rem_pio2+0x582>
 8007e94:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007e9c:	9b02      	ldr	r3, [sp, #8]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	9302      	str	r3, [sp, #8]
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	f7f8 fa07 	bl	80002bc <__adddf3>
 8007eae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 f9fd 	bl	80002b8 <__aeabi_dsub>
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	f7f8 f9fb 	bl	80002bc <__adddf3>
 8007ec6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007eca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ece:	ed8a 7b00 	vstr	d7, [sl]
 8007ed2:	e76e      	b.n	8007db2 <__kernel_rem_pio2+0x50a>
 8007ed4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007ed8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007edc:	4640      	mov	r0, r8
 8007ede:	4632      	mov	r2, r6
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f9ea 	bl	80002bc <__adddf3>
 8007ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 f9e0 	bl	80002b8 <__aeabi_dsub>
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	f7f8 f9de 	bl	80002bc <__adddf3>
 8007f00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f08:	ed84 7b00 	vstr	d7, [r4]
 8007f0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f10:	e755      	b.n	8007dbe <__kernel_rem_pio2+0x516>
 8007f12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007f16:	f7f8 f9d1 	bl	80002bc <__adddf3>
 8007f1a:	3d01      	subs	r5, #1
 8007f1c:	e759      	b.n	8007dd2 <__kernel_rem_pio2+0x52a>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	9a01      	ldr	r2, [sp, #4]
 8007f22:	601d      	str	r5, [r3, #0]
 8007f24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007f28:	605c      	str	r4, [r3, #4]
 8007f2a:	609f      	str	r7, [r3, #8]
 8007f2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007f30:	60d3      	str	r3, [r2, #12]
 8007f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f36:	6110      	str	r0, [r2, #16]
 8007f38:	6153      	str	r3, [r2, #20]
 8007f3a:	e728      	b.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007f3c:	41700000 	.word	0x41700000
 8007f40:	3e700000 	.word	0x3e700000
 8007f44:	00000000 	.word	0x00000000

08007f48 <__kernel_sin>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	ed2d 8b04 	vpush	{d8-d9}
 8007f50:	eeb0 8a41 	vmov.f32	s16, s2
 8007f54:	eef0 8a61 	vmov.f32	s17, s3
 8007f58:	ec55 4b10 	vmov	r4, r5, d0
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f66:	9001      	str	r0, [sp, #4]
 8007f68:	da06      	bge.n	8007f78 <__kernel_sin+0x30>
 8007f6a:	ee10 0a10 	vmov	r0, s0
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 fe0a 	bl	8000b88 <__aeabi_d2iz>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d051      	beq.n	800801c <__kernel_sin+0xd4>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 fb52 	bl	8000628 <__aeabi_dmul>
 8007f84:	4682      	mov	sl, r0
 8007f86:	468b      	mov	fp, r1
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 fb4a 	bl	8000628 <__aeabi_dmul>
 8007f94:	a341      	add	r3, pc, #260	; (adr r3, 800809c <__kernel_sin+0x154>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	f7f8 fb41 	bl	8000628 <__aeabi_dmul>
 8007fa6:	a33f      	add	r3, pc, #252	; (adr r3, 80080a4 <__kernel_sin+0x15c>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f984 	bl	80002b8 <__aeabi_dsub>
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	f7f8 fb38 	bl	8000628 <__aeabi_dmul>
 8007fb8:	a33c      	add	r3, pc, #240	; (adr r3, 80080ac <__kernel_sin+0x164>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f97d 	bl	80002bc <__adddf3>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 fb2f 	bl	8000628 <__aeabi_dmul>
 8007fca:	a33a      	add	r3, pc, #232	; (adr r3, 80080b4 <__kernel_sin+0x16c>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f972 	bl	80002b8 <__aeabi_dsub>
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	f7f8 fb26 	bl	8000628 <__aeabi_dmul>
 8007fdc:	a337      	add	r3, pc, #220	; (adr r3, 80080bc <__kernel_sin+0x174>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 f96b 	bl	80002bc <__adddf3>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	b9eb      	cbnz	r3, 800802a <__kernel_sin+0xe2>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	f7f8 fb17 	bl	8000628 <__aeabi_dmul>
 8007ffa:	a325      	add	r3, pc, #148	; (adr r3, 8008090 <__kernel_sin+0x148>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f95a 	bl	80002b8 <__aeabi_dsub>
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	f7f8 fb0e 	bl	8000628 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 f952 	bl	80002bc <__adddf3>
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	ec45 4b10 	vmov	d0, r4, r5
 8008020:	b003      	add	sp, #12
 8008022:	ecbd 8b04 	vpop	{d8-d9}
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <__kernel_sin+0x150>)
 800802c:	ec51 0b18 	vmov	r0, r1, d8
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 faf9 	bl	8000628 <__aeabi_dmul>
 8008036:	4632      	mov	r2, r6
 8008038:	ec41 0b19 	vmov	d9, r0, r1
 800803c:	463b      	mov	r3, r7
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	f7f8 faf1 	bl	8000628 <__aeabi_dmul>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	ec51 0b19 	vmov	r0, r1, d9
 800804e:	f7f8 f933 	bl	80002b8 <__aeabi_dsub>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 fae7 	bl	8000628 <__aeabi_dmul>
 800805a:	ec53 2b18 	vmov	r2, r3, d8
 800805e:	f7f8 f92b 	bl	80002b8 <__aeabi_dsub>
 8008062:	a30b      	add	r3, pc, #44	; (adr r3, 8008090 <__kernel_sin+0x148>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	f7f8 fada 	bl	8000628 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 f91e 	bl	80002bc <__adddf3>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 f916 	bl	80002b8 <__aeabi_dsub>
 800808c:	e7c4      	b.n	8008018 <__kernel_sin+0xd0>
 800808e:	bf00      	nop
 8008090:	55555549 	.word	0x55555549
 8008094:	3fc55555 	.word	0x3fc55555
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	5acfd57c 	.word	0x5acfd57c
 80080a0:	3de5d93a 	.word	0x3de5d93a
 80080a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80080a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80080ac:	57b1fe7d 	.word	0x57b1fe7d
 80080b0:	3ec71de3 	.word	0x3ec71de3
 80080b4:	19c161d5 	.word	0x19c161d5
 80080b8:	3f2a01a0 	.word	0x3f2a01a0
 80080bc:	1110f8a6 	.word	0x1110f8a6
 80080c0:	3f811111 	.word	0x3f811111

080080c4 <with_errno>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	4616      	mov	r6, r2
 80080cc:	f7fc ff60 	bl	8004f90 <__errno>
 80080d0:	4629      	mov	r1, r5
 80080d2:	6006      	str	r6, [r0, #0]
 80080d4:	4620      	mov	r0, r4
 80080d6:	bd70      	pop	{r4, r5, r6, pc}

080080d8 <xflow>:
 80080d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080da:	4614      	mov	r4, r2
 80080dc:	461d      	mov	r5, r3
 80080de:	b108      	cbz	r0, 80080e4 <xflow+0xc>
 80080e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	e9cd 2300 	strd	r2, r3, [sp]
 80080e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ec:	4620      	mov	r0, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 fa9a 	bl	8000628 <__aeabi_dmul>
 80080f4:	2222      	movs	r2, #34	; 0x22
 80080f6:	b003      	add	sp, #12
 80080f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080fc:	f7ff bfe2 	b.w	80080c4 <with_errno>

08008100 <__math_uflow>:
 8008100:	b508      	push	{r3, lr}
 8008102:	2200      	movs	r2, #0
 8008104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008108:	f7ff ffe6 	bl	80080d8 <xflow>
 800810c:	ec41 0b10 	vmov	d0, r0, r1
 8008110:	bd08      	pop	{r3, pc}

08008112 <__math_oflow>:
 8008112:	b508      	push	{r3, lr}
 8008114:	2200      	movs	r2, #0
 8008116:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800811a:	f7ff ffdd 	bl	80080d8 <xflow>
 800811e:	ec41 0b10 	vmov	d0, r0, r1
 8008122:	bd08      	pop	{r3, pc}

08008124 <fabs>:
 8008124:	ec51 0b10 	vmov	r0, r1, d0
 8008128:	ee10 2a10 	vmov	r2, s0
 800812c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008130:	ec43 2b10 	vmov	d0, r2, r3
 8008134:	4770      	bx	lr

08008136 <finite>:
 8008136:	b082      	sub	sp, #8
 8008138:	ed8d 0b00 	vstr	d0, [sp]
 800813c:	9801      	ldr	r0, [sp, #4]
 800813e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008142:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008146:	0fc0      	lsrs	r0, r0, #31
 8008148:	b002      	add	sp, #8
 800814a:	4770      	bx	lr
 800814c:	0000      	movs	r0, r0
	...

08008150 <floor>:
 8008150:	ec51 0b10 	vmov	r0, r1, d0
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800815c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008160:	2e13      	cmp	r6, #19
 8008162:	ee10 5a10 	vmov	r5, s0
 8008166:	ee10 8a10 	vmov	r8, s0
 800816a:	460c      	mov	r4, r1
 800816c:	dc32      	bgt.n	80081d4 <floor+0x84>
 800816e:	2e00      	cmp	r6, #0
 8008170:	da14      	bge.n	800819c <floor+0x4c>
 8008172:	a333      	add	r3, pc, #204	; (adr r3, 8008240 <floor+0xf0>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f8a0 	bl	80002bc <__adddf3>
 800817c:	2200      	movs	r2, #0
 800817e:	2300      	movs	r3, #0
 8008180:	f7f8 fce2 	bl	8000b48 <__aeabi_dcmpgt>
 8008184:	b138      	cbz	r0, 8008196 <floor+0x46>
 8008186:	2c00      	cmp	r4, #0
 8008188:	da57      	bge.n	800823a <floor+0xea>
 800818a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800818e:	431d      	orrs	r5, r3
 8008190:	d001      	beq.n	8008196 <floor+0x46>
 8008192:	4c2d      	ldr	r4, [pc, #180]	; (8008248 <floor+0xf8>)
 8008194:	2500      	movs	r5, #0
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	e025      	b.n	80081e8 <floor+0x98>
 800819c:	4f2b      	ldr	r7, [pc, #172]	; (800824c <floor+0xfc>)
 800819e:	4137      	asrs	r7, r6
 80081a0:	ea01 0307 	and.w	r3, r1, r7
 80081a4:	4303      	orrs	r3, r0
 80081a6:	d01f      	beq.n	80081e8 <floor+0x98>
 80081a8:	a325      	add	r3, pc, #148	; (adr r3, 8008240 <floor+0xf0>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 f885 	bl	80002bc <__adddf3>
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	f7f8 fcc7 	bl	8000b48 <__aeabi_dcmpgt>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d0eb      	beq.n	8008196 <floor+0x46>
 80081be:	2c00      	cmp	r4, #0
 80081c0:	bfbe      	ittt	lt
 80081c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80081c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80081ca:	19a4      	addlt	r4, r4, r6
 80081cc:	ea24 0407 	bic.w	r4, r4, r7
 80081d0:	2500      	movs	r5, #0
 80081d2:	e7e0      	b.n	8008196 <floor+0x46>
 80081d4:	2e33      	cmp	r6, #51	; 0x33
 80081d6:	dd0b      	ble.n	80081f0 <floor+0xa0>
 80081d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081dc:	d104      	bne.n	80081e8 <floor+0x98>
 80081de:	ee10 2a10 	vmov	r2, s0
 80081e2:	460b      	mov	r3, r1
 80081e4:	f7f8 f86a 	bl	80002bc <__adddf3>
 80081e8:	ec41 0b10 	vmov	d0, r0, r1
 80081ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	fa23 f707 	lsr.w	r7, r3, r7
 80081fc:	4207      	tst	r7, r0
 80081fe:	d0f3      	beq.n	80081e8 <floor+0x98>
 8008200:	a30f      	add	r3, pc, #60	; (adr r3, 8008240 <floor+0xf0>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f7f8 f859 	bl	80002bc <__adddf3>
 800820a:	2200      	movs	r2, #0
 800820c:	2300      	movs	r3, #0
 800820e:	f7f8 fc9b 	bl	8000b48 <__aeabi_dcmpgt>
 8008212:	2800      	cmp	r0, #0
 8008214:	d0bf      	beq.n	8008196 <floor+0x46>
 8008216:	2c00      	cmp	r4, #0
 8008218:	da02      	bge.n	8008220 <floor+0xd0>
 800821a:	2e14      	cmp	r6, #20
 800821c:	d103      	bne.n	8008226 <floor+0xd6>
 800821e:	3401      	adds	r4, #1
 8008220:	ea25 0507 	bic.w	r5, r5, r7
 8008224:	e7b7      	b.n	8008196 <floor+0x46>
 8008226:	2301      	movs	r3, #1
 8008228:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800822c:	fa03 f606 	lsl.w	r6, r3, r6
 8008230:	4435      	add	r5, r6
 8008232:	4545      	cmp	r5, r8
 8008234:	bf38      	it	cc
 8008236:	18e4      	addcc	r4, r4, r3
 8008238:	e7f2      	b.n	8008220 <floor+0xd0>
 800823a:	2500      	movs	r5, #0
 800823c:	462c      	mov	r4, r5
 800823e:	e7aa      	b.n	8008196 <floor+0x46>
 8008240:	8800759c 	.word	0x8800759c
 8008244:	7e37e43c 	.word	0x7e37e43c
 8008248:	bff00000 	.word	0xbff00000
 800824c:	000fffff 	.word	0x000fffff

08008250 <scalbn>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	ec55 4b10 	vmov	r4, r5, d0
 8008256:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800825a:	4606      	mov	r6, r0
 800825c:	462b      	mov	r3, r5
 800825e:	b99a      	cbnz	r2, 8008288 <scalbn+0x38>
 8008260:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008264:	4323      	orrs	r3, r4
 8008266:	d036      	beq.n	80082d6 <scalbn+0x86>
 8008268:	4b39      	ldr	r3, [pc, #228]	; (8008350 <scalbn+0x100>)
 800826a:	4629      	mov	r1, r5
 800826c:	ee10 0a10 	vmov	r0, s0
 8008270:	2200      	movs	r2, #0
 8008272:	f7f8 f9d9 	bl	8000628 <__aeabi_dmul>
 8008276:	4b37      	ldr	r3, [pc, #220]	; (8008354 <scalbn+0x104>)
 8008278:	429e      	cmp	r6, r3
 800827a:	4604      	mov	r4, r0
 800827c:	460d      	mov	r5, r1
 800827e:	da10      	bge.n	80082a2 <scalbn+0x52>
 8008280:	a32b      	add	r3, pc, #172	; (adr r3, 8008330 <scalbn+0xe0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	e03a      	b.n	80082fe <scalbn+0xae>
 8008288:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800828c:	428a      	cmp	r2, r1
 800828e:	d10c      	bne.n	80082aa <scalbn+0x5a>
 8008290:	ee10 2a10 	vmov	r2, s0
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f8 f810 	bl	80002bc <__adddf3>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	e019      	b.n	80082d6 <scalbn+0x86>
 80082a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082a6:	460b      	mov	r3, r1
 80082a8:	3a36      	subs	r2, #54	; 0x36
 80082aa:	4432      	add	r2, r6
 80082ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80082b0:	428a      	cmp	r2, r1
 80082b2:	dd08      	ble.n	80082c6 <scalbn+0x76>
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	a120      	add	r1, pc, #128	; (adr r1, 8008338 <scalbn+0xe8>)
 80082b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082bc:	da1c      	bge.n	80082f8 <scalbn+0xa8>
 80082be:	a120      	add	r1, pc, #128	; (adr r1, 8008340 <scalbn+0xf0>)
 80082c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c4:	e018      	b.n	80082f8 <scalbn+0xa8>
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	dd08      	ble.n	80082dc <scalbn+0x8c>
 80082ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80082d6:	ec45 4b10 	vmov	d0, r4, r5
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082e0:	da19      	bge.n	8008316 <scalbn+0xc6>
 80082e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082e6:	429e      	cmp	r6, r3
 80082e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80082ec:	dd0a      	ble.n	8008304 <scalbn+0xb4>
 80082ee:	a112      	add	r1, pc, #72	; (adr r1, 8008338 <scalbn+0xe8>)
 80082f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e2      	bne.n	80082be <scalbn+0x6e>
 80082f8:	a30f      	add	r3, pc, #60	; (adr r3, 8008338 <scalbn+0xe8>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f8 f993 	bl	8000628 <__aeabi_dmul>
 8008302:	e7cb      	b.n	800829c <scalbn+0x4c>
 8008304:	a10a      	add	r1, pc, #40	; (adr r1, 8008330 <scalbn+0xe0>)
 8008306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0b8      	beq.n	8008280 <scalbn+0x30>
 800830e:	a10e      	add	r1, pc, #56	; (adr r1, 8008348 <scalbn+0xf8>)
 8008310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008314:	e7b4      	b.n	8008280 <scalbn+0x30>
 8008316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800831a:	3236      	adds	r2, #54	; 0x36
 800831c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008320:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008324:	4620      	mov	r0, r4
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <scalbn+0x108>)
 8008328:	2200      	movs	r2, #0
 800832a:	e7e8      	b.n	80082fe <scalbn+0xae>
 800832c:	f3af 8000 	nop.w
 8008330:	c2f8f359 	.word	0xc2f8f359
 8008334:	01a56e1f 	.word	0x01a56e1f
 8008338:	8800759c 	.word	0x8800759c
 800833c:	7e37e43c 	.word	0x7e37e43c
 8008340:	8800759c 	.word	0x8800759c
 8008344:	fe37e43c 	.word	0xfe37e43c
 8008348:	c2f8f359 	.word	0xc2f8f359
 800834c:	81a56e1f 	.word	0x81a56e1f
 8008350:	43500000 	.word	0x43500000
 8008354:	ffff3cb0 	.word	0xffff3cb0
 8008358:	3c900000 	.word	0x3c900000

0800835c <_init>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	bf00      	nop
 8008360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008362:	bc08      	pop	{r3}
 8008364:	469e      	mov	lr, r3
 8008366:	4770      	bx	lr

08008368 <_fini>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr
